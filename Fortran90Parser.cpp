
// Generated from Fortran90Parser.g4 by ANTLR 4.13.2


#include "Fortran90ParserListener.h"

#include "Fortran90Parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct Fortran90ParserStaticData final {
  Fortran90ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Fortran90ParserStaticData(const Fortran90ParserStaticData&) = delete;
  Fortran90ParserStaticData(Fortran90ParserStaticData&&) = delete;
  Fortran90ParserStaticData& operator=(const Fortran90ParserStaticData&) = delete;
  Fortran90ParserStaticData& operator=(Fortran90ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag fortran90parserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<Fortran90ParserStaticData> fortran90parserParserStaticData = nullptr;

void fortran90parserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (fortran90parserParserStaticData != nullptr) {
    return;
  }
#else
  assert(fortran90parserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Fortran90ParserStaticData>(
    std::vector<std::string>{
      "program", "executableProgram", "programUnit", "mainProgram", "programStmt", 
      "mainRange", "bodyPlusInternals", "internalSubprogram", "specificationPartConstruct", 
      "useStmt", "onlyList", "onlyStmt", "renameList", "rename", "useName", 
      "parameterStmt", "namedConstantDefList", "namedConstantDef", "endProgramStmt", 
      "blockDataSubprogram", "blockDataStmt", "blockDataBody", "blockDataBodyConstruct", 
      "endBlockDataStmt", "formatStmt", "fmtSpec", "formatedit", "editElement", 
      "mislexedFcon", "module", "endModuleStmt", "entryStmt", "subroutineParList", 
      "subroutinePars", "subroutinePar", "declarationConstruct", "specificationStmt", 
      "targetStmt", "targetObjectList", "targetObject", "pointerStmt", "pointerStmtObjectList", 
      "pointerStmtObject", "optionalStmt", "optionalParList", "optionalPar", 
      "namelistStmt", "namelistGroups", "namelistGroupName", "namelistGroupObject", 
      "intentStmt", "intentParList", "intentPar", "dummyArgName", "intentSpec", 
      "allocatableStmt", "arrayAllocationList", "arrayAllocation", "arrayName", 
      "accessStmt", "accessIdList", "accessId", "genericName", "saveStmt", 
      "savedEntityList", "savedEntity", "savedCommonBlock", "intrinsicStmt", 
      "intrinsicList", "intrinsicProcedureName", "externalStmt", "externalNameList", 
      "externalName", "equivalenceStmt", "equivalenceSetList", "equivalenceSet", 
      "equivalenceObject", "equivalenceObjectList", "dimensionStmt", "arrayDeclaratorList", 
      "commonStmt", "comlist", "commonBlockObject", "arrayDeclarator", "comblock", 
      "commonBlockName", "typeDeclarationStmt", "attrSpecSeq", "attrSpec", 
      "entityDeclList", "entityDecl", "objectName", "name", "arraySpec", 
      "assumedShapeSpecList", "assumedShapeSpec", "assumedSizeSpec", "interfaceBlock", 
      "endInterfaceStmt", "interfaceStmt", "genericSpec", "definedOperator", 
      "interfaceBlockBody", "interfaceBodyPartConstruct", "moduleProcedureStmt", 
      "procedureNameList", "procedureName", "interfaceBody", "subroutineInterfaceRange", 
      "endSubroutineStmt", "recursive", "functionPrefix", "functionInterfaceRange", 
      "functionParList", "functionPars", "functionPar", "subprogramInterfaceBody", 
      "endFunctionStmt", "derivedTypeDef", "endTypeStmt", "derivedTypeStmt", 
      "derivedTypeBody", "derivedTypeBodyConstruct", "privateSequenceStmt", 
      "componentDefStmt", "componentDeclList", "componentDecl", "componentName", 
      "componentAttrSpecList", "componentAttrSpec", "componentArraySpec", 
      "explicitShapeSpecList", "explicitShapeSpec", "lowerBound", "upperBound", 
      "deferredShapeSpecList", "deferredShapeSpec", "typeSpec", "kindSelector", 
      "typeName", "charSelector", "lengthSelector", "charLength", "constant", 
      "bozLiteralConstant", "structureConstructor", "exprList", "namedConstantUse", 
      "typeParamValue", "moduleStmt", "moduleName", "ident", "moduleBody", 
      "moduleSubprogramPartConstruct", "containsStmt", "moduleSubprogram", 
      "functionSubprogram", "functionName", "functionRange", "body", "bodyConstruct", 
      "executableConstruct", "whereConstruct", "elseWhere", "elsewhereStmt", 
      "endWhereStmt", "where", "whereConstructStmt", "maskExpr", "caseConstruct", 
      "selectCaseRange", "endSelectStmt", "selectCaseBody", "caseBodyConstruct", 
      "caseStmt", "caseSelector", "caseValueRangeList", "caseValueRange", 
      "ifConstruct", "ifThenStmt", "conditionalBody", "elseIfConstruct", 
      "elseIfStmt", "elseConstruct", "elseStmt", "endIfStmt", "doConstruct", 
      "blockDoConstruct", "endDoStmt", "endName", "nameColon", "labelDoStmt", 
      "doLblRef", "doLblDef", "doLabelStmt", "executionPartConstruct", "doubleDoStmt", 
      "dataStmt", "dataStmtSet", "dse1", "dse2", "dataStmtValue", "dataStmtObject", 
      "variable", "subscriptListRef", "subscriptList", "subscript", "substringRange", 
      "dataImpliedDo", "dataIDoObjectList", "dataIDoObject", "structureComponent", 
      "fieldSelector", "arrayElement", "impliedDoVariable", "commaLoopControl", 
      "loopControl", "variableName", "commaExpr", "semicolonStmt", "actionStmt", 
      "whereStmt", "pointerAssignmentStmt", "target", "nullifyStmt", "pointerObjectList", 
      "pointerObject", "pointerField", "exitStmt", "deallocateStmt", "allocateObjectList", 
      "cycleStmt", "allocateStmt", "allocationList", "allocation", "allocateObject", 
      "allocatedShape", "stopStmt", "writeStmt", "ioControlSpecList", "stmtFunctionStmt", 
      "stmtFunctionRange", "sFDummyArgNameList", "sFDummyArgName", "returnStmt", 
      "rewindStmt", "readStmt", "commaInputItemList", "rdFmtId", "rdFmtIdExpr", 
      "inputItemList", "inputItem", "inputImpliedDo", "rdCtlSpec", "rdUnitId", 
      "rdIoCtlSpecList", "ioControlSpec", "printStmt", "outputItemList", 
      "outputItemList1", "outputImpliedDo", "formatIdentifier", "pauseStmt", 
      "openStmt", "connectSpecList", "connectSpec", "inquireStmt", "inquireSpecList", 
      "inquireSpec", "assignedGotoStmt", "variableComma", "gotoStmt", "computedGotoStmt", 
      "lblRefList", "endfileStmt", "continueStmt", "closeStmt", "closeSpecList", 
      "closeSpec", "cExpression", "cPrimary", "cOperand", "cPrimaryConcatOp", 
      "callStmt", "subroutineNameUse", "subroutineArgList", "subroutineArg", 
      "arithmeticIfStmt", "lblRef", "label", "assignmentStmt", "sFExprListRef", 
      "sFExprList", "commaSectionSubscript", "assignStmt", "backspaceStmt", 
      "unitIdentifier", "positionSpecList", "unitIdentifierComma", "positionSpec", 
      "scalarVariable", "uFExpr", "uFTerm", "uFFactor", "uFPrimary", "subroutineSubprogram", 
      "subroutineName", "subroutineRange", "includeStmt", "implicitStmt", 
      "implicitSpecList", "implicitSpec", "implicitRanges", "implicitRange", 
      "expression", "definedBinaryOp", "level5Expr", "equivOperand", "orOperand", 
      "andOperand", "relOp", "level4Expr", "level3Expr", "level2Expr", "sign", 
      "addOperand", "multOperand", "level1Expr", "definedUnaryOp", "primary", 
      "arrayConstructor", "acValueList", "acValueList1", "acImpliedDo", 
      "functionReference", "functionArgList", "functionArg", "nameDataRef", 
      "complexDataRefTail", "sectionSubscriptRef", "sectionSubscriptList", 
      "sectionSubscript", "subscriptTripletTail", "logicalConstant", "kindParam", 
      "unsignedArithmeticConstant", "complexConst", "complexComponent", 
      "constantExpr", "ifStmt"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "'=>'", "", "", "", "", "'::'", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "'$'", "','", "'('", "'%'", "", "", "", "')'", "':'", 
      "';'", "'='", "'-'", "'+'", "'/'", "", "'**'", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "'CCON'", "'HOLLERITH'", 
      "'CONCATOP'", "'CTRLDIRECT'", "'CTRLREC'", "'TO'", "'SUBPROGRAMBLOCK'", 
      "'DOBLOCK'", "'AIF'", "'THENBLOCK'", "'ELSEBLOCK'", "'CODEROOT'", 
      "", "", "", "", "", "'(/'", "'.'", "'/)'", "", "", "", "", "", "", 
      "", "", "", "", "'SPOFF'", "'SPON'"
    },
    std::vector<std::string>{
      "", "RECURSIVE", "CONTAINS", "MODULE", "ENDMODULE", "PROGRAM", "ENTRY", 
      "FUNCTION", "BLOCK", "SUBROUTINE", "ENDINTERFACE", "PROCEDURE", "END", 
      "DIMENSION", "TARGET", "ALLOCATABLE", "OPTIONAL", "NAMELIST", "INTENT", 
      "IN", "OUT", "INOUT", "OPERATOR", "USE", "ONLY", "IMPLIEDT", "ASSIGNMENT", 
      "DOP", "OP", "DOUBLEPRECISION", "DOUBLECOLON", "ASSIGNSTMT", "COMMON", 
      "ELSEWHERE", "REAL", "EQUIVALENCE", "BLOCKDATA", "POINTER", "PRIVATE", 
      "SEQUENCE", "ACCESSSPEC", "IMPLICIT", "NONE", "CHARACTER", "PARAMETER", 
      "EXTERNAL", "INTRINSIC", "SAVE", "DATA", "GO", "GOTO", "IF", "THEN", 
      "ELSE", "ENDIF", "RESULT", "ELSEIF", "DO", "INCLUDE", "CONTINUE", 
      "ENDWHERE", "WHERE", "ENDSELECT", "SELECTCASE", "SELECT", "CASE", 
      "DEFAULT", "DIRECT", "STOP", "REC", "ENDDO", "PAUSE", "WRITE", "READ", 
      "PRINT", "OPEN", "FMT", "UNIT", "PAD", "ACTION", "DELIM", "IOLENGTH", 
      "READWRITE", "ERR", "SIZE", "ADVANCE", "NML", "IOSTAT", "FORMAT", 
      "LET", "CALL", "RETURN", "CLOSE", "DOUBLE", "IOSTART", "SEQUENTIAL", 
      "LABEL", "FILE", "STATUS", "ACCESS", "POSITION", "FORM", "RECL", "EXIST", 
      "OPENED", "NUMBER", "NAMED", "NAME_", "FORMATTED", "UNFORMATTED", 
      "NEXTREC", "INQUIRE", "BACKSPACE", "ENDFILE", "REWIND", "ENDBLOCKDATA", 
      "ENDBLOCK", "KIND", "LEN", "WS", "COMMENT", "DOLLAR", "COMMA", "LPAREN", 
      "PCT", "WHILE", "ALLOCATE", "STAT", "RPAREN", "COLON", "SEMICOLON", 
      "ASSIGN", "MINUS", "PLUS", "DIV", "FORMATSEP", "POWER", "LNOT", "LAND", 
      "LOR", "EQV", "NEQV", "XOR", "EOR", "LT", "LE", "GT", "GE", "NE", 
      "EQ", "TRUE", "FALSE", "XCON", "PCON", "FCON", "CCON", "HOLLERITH", 
      "CONCATOP", "CTRLDIRECT", "CTRLREC", "TO", "SUBPROGRAMBLOCK", "DOBLOCK", 
      "AIF", "THENBLOCK", "ELSEBLOCK", "CODEROOT", "COMPLEX", "PRECISION", 
      "INTEGER", "LOGICAL", "UNDERSCORE", "OBRACKETSLASH", "DOT", "CBRACKETSLASH", 
      "ZCON", "BCON", "OCON", "SCON", "RDCON", "DEALLOCATE", "NULLIFY", 
      "CYCLE", "ENDTYPE", "INTERFACE", "SPOFF", "SPON", "ICON", "TYPE", 
      "NAME", "EXIT", "BLANK", "ALPHANUMERIC_CHARACTER", "STAR", "STRINGLITERAL", 
      "EOL", "LINECONT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,196,3729,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,
  	7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,
  	7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,
  	7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,
  	7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,
  	7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,
  	7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
  	7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
  	7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,
  	7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,
  	7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,
  	7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,
  	7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,
  	7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,
  	7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,
  	7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,
  	7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,1,0,
  	1,0,1,0,1,1,4,1,705,8,1,11,1,12,1,706,1,2,1,2,1,2,1,2,1,2,3,2,714,8,2,
  	1,3,3,3,717,8,3,1,3,1,3,1,4,1,4,1,4,1,5,3,5,725,8,5,1,5,1,5,1,5,1,5,3,
  	5,731,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,741,8,6,1,6,1,6,5,6,745,
  	8,6,10,6,12,6,748,9,6,1,7,1,7,3,7,752,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
  	3,8,761,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
  	9,1,9,1,9,3,9,780,8,9,1,10,1,10,1,10,5,10,785,8,10,10,10,12,10,788,9,
  	10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,796,8,11,1,12,1,12,1,12,5,12,801,
  	8,12,10,12,12,12,804,9,12,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,1,16,4,16,818,8,16,11,16,12,16,819,1,17,1,17,1,17,1,17,1,18,
  	1,18,1,18,1,18,3,18,830,8,18,3,18,832,8,18,1,19,1,19,1,19,1,19,1,19,1,
  	19,1,19,3,19,841,8,19,1,20,1,20,3,20,845,8,20,1,20,1,20,1,20,3,20,850,
  	8,20,3,20,852,8,20,1,21,1,21,1,21,1,21,1,21,5,21,859,8,21,10,21,12,21,
  	862,9,21,1,22,1,22,1,23,1,23,3,23,868,8,23,1,23,1,23,1,23,3,23,873,8,
  	23,1,23,1,23,1,23,3,23,878,8,23,1,23,1,23,1,23,1,23,3,23,884,8,23,1,23,
  	3,23,887,8,23,1,24,1,24,1,24,1,24,3,24,893,8,24,1,24,1,24,1,25,1,25,1,
  	25,1,25,1,25,3,25,902,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,919,8,25,10,25,12,25,922,9,25,1,
  	26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,934,8,26,1,27,1,
  	27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,945,8,27,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,28,3,28,955,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,3,29,964,8,29,1,30,1,30,1,30,3,30,969,8,30,1,30,1,30,3,30,973,8,30,
  	1,30,3,30,976,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,
  	3,32,988,8,32,1,32,3,32,991,8,32,1,33,1,33,1,33,5,33,996,8,33,10,33,12,
  	33,999,9,33,1,34,1,34,3,34,1003,8,34,1,35,1,35,1,35,1,35,3,35,1009,8,
  	35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
  	36,3,36,1025,8,36,1,37,1,37,3,37,1029,8,37,1,37,1,37,1,38,1,38,1,38,5,
  	38,1036,8,38,10,38,12,38,1039,9,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,
  	1047,8,39,1,40,1,40,3,40,1051,8,40,1,40,1,40,1,41,1,41,1,41,5,41,1058,
  	8,41,10,41,12,41,1061,9,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1069,8,
  	42,1,43,1,43,3,43,1073,8,43,1,43,1,43,1,44,1,44,1,44,5,44,1080,8,44,10,
  	44,12,44,1083,9,44,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,
  	1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
  	1,47,1,47,1,47,5,47,1112,8,47,10,47,12,47,1115,9,47,1,48,1,48,1,49,1,
  	49,1,50,1,50,1,50,1,50,1,50,3,50,1126,8,50,1,50,1,50,1,51,1,51,1,51,1,
  	51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,3,55,1142,8,55,1,55,1,55,1,
  	56,1,56,1,56,5,56,1149,8,56,10,56,12,56,1152,9,56,1,57,1,57,1,57,1,57,
  	1,57,1,57,3,57,1160,8,57,1,58,1,58,1,59,1,59,3,59,1166,8,59,1,59,1,59,
  	3,59,1170,8,59,1,60,1,60,1,60,5,60,1175,8,60,10,60,12,60,1178,9,60,1,
  	61,1,61,3,61,1182,8,61,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1192,
  	8,63,1,64,4,64,1195,8,64,11,64,12,64,1196,1,65,1,65,3,65,1201,8,65,1,
  	66,1,66,1,66,1,66,1,67,1,67,1,67,1,68,4,68,1211,8,68,11,68,12,68,1212,
  	1,69,1,69,1,70,1,70,1,70,1,71,4,71,1221,8,71,11,71,12,71,1222,1,72,1,
  	72,1,73,1,73,1,73,1,74,4,74,1231,8,74,11,74,12,74,1232,1,75,1,75,1,75,
  	1,75,1,75,1,75,1,76,1,76,1,77,4,77,1244,8,77,11,77,12,77,1245,1,78,1,
  	78,1,78,1,78,1,78,3,78,1253,8,78,1,79,4,79,1256,8,79,11,79,12,79,1257,
  	1,80,1,80,1,80,1,81,1,81,3,81,1265,8,81,1,81,1,81,1,81,1,81,1,81,3,81,
  	1272,8,81,1,81,1,81,1,81,1,81,1,81,5,81,1279,8,81,10,81,12,81,1282,9,
  	81,1,82,1,82,3,82,1286,8,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,
  	84,1,84,1,84,1,84,1,84,3,84,1301,8,84,1,85,1,85,1,86,1,86,1,86,1,86,1,
  	86,3,86,1310,8,86,1,86,1,86,1,86,3,86,1315,8,86,1,87,1,87,1,87,1,87,1,
  	87,1,87,1,87,5,87,1324,8,87,10,87,12,87,1327,9,87,1,88,1,88,1,88,1,88,
  	1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
  	1,88,3,88,1348,8,88,1,89,1,89,1,89,5,89,1353,8,89,10,89,12,89,1356,9,
  	89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,
  	90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,
  	90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,
  	90,1,90,3,90,1401,8,90,1,91,1,91,1,92,1,92,1,93,1,93,1,93,1,93,3,93,1411,
  	8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1422,8,94,1,94,
  	1,94,1,94,5,94,1427,8,94,10,94,12,94,1430,9,94,1,95,1,95,1,95,1,95,3,
  	95,1436,8,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,
  	96,1,96,1,96,1,96,3,96,1453,8,96,1,97,1,97,1,97,1,97,1,98,1,98,1,98,3,
  	98,1462,8,98,1,98,3,98,1465,8,98,1,99,1,99,1,99,1,99,1,99,3,99,1472,8,
  	99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1483,8,
  	100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
  	1,101,1,101,3,101,1498,8,101,1,102,1,102,1,102,1,102,1,102,5,102,1505,
  	8,102,10,102,12,102,1508,9,102,1,103,1,103,3,103,1512,8,103,1,104,1,104,
  	1,104,1,104,1,105,1,105,1,105,5,105,1521,8,105,10,105,12,105,1524,9,105,
  	1,106,1,106,1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,1535,8,107,
  	1,108,1,108,3,108,1539,8,108,1,108,1,108,1,109,1,109,1,109,1,109,3,109,
  	1547,8,109,3,109,1549,8,109,1,110,1,110,1,111,3,111,1554,8,111,1,111,
  	3,111,1557,8,111,1,111,1,111,1,111,1,111,1,111,3,111,1564,8,111,1,112,
  	1,112,3,112,1568,8,112,1,112,1,112,1,113,1,113,3,113,1574,8,113,1,113,
  	1,113,1,114,1,114,1,114,5,114,1581,8,114,10,114,12,114,1584,9,114,1,115,
  	1,115,1,116,1,116,1,116,1,116,1,116,5,116,1593,8,116,10,116,12,116,1596,
  	9,116,1,117,1,117,1,117,1,117,3,117,1602,8,117,3,117,1604,8,117,1,118,
  	1,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,3,119,
  	1618,8,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
  	3,120,1630,8,120,1,121,1,121,1,121,1,121,1,121,5,121,1637,8,121,10,121,
  	12,121,1640,9,121,1,122,1,122,3,122,1644,8,122,1,123,1,123,1,124,1,124,
  	1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,
  	1661,8,124,1,125,1,125,1,125,5,125,1666,8,125,10,125,12,125,1669,9,125,
  	1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
  	1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
  	1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
  	1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,1714,8,126,1,127,1,127,
  	1,128,1,128,1,128,5,128,1721,8,128,10,128,12,128,1724,9,128,1,129,1,129,
  	1,129,1,129,1,129,1,129,3,129,1732,8,129,1,130,1,130,3,130,1736,8,130,
  	1,131,1,131,1,131,5,131,1741,8,131,10,131,12,131,1744,9,131,1,132,1,132,
  	1,132,1,132,1,132,3,132,1751,8,132,1,133,1,133,1,134,1,134,1,135,1,135,
  	1,135,5,135,1760,8,135,10,135,12,135,1763,9,135,1,136,1,136,1,137,1,137,
  	1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,
  	1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,3,137,
  	1792,8,137,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,
  	3,138,1804,8,138,1,139,1,139,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
  	1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
  	1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
  	1,140,1,140,1,140,3,140,1842,8,140,1,141,1,141,1,141,1,141,1,141,1,141,
  	3,141,1850,8,141,1,142,1,142,1,142,1,142,1,142,3,142,1857,8,142,1,143,
  	1,143,3,143,1861,8,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
  	1,143,1,143,1,143,1,143,1,143,3,143,1876,8,143,1,144,1,144,1,145,1,145,
  	1,145,1,145,1,145,1,146,1,146,1,146,1,146,1,147,1,147,1,148,1,148,3,148,
  	1893,8,148,1,149,1,149,1,149,1,150,1,150,1,151,1,151,1,152,1,152,1,152,
  	3,152,1905,8,152,1,152,1,152,1,152,1,152,5,152,1911,8,152,10,152,12,152,
  	1914,9,152,1,153,1,153,3,153,1918,8,153,1,154,1,154,1,155,1,155,3,155,
  	1924,8,155,1,156,1,156,1,156,1,156,1,157,1,157,1,158,1,158,3,158,1934,
  	8,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,3,158,1944,8,158,
  	1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
  	1,158,1,158,3,158,1960,8,158,1,159,4,159,1963,8,159,11,159,12,159,1964,
  	1,160,1,160,3,160,1969,8,160,1,161,1,161,1,161,1,161,1,161,3,161,1976,
  	8,161,1,162,1,162,1,162,1,162,1,162,1,162,3,162,1984,8,162,1,163,1,163,
  	1,163,1,163,1,163,1,163,5,163,1992,8,163,10,163,12,163,1995,9,163,1,164,
  	1,164,1,165,1,165,1,165,3,165,2002,8,165,1,166,1,166,1,166,1,166,1,166,
  	5,166,2009,8,166,10,166,12,166,2012,9,166,1,167,1,167,1,167,1,167,1,167,
  	1,168,1,168,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
  	1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
  	1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,2051,8,169,1,170,
  	1,170,1,170,1,170,3,170,2057,8,170,1,171,1,171,3,171,2061,8,171,1,171,
  	1,171,1,171,3,171,2066,8,171,3,171,2068,8,171,1,172,1,172,1,172,1,172,
  	1,172,5,172,2075,8,172,10,172,12,172,2078,9,172,1,173,1,173,3,173,2082,
  	8,173,1,174,1,174,1,174,1,174,1,174,1,174,3,174,2090,8,174,1,175,1,175,
  	1,175,1,175,1,175,3,175,2097,8,175,1,176,4,176,2100,8,176,11,176,12,176,
  	2101,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,3,177,
  	2114,8,177,1,178,1,178,1,178,5,178,2119,8,178,10,178,12,178,2122,9,178,
  	1,178,3,178,2125,8,178,1,178,1,178,1,179,1,179,1,179,1,179,1,179,1,179,
  	1,180,5,180,2136,8,180,10,180,12,180,2139,9,180,1,181,1,181,1,181,1,182,
  	1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
  	3,182,2157,8,182,1,183,1,183,1,183,1,184,1,184,1,185,1,185,1,185,3,185,
  	2167,8,185,1,186,1,186,3,186,2171,8,186,1,187,3,187,2174,8,187,1,187,
  	1,187,3,187,2178,8,187,1,187,5,187,2181,8,187,10,187,12,187,2184,9,187,
  	1,187,1,187,1,188,1,188,3,188,2190,8,188,1,188,1,188,1,188,3,188,2195,
  	8,188,3,188,2197,8,188,1,189,1,189,1,190,1,190,1,190,1,191,1,191,1,191,
  	1,191,5,191,2208,8,191,10,191,12,191,2211,9,191,1,191,1,191,1,191,1,192,
  	1,192,1,193,1,193,1,194,1,194,1,195,1,195,1,195,1,195,1,195,3,195,2227,
  	8,195,1,196,1,196,1,196,1,196,1,197,1,197,1,197,3,197,2236,8,197,1,197,
  	5,197,2239,8,197,10,197,12,197,2242,9,197,1,198,1,198,1,198,1,199,1,199,
  	1,199,5,199,2250,8,199,10,199,12,199,2253,9,199,1,199,1,199,1,200,1,200,
  	1,200,5,200,2260,8,200,10,200,12,200,2263,9,200,1,200,1,200,1,201,1,201,
  	1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,2276,8,201,1,202,1,202,
  	3,202,2280,8,202,1,203,1,203,3,203,2284,8,203,1,203,3,203,2287,8,203,
  	1,204,1,204,1,204,1,204,1,205,4,205,2294,8,205,11,205,12,205,2295,1,206,
  	1,206,1,207,1,207,3,207,2302,8,207,1,207,1,207,1,207,1,208,1,208,1,208,
  	1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,
  	1,208,1,208,1,208,1,208,1,208,1,208,1,208,3,208,2329,8,208,1,209,4,209,
  	2332,8,209,11,209,12,209,2333,1,210,1,210,1,210,3,210,2339,8,210,1,211,
  	1,211,1,211,1,211,1,211,1,211,5,211,2347,8,211,10,211,12,211,2350,9,211,
  	1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,2360,8,212,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,3,213,2372,8,213,
  	1,214,1,214,1,215,3,215,2377,8,215,1,215,1,215,1,216,1,216,1,216,1,216,
  	1,216,1,216,3,216,2387,8,216,1,216,1,216,1,216,1,216,1,216,3,216,2394,
  	8,216,1,217,1,217,1,218,1,218,1,218,1,219,1,219,1,219,1,220,1,220,1,220,
  	1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
  	1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
  	1,220,1,220,1,220,3,220,2434,8,220,1,221,1,221,1,221,1,221,1,221,1,221,
  	1,222,1,222,1,222,1,222,1,222,3,222,2447,8,222,1,222,1,222,1,222,1,222,
  	1,222,3,222,2454,8,222,1,223,1,223,1,224,1,224,1,224,1,224,1,224,1,225,
  	1,225,1,225,5,225,2466,8,225,10,225,12,225,2469,9,225,1,226,1,226,3,226,
  	2473,8,226,1,227,1,227,1,227,3,227,2478,8,227,1,227,1,227,1,227,1,227,
  	1,227,5,227,2485,8,227,10,227,12,227,2488,9,227,1,228,1,228,3,228,2492,
  	8,228,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
  	1,229,1,229,1,229,3,229,2508,8,229,1,230,1,230,1,230,5,230,2513,8,230,
  	10,230,12,230,2516,9,230,1,231,1,231,3,231,2520,8,231,1,232,1,232,1,232,
  	1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,3,232,
  	2536,8,232,1,233,1,233,1,233,5,233,2541,8,233,10,233,12,233,2544,9,233,
  	1,234,1,234,1,234,1,234,3,234,2550,8,234,1,235,1,235,1,235,1,235,1,235,
  	5,235,2557,8,235,10,235,12,235,2560,9,235,1,236,1,236,1,236,1,236,1,237,
  	1,237,3,237,2568,8,237,1,238,1,238,1,238,1,238,1,238,3,238,2575,8,238,
  	1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
  	1,239,1,239,3,239,2591,8,239,1,239,1,239,1,239,5,239,2596,8,239,10,239,
  	12,239,2599,9,239,1,240,1,240,1,240,1,241,1,241,3,241,2606,8,241,1,241,
  	1,241,1,241,1,241,1,242,1,242,1,242,5,242,2615,8,242,10,242,12,242,2618,
  	9,242,1,243,1,243,1,244,1,244,3,244,2624,8,244,1,245,1,245,1,245,1,245,
  	1,245,1,245,1,245,3,245,2633,8,245,1,246,1,246,1,246,3,246,2638,8,246,
  	1,246,1,246,1,246,3,246,2643,8,246,3,246,2645,8,246,1,247,1,247,1,247,
  	1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,
  	1,248,1,248,1,248,1,248,1,248,3,248,2667,8,248,1,249,1,249,1,249,1,249,
  	1,250,1,250,1,250,5,250,2676,8,250,10,250,12,250,2679,9,250,1,251,1,251,
  	3,251,2683,8,251,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
  	3,252,2694,8,252,1,252,1,252,1,253,1,253,1,253,1,253,1,253,3,253,2703,
  	8,253,1,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,2712,8,254,1,255,
  	1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,3,255,2724,8,255,
  	1,255,1,255,1,255,5,255,2729,8,255,10,255,12,255,2732,9,255,1,256,1,256,
  	1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
  	1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
  	1,256,1,256,1,256,1,256,3,256,2764,8,256,1,257,1,257,1,257,1,257,1,257,
  	1,257,1,257,3,257,2773,8,257,1,258,1,258,3,258,2777,8,258,1,259,1,259,
  	1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,3,259,2789,8,259,1,259,
  	1,259,1,259,1,259,1,259,1,259,5,259,2797,8,259,10,259,12,259,2800,9,259,
  	1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,3,260,2811,8,260,
  	1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,3,260,
  	2824,8,260,1,260,1,260,3,260,2828,8,260,1,261,1,261,1,261,3,261,2833,
  	8,261,1,262,1,262,3,262,2837,8,262,1,263,1,263,1,263,1,263,1,263,1,264,
  	3,264,2845,8,264,1,264,3,264,2848,8,264,1,264,1,264,5,264,2852,8,264,
  	10,264,12,264,2855,9,264,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,
  	265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
  	1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
  	1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,3,265,2896,8,265,1,266,
  	1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,
  	3,266,2911,8,266,1,267,3,267,2914,8,267,1,267,3,267,2917,8,267,1,267,
  	1,267,5,267,2921,8,267,10,267,12,267,2924,9,267,1,268,1,268,1,268,1,268,
  	1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
  	1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
  	1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
  	1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
  	1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
  	1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,3,268,
  	3001,8,268,1,269,1,269,1,269,3,269,3006,8,269,1,269,1,269,1,269,1,269,
  	3,269,3012,8,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,3,269,
  	3022,8,269,1,269,1,269,1,269,1,269,1,269,3,269,3029,8,269,1,270,1,270,
  	1,270,1,271,1,271,1,271,3,271,3037,8,271,1,271,1,271,1,272,1,272,1,272,
  	1,272,1,272,3,272,3046,8,272,1,272,1,272,1,273,1,273,1,273,5,273,3053,
  	8,273,10,273,12,273,3056,9,273,1,274,1,274,1,274,3,274,3061,8,274,1,274,
  	1,274,1,274,1,274,3,274,3067,8,274,1,274,1,274,1,274,1,274,3,274,3073,
  	8,274,1,275,1,275,1,276,1,276,1,276,1,276,1,276,1,277,3,277,3083,8,277,
  	1,277,3,277,3086,8,277,1,277,1,277,5,277,3090,8,277,10,277,12,277,3093,
  	9,277,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,
  	3,278,3106,8,278,1,279,1,279,5,279,3110,8,279,10,279,12,279,3113,9,279,
  	1,280,1,280,1,280,1,280,1,280,3,280,3120,8,280,1,281,1,281,1,281,3,281,
  	3125,8,281,1,282,1,282,1,282,1,282,1,282,1,282,1,283,1,283,1,283,1,283,
  	1,283,1,283,1,283,1,283,3,283,3141,8,283,1,284,1,284,1,285,3,285,3146,
  	8,285,1,285,1,285,5,285,3150,8,285,10,285,12,285,3153,9,285,1,286,1,286,
  	1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
  	3,286,3169,8,286,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,
  	1,287,1,288,1,288,1,289,1,289,1,290,3,290,3186,8,290,1,290,1,290,3,290,
  	3190,8,290,1,290,3,290,3193,8,290,1,290,1,290,1,290,1,290,3,290,3199,
  	8,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,
  	1,290,1,290,1,290,3,290,3215,8,290,1,291,1,291,1,291,5,291,3220,8,291,
  	10,291,12,291,3223,9,291,1,291,1,291,1,292,1,292,3,292,3229,8,292,1,292,
  	3,292,3232,8,292,1,292,1,292,3,292,3236,8,292,1,292,3,292,3239,8,292,
  	1,292,1,292,1,292,1,292,1,292,1,292,3,292,3247,8,292,1,292,1,292,3,292,
  	3251,8,292,1,293,1,293,1,293,1,294,1,294,1,294,1,294,1,294,1,295,1,295,
  	1,295,1,295,1,295,1,295,1,295,3,295,3268,8,295,1,296,1,296,3,296,3272,
  	8,296,1,297,3,297,3275,8,297,1,297,4,297,3278,8,297,11,297,12,297,3279,
  	1,298,1,298,3,298,3284,8,298,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
  	1,299,1,299,3,299,3295,8,299,1,300,1,300,3,300,3299,8,300,1,301,1,301,
  	1,301,1,301,3,301,3305,8,301,1,301,1,301,1,301,5,301,3310,8,301,10,301,
  	12,301,3313,9,301,1,302,1,302,1,302,1,302,1,302,1,302,1,302,1,302,1,302,
  	1,302,1,302,5,302,3326,8,302,10,302,12,302,3329,9,302,1,303,1,303,1,303,
  	1,303,1,303,3,303,3336,8,303,1,304,1,304,1,304,1,304,1,304,1,304,1,304,
  	1,304,3,304,3346,8,304,1,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,
  	1,305,3,305,3357,8,305,1,306,1,306,1,307,1,307,3,307,3363,8,307,1,307,
  	1,307,1,307,1,307,1,307,1,307,3,307,3371,8,307,1,308,1,308,1,308,1,309,
  	1,309,1,309,1,309,3,309,3380,8,309,1,310,1,310,1,310,5,310,3385,8,310,
  	10,310,12,310,3388,9,310,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,
  	311,3,311,3398,8,311,1,312,3,312,3401,8,312,1,312,1,312,5,312,3405,8,
  	312,10,312,12,312,3408,9,312,1,313,1,313,1,313,1,313,1,314,1,314,1,314,
  	1,314,1,314,1,314,1,314,5,314,3421,8,314,10,314,12,314,3424,9,314,1,315,
  	1,315,1,316,1,316,1,316,5,316,3431,8,316,10,316,12,316,3434,9,316,1,317,
  	1,317,1,317,5,317,3439,8,317,10,317,12,317,3442,9,317,1,318,1,318,1,318,
  	5,318,3447,8,318,10,318,12,318,3450,9,318,1,319,3,319,3453,8,319,1,319,
  	1,319,1,320,1,320,1,321,1,321,1,321,1,321,5,321,3463,8,321,10,321,12,
  	321,3466,9,321,1,322,1,322,1,322,3,322,3471,8,322,1,322,1,322,3,322,3475,
  	8,322,1,322,5,322,3478,8,322,10,322,12,322,3481,9,322,1,323,3,323,3484,
  	8,323,1,323,1,323,1,323,5,323,3489,8,323,10,323,12,323,3492,9,323,1,324,
  	1,324,1,325,1,325,1,325,5,325,3499,8,325,10,325,12,325,3502,9,325,1,326,
  	1,326,1,326,5,326,3507,8,326,10,326,12,326,3510,9,326,1,327,1,327,1,327,
  	1,327,3,327,3516,8,327,1,328,1,328,1,329,1,329,1,329,1,329,1,329,1,329,
  	1,329,1,329,1,329,1,329,3,329,3530,8,329,1,330,1,330,1,330,1,330,1,331,
  	1,331,3,331,3538,8,331,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,
  	1,332,1,332,3,332,3550,8,332,1,332,1,332,1,332,1,332,1,332,1,332,5,332,
  	3558,8,332,10,332,12,332,3561,9,332,1,333,1,333,1,333,1,333,1,333,1,333,
  	1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,
  	1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,
  	1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,
  	1,333,1,333,3,333,3607,8,333,1,334,1,334,1,334,1,334,1,334,1,334,1,334,
  	1,334,3,334,3617,8,334,1,335,1,335,1,335,1,335,1,335,1,335,3,335,3625,
  	8,335,1,335,1,335,1,335,5,335,3630,8,335,10,335,12,335,3633,9,335,1,336,
  	1,336,1,336,1,336,1,337,1,337,5,337,3641,8,337,10,337,12,337,3644,9,337,
  	1,338,1,338,1,338,3,338,3649,8,338,1,339,1,339,1,339,1,339,1,340,1,340,
  	1,340,5,340,3658,8,340,10,340,12,340,3661,9,340,1,341,1,341,3,341,3665,
  	8,341,1,341,3,341,3668,8,341,1,342,1,342,3,342,3672,8,342,1,342,1,342,
  	1,342,1,342,1,342,1,342,1,342,3,342,3681,8,342,1,343,1,343,1,343,1,343,
  	1,343,1,343,1,343,1,343,1,343,3,343,3692,8,343,1,344,1,344,3,344,3696,
  	8,344,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,3,345,3706,8,345,
  	1,346,1,346,1,346,1,346,1,346,1,347,3,347,3714,8,347,1,347,1,347,1,347,
  	3,347,3719,8,347,1,348,1,348,1,349,1,349,1,349,1,349,1,349,1,349,1,349,
  	0,25,12,42,50,94,162,174,188,204,232,242,304,326,332,344,422,454,470,
  	478,510,518,602,604,628,664,670,350,0,2,4,6,8,10,12,14,16,18,20,22,24,
  	26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
  	72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
  	114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
  	150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
  	186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
  	222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
  	258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
  	294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,
  	330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,
  	366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,
  	402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,
  	438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,
  	474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,
  	510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,
  	546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,
  	582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,
  	618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,
  	654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,
  	690,692,694,696,698,0,12,1,0,19,21,8,0,1,24,26,26,29,29,31,118,125,127,
  	155,170,180,186,188,189,1,0,132,133,1,0,144,149,1,0,140,141,1,0,38,39,
  	1,0,175,177,2,0,178,178,187,187,2,0,134,134,193,193,2,0,28,28,144,149,
  	1,0,150,151,2,0,179,179,187,187,3932,0,700,1,0,0,0,2,704,1,0,0,0,4,713,
  	1,0,0,0,6,716,1,0,0,0,8,720,1,0,0,0,10,730,1,0,0,0,12,740,1,0,0,0,14,
  	751,1,0,0,0,16,760,1,0,0,0,18,779,1,0,0,0,20,781,1,0,0,0,22,795,1,0,0,
  	0,24,797,1,0,0,0,26,805,1,0,0,0,28,809,1,0,0,0,30,811,1,0,0,0,32,817,
  	1,0,0,0,34,821,1,0,0,0,36,831,1,0,0,0,38,840,1,0,0,0,40,851,1,0,0,0,42,
  	853,1,0,0,0,44,863,1,0,0,0,46,886,1,0,0,0,48,888,1,0,0,0,50,901,1,0,0,
  	0,52,933,1,0,0,0,54,944,1,0,0,0,56,954,1,0,0,0,58,963,1,0,0,0,60,975,
  	1,0,0,0,62,977,1,0,0,0,64,990,1,0,0,0,66,992,1,0,0,0,68,1002,1,0,0,0,
  	70,1008,1,0,0,0,72,1024,1,0,0,0,74,1026,1,0,0,0,76,1032,1,0,0,0,78,1046,
  	1,0,0,0,80,1048,1,0,0,0,82,1054,1,0,0,0,84,1068,1,0,0,0,86,1070,1,0,0,
  	0,88,1076,1,0,0,0,90,1084,1,0,0,0,92,1086,1,0,0,0,94,1089,1,0,0,0,96,
  	1116,1,0,0,0,98,1118,1,0,0,0,100,1120,1,0,0,0,102,1129,1,0,0,0,104,1133,
  	1,0,0,0,106,1135,1,0,0,0,108,1137,1,0,0,0,110,1139,1,0,0,0,112,1145,1,
  	0,0,0,114,1159,1,0,0,0,116,1161,1,0,0,0,118,1169,1,0,0,0,120,1171,1,0,
  	0,0,122,1181,1,0,0,0,124,1183,1,0,0,0,126,1191,1,0,0,0,128,1194,1,0,0,
  	0,130,1200,1,0,0,0,132,1202,1,0,0,0,134,1206,1,0,0,0,136,1210,1,0,0,0,
  	138,1214,1,0,0,0,140,1216,1,0,0,0,142,1220,1,0,0,0,144,1224,1,0,0,0,146,
  	1226,1,0,0,0,148,1230,1,0,0,0,150,1234,1,0,0,0,152,1240,1,0,0,0,154,1243,
  	1,0,0,0,156,1252,1,0,0,0,158,1255,1,0,0,0,160,1259,1,0,0,0,162,1262,1,
  	0,0,0,164,1285,1,0,0,0,166,1287,1,0,0,0,168,1300,1,0,0,0,170,1302,1,0,
  	0,0,172,1314,1,0,0,0,174,1316,1,0,0,0,176,1347,1,0,0,0,178,1349,1,0,0,
  	0,180,1400,1,0,0,0,182,1402,1,0,0,0,184,1404,1,0,0,0,186,1410,1,0,0,0,
  	188,1421,1,0,0,0,190,1435,1,0,0,0,192,1452,1,0,0,0,194,1454,1,0,0,0,196,
  	1461,1,0,0,0,198,1471,1,0,0,0,200,1482,1,0,0,0,202,1497,1,0,0,0,204,1499,
  	1,0,0,0,206,1511,1,0,0,0,208,1513,1,0,0,0,210,1517,1,0,0,0,212,1525,1,
  	0,0,0,214,1534,1,0,0,0,216,1536,1,0,0,0,218,1548,1,0,0,0,220,1550,1,0,
  	0,0,222,1563,1,0,0,0,224,1565,1,0,0,0,226,1571,1,0,0,0,228,1577,1,0,0,
  	0,230,1585,1,0,0,0,232,1587,1,0,0,0,234,1603,1,0,0,0,236,1605,1,0,0,0,
  	238,1617,1,0,0,0,240,1629,1,0,0,0,242,1631,1,0,0,0,244,1643,1,0,0,0,246,
  	1645,1,0,0,0,248,1660,1,0,0,0,250,1662,1,0,0,0,252,1713,1,0,0,0,254,1715,
  	1,0,0,0,256,1717,1,0,0,0,258,1731,1,0,0,0,260,1735,1,0,0,0,262,1737,1,
  	0,0,0,264,1750,1,0,0,0,266,1752,1,0,0,0,268,1754,1,0,0,0,270,1756,1,0,
  	0,0,272,1764,1,0,0,0,274,1791,1,0,0,0,276,1803,1,0,0,0,278,1805,1,0,0,
  	0,280,1841,1,0,0,0,282,1849,1,0,0,0,284,1856,1,0,0,0,286,1875,1,0,0,0,
  	288,1877,1,0,0,0,290,1879,1,0,0,0,292,1884,1,0,0,0,294,1888,1,0,0,0,296,
  	1892,1,0,0,0,298,1894,1,0,0,0,300,1897,1,0,0,0,302,1899,1,0,0,0,304,1904,
  	1,0,0,0,306,1917,1,0,0,0,308,1919,1,0,0,0,310,1923,1,0,0,0,312,1925,1,
  	0,0,0,314,1929,1,0,0,0,316,1959,1,0,0,0,318,1962,1,0,0,0,320,1968,1,0,
  	0,0,322,1975,1,0,0,0,324,1983,1,0,0,0,326,1985,1,0,0,0,328,1996,1,0,0,
  	0,330,2001,1,0,0,0,332,2003,1,0,0,0,334,2013,1,0,0,0,336,2018,1,0,0,0,
  	338,2050,1,0,0,0,340,2056,1,0,0,0,342,2067,1,0,0,0,344,2069,1,0,0,0,346,
  	2081,1,0,0,0,348,2089,1,0,0,0,350,2096,1,0,0,0,352,2099,1,0,0,0,354,2113,
  	1,0,0,0,356,2115,1,0,0,0,358,2128,1,0,0,0,360,2137,1,0,0,0,362,2140,1,
  	0,0,0,364,2156,1,0,0,0,366,2158,1,0,0,0,368,2161,1,0,0,0,370,2166,1,0,
  	0,0,372,2170,1,0,0,0,374,2173,1,0,0,0,376,2196,1,0,0,0,378,2198,1,0,0,
  	0,380,2200,1,0,0,0,382,2203,1,0,0,0,384,2215,1,0,0,0,386,2217,1,0,0,0,
  	388,2219,1,0,0,0,390,2226,1,0,0,0,392,2228,1,0,0,0,394,2232,1,0,0,0,396,
  	2243,1,0,0,0,398,2246,1,0,0,0,400,2256,1,0,0,0,402,2275,1,0,0,0,404,2279,
  	1,0,0,0,406,2281,1,0,0,0,408,2288,1,0,0,0,410,2293,1,0,0,0,412,2297,1,
  	0,0,0,414,2299,1,0,0,0,416,2328,1,0,0,0,418,2331,1,0,0,0,420,2338,1,0,
  	0,0,422,2340,1,0,0,0,424,2359,1,0,0,0,426,2371,1,0,0,0,428,2373,1,0,0,
  	0,430,2376,1,0,0,0,432,2393,1,0,0,0,434,2395,1,0,0,0,436,2397,1,0,0,0,
  	438,2400,1,0,0,0,440,2433,1,0,0,0,442,2435,1,0,0,0,444,2453,1,0,0,0,446,
  	2455,1,0,0,0,448,2457,1,0,0,0,450,2462,1,0,0,0,452,2472,1,0,0,0,454,2474,
  	1,0,0,0,456,2489,1,0,0,0,458,2507,1,0,0,0,460,2509,1,0,0,0,462,2517,1,
  	0,0,0,464,2535,1,0,0,0,466,2537,1,0,0,0,468,2549,1,0,0,0,470,2551,1,0,
  	0,0,472,2561,1,0,0,0,474,2565,1,0,0,0,476,2569,1,0,0,0,478,2590,1,0,0,
  	0,480,2600,1,0,0,0,482,2603,1,0,0,0,484,2611,1,0,0,0,486,2619,1,0,0,0,
  	488,2621,1,0,0,0,490,2632,1,0,0,0,492,2644,1,0,0,0,494,2646,1,0,0,0,496,
  	2666,1,0,0,0,498,2668,1,0,0,0,500,2672,1,0,0,0,502,2682,1,0,0,0,504,2684,
  	1,0,0,0,506,2702,1,0,0,0,508,2711,1,0,0,0,510,2723,1,0,0,0,512,2763,1,
  	0,0,0,514,2772,1,0,0,0,516,2776,1,0,0,0,518,2788,1,0,0,0,520,2827,1,0,
  	0,0,522,2832,1,0,0,0,524,2834,1,0,0,0,526,2838,1,0,0,0,528,2844,1,0,0,
  	0,530,2895,1,0,0,0,532,2910,1,0,0,0,534,2913,1,0,0,0,536,3000,1,0,0,0,
  	538,3028,1,0,0,0,540,3030,1,0,0,0,542,3036,1,0,0,0,544,3040,1,0,0,0,546,
  	3049,1,0,0,0,548,3072,1,0,0,0,550,3074,1,0,0,0,552,3076,1,0,0,0,554,3082,
  	1,0,0,0,556,3105,1,0,0,0,558,3107,1,0,0,0,560,3119,1,0,0,0,562,3124,1,
  	0,0,0,564,3126,1,0,0,0,566,3140,1,0,0,0,568,3142,1,0,0,0,570,3145,1,0,
  	0,0,572,3168,1,0,0,0,574,3170,1,0,0,0,576,3180,1,0,0,0,578,3182,1,0,0,
  	0,580,3214,1,0,0,0,582,3216,1,0,0,0,584,3250,1,0,0,0,586,3252,1,0,0,0,
  	588,3255,1,0,0,0,590,3267,1,0,0,0,592,3271,1,0,0,0,594,3274,1,0,0,0,596,
  	3281,1,0,0,0,598,3294,1,0,0,0,600,3298,1,0,0,0,602,3304,1,0,0,0,604,3314,
  	1,0,0,0,606,3335,1,0,0,0,608,3345,1,0,0,0,610,3356,1,0,0,0,612,3358,1,
  	0,0,0,614,3370,1,0,0,0,616,3372,1,0,0,0,618,3379,1,0,0,0,620,3381,1,0,
  	0,0,622,3397,1,0,0,0,624,3400,1,0,0,0,626,3409,1,0,0,0,628,3413,1,0,0,
  	0,630,3425,1,0,0,0,632,3427,1,0,0,0,634,3435,1,0,0,0,636,3443,1,0,0,0,
  	638,3452,1,0,0,0,640,3456,1,0,0,0,642,3458,1,0,0,0,644,3467,1,0,0,0,646,
  	3483,1,0,0,0,648,3493,1,0,0,0,650,3495,1,0,0,0,652,3503,1,0,0,0,654,3515,
  	1,0,0,0,656,3517,1,0,0,0,658,3529,1,0,0,0,660,3531,1,0,0,0,662,3537,1,
  	0,0,0,664,3549,1,0,0,0,666,3606,1,0,0,0,668,3616,1,0,0,0,670,3624,1,0,
  	0,0,672,3634,1,0,0,0,674,3638,1,0,0,0,676,3648,1,0,0,0,678,3650,1,0,0,
  	0,680,3654,1,0,0,0,682,3667,1,0,0,0,684,3680,1,0,0,0,686,3691,1,0,0,0,
  	688,3695,1,0,0,0,690,3705,1,0,0,0,692,3707,1,0,0,0,694,3718,1,0,0,0,696,
  	3720,1,0,0,0,698,3722,1,0,0,0,700,701,3,2,1,0,701,702,5,0,0,1,702,1,1,
  	0,0,0,703,705,3,4,2,0,704,703,1,0,0,0,705,706,1,0,0,0,706,704,1,0,0,0,
  	706,707,1,0,0,0,707,3,1,0,0,0,708,714,3,6,3,0,709,714,3,312,156,0,710,
  	714,3,610,305,0,711,714,3,38,19,0,712,714,3,58,29,0,713,708,1,0,0,0,713,
  	709,1,0,0,0,713,710,1,0,0,0,713,711,1,0,0,0,713,712,1,0,0,0,714,5,1,0,
  	0,0,715,717,3,8,4,0,716,715,1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,0,718,
  	719,3,10,5,0,719,7,1,0,0,0,720,721,5,5,0,0,721,722,5,189,0,0,722,9,1,
  	0,0,0,723,725,3,318,159,0,724,723,1,0,0,0,724,725,1,0,0,0,725,726,1,0,
  	0,0,726,731,3,36,18,0,727,728,3,12,6,0,728,729,3,36,18,0,729,731,1,0,
  	0,0,730,724,1,0,0,0,730,727,1,0,0,0,731,11,1,0,0,0,732,733,6,6,-1,0,733,
  	734,3,318,159,0,734,735,3,308,154,0,735,736,3,14,7,0,736,741,1,0,0,0,
  	737,738,3,308,154,0,738,739,3,14,7,0,739,741,1,0,0,0,740,732,1,0,0,0,
  	740,737,1,0,0,0,741,746,1,0,0,0,742,743,10,1,0,0,743,745,3,14,7,0,744,
  	742,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,13,1,
  	0,0,0,748,746,1,0,0,0,749,752,3,312,156,0,750,752,3,610,305,0,751,749,
  	1,0,0,0,751,750,1,0,0,0,752,15,1,0,0,0,753,761,3,618,309,0,754,761,3,
  	30,15,0,755,761,3,48,24,0,756,761,3,62,31,0,757,761,3,70,35,0,758,761,
  	3,616,308,0,759,761,3,18,9,0,760,753,1,0,0,0,760,754,1,0,0,0,760,755,
  	1,0,0,0,760,756,1,0,0,0,760,757,1,0,0,0,760,758,1,0,0,0,760,759,1,0,0,
  	0,761,17,1,0,0,0,762,763,5,23,0,0,763,780,5,189,0,0,764,765,5,23,0,0,
  	765,766,5,189,0,0,766,767,5,122,0,0,767,768,5,24,0,0,768,780,5,129,0,
  	0,769,770,5,23,0,0,770,771,5,189,0,0,771,772,5,122,0,0,772,780,3,24,12,
  	0,773,774,5,23,0,0,774,775,5,189,0,0,775,776,5,122,0,0,776,777,5,24,0,
  	0,777,778,5,129,0,0,778,780,3,20,10,0,779,762,1,0,0,0,779,764,1,0,0,0,
  	779,769,1,0,0,0,779,773,1,0,0,0,780,19,1,0,0,0,781,786,3,22,11,0,782,
  	783,5,122,0,0,783,785,3,22,11,0,784,782,1,0,0,0,785,788,1,0,0,0,786,784,
  	1,0,0,0,786,787,1,0,0,0,787,21,1,0,0,0,788,786,1,0,0,0,789,796,3,200,
  	100,0,790,791,3,302,151,0,791,792,5,25,0,0,792,793,3,28,14,0,793,796,
  	1,0,0,0,794,796,3,28,14,0,795,789,1,0,0,0,795,790,1,0,0,0,795,794,1,0,
  	0,0,796,23,1,0,0,0,797,802,3,26,13,0,798,799,5,122,0,0,799,801,3,26,13,
  	0,800,798,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,
  	25,1,0,0,0,804,802,1,0,0,0,805,806,3,302,151,0,806,807,5,25,0,0,807,808,
  	3,28,14,0,808,27,1,0,0,0,809,810,3,302,151,0,810,29,1,0,0,0,811,812,5,
  	44,0,0,812,813,5,123,0,0,813,814,3,32,16,0,814,815,5,128,0,0,815,31,1,
  	0,0,0,816,818,3,34,17,0,817,816,1,0,0,0,818,819,1,0,0,0,819,817,1,0,0,
  	0,819,820,1,0,0,0,820,33,1,0,0,0,821,822,5,189,0,0,822,823,5,131,0,0,
  	823,824,3,628,314,0,824,35,1,0,0,0,825,832,5,12,0,0,826,827,5,12,0,0,
  	827,829,5,5,0,0,828,830,5,189,0,0,829,828,1,0,0,0,829,830,1,0,0,0,830,
  	832,1,0,0,0,831,825,1,0,0,0,831,826,1,0,0,0,832,37,1,0,0,0,833,834,3,
  	40,20,0,834,835,3,42,21,0,835,836,3,46,23,0,836,841,1,0,0,0,837,838,3,
  	40,20,0,838,839,3,46,23,0,839,841,1,0,0,0,840,833,1,0,0,0,840,837,1,0,
  	0,0,841,39,1,0,0,0,842,844,5,36,0,0,843,845,5,189,0,0,844,843,1,0,0,0,
  	844,845,1,0,0,0,845,852,1,0,0,0,846,847,5,8,0,0,847,849,5,48,0,0,848,
  	850,5,189,0,0,849,848,1,0,0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,842,
  	1,0,0,0,851,846,1,0,0,0,852,41,1,0,0,0,853,854,6,21,-1,0,854,855,3,44,
  	22,0,855,860,1,0,0,0,856,857,10,1,0,0,857,859,3,44,22,0,858,856,1,0,0,
  	0,859,862,1,0,0,0,860,858,1,0,0,0,860,861,1,0,0,0,861,43,1,0,0,0,862,
  	860,1,0,0,0,863,864,3,16,8,0,864,45,1,0,0,0,865,867,5,115,0,0,866,868,
  	5,189,0,0,867,866,1,0,0,0,867,868,1,0,0,0,868,887,1,0,0,0,869,870,5,12,
  	0,0,870,872,5,36,0,0,871,873,5,189,0,0,872,871,1,0,0,0,872,873,1,0,0,
  	0,873,887,1,0,0,0,874,875,5,116,0,0,875,877,5,48,0,0,876,878,5,189,0,
  	0,877,876,1,0,0,0,877,878,1,0,0,0,878,887,1,0,0,0,879,880,5,12,0,0,880,
  	881,5,8,0,0,881,883,5,48,0,0,882,884,5,189,0,0,883,882,1,0,0,0,883,884,
  	1,0,0,0,884,887,1,0,0,0,885,887,5,12,0,0,886,865,1,0,0,0,886,869,1,0,
  	0,0,886,874,1,0,0,0,886,879,1,0,0,0,886,885,1,0,0,0,887,47,1,0,0,0,888,
  	889,5,187,0,0,889,890,5,88,0,0,890,892,5,123,0,0,891,893,3,50,25,0,892,
  	891,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,895,5,128,0,0,895,49,
  	1,0,0,0,896,897,6,25,-1,0,897,902,3,52,26,0,898,902,5,135,0,0,899,900,
  	5,135,0,0,900,902,3,52,26,0,901,896,1,0,0,0,901,898,1,0,0,0,901,899,1,
  	0,0,0,902,920,1,0,0,0,903,904,10,5,0,0,904,919,5,135,0,0,905,906,10,4,
  	0,0,906,907,5,135,0,0,907,919,3,52,26,0,908,909,10,3,0,0,909,910,5,122,
  	0,0,910,919,3,52,26,0,911,912,10,2,0,0,912,913,5,122,0,0,913,919,5,135,
  	0,0,914,915,10,1,0,0,915,916,5,122,0,0,916,917,5,135,0,0,917,919,3,52,
  	26,0,918,903,1,0,0,0,918,905,1,0,0,0,918,908,1,0,0,0,918,911,1,0,0,0,
  	918,914,1,0,0,0,919,922,1,0,0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,51,
  	1,0,0,0,922,920,1,0,0,0,923,934,3,54,27,0,924,925,5,187,0,0,925,934,3,
  	54,27,0,926,934,5,152,0,0,927,934,5,153,0,0,928,929,5,153,0,0,929,934,
  	3,54,27,0,930,931,5,153,0,0,931,932,5,187,0,0,932,934,3,54,27,0,933,923,
  	1,0,0,0,933,924,1,0,0,0,933,926,1,0,0,0,933,927,1,0,0,0,933,928,1,0,0,
  	0,933,930,1,0,0,0,934,53,1,0,0,0,935,945,5,154,0,0,936,945,3,56,28,0,
  	937,945,5,178,0,0,938,945,5,156,0,0,939,945,5,189,0,0,940,941,5,123,0,
  	0,941,942,3,50,25,0,942,943,5,128,0,0,943,945,1,0,0,0,944,935,1,0,0,0,
  	944,936,1,0,0,0,944,937,1,0,0,0,944,938,1,0,0,0,944,939,1,0,0,0,944,940,
  	1,0,0,0,945,55,1,0,0,0,946,947,5,179,0,0,947,948,5,185,0,0,948,949,5,
  	179,0,0,949,955,5,186,0,0,950,951,5,189,0,0,951,952,5,185,0,0,952,953,
  	5,179,0,0,953,955,5,186,0,0,954,946,1,0,0,0,954,950,1,0,0,0,955,57,1,
  	0,0,0,956,957,3,298,149,0,957,958,3,304,152,0,958,959,3,60,30,0,959,964,
  	1,0,0,0,960,961,3,298,149,0,961,962,3,60,30,0,962,964,1,0,0,0,963,956,
  	1,0,0,0,963,960,1,0,0,0,964,59,1,0,0,0,965,966,5,12,0,0,966,968,5,3,0,
  	0,967,969,5,189,0,0,968,967,1,0,0,0,968,969,1,0,0,0,969,976,1,0,0,0,970,
  	972,5,4,0,0,971,973,5,189,0,0,972,971,1,0,0,0,972,973,1,0,0,0,973,976,
  	1,0,0,0,974,976,5,12,0,0,975,965,1,0,0,0,975,970,1,0,0,0,975,974,1,0,
  	0,0,976,61,1,0,0,0,977,978,5,6,0,0,978,979,5,189,0,0,979,980,3,64,32,
  	0,980,981,5,55,0,0,981,982,5,123,0,0,982,983,5,189,0,0,983,984,5,128,
  	0,0,984,63,1,0,0,0,985,987,5,123,0,0,986,988,3,66,33,0,987,986,1,0,0,
  	0,987,988,1,0,0,0,988,989,1,0,0,0,989,991,5,128,0,0,990,985,1,0,0,0,990,
  	991,1,0,0,0,991,65,1,0,0,0,992,997,3,68,34,0,993,994,5,122,0,0,994,996,
  	3,68,34,0,995,993,1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,0,997,998,1,0,
  	0,0,998,67,1,0,0,0,999,997,1,0,0,0,1000,1003,3,106,53,0,1001,1003,5,193,
  	0,0,1002,1000,1,0,0,0,1002,1001,1,0,0,0,1003,69,1,0,0,0,1004,1009,3,236,
  	118,0,1005,1009,3,194,97,0,1006,1009,3,172,86,0,1007,1009,3,72,36,0,1008,
  	1004,1,0,0,0,1008,1005,1,0,0,0,1008,1006,1,0,0,0,1008,1007,1,0,0,0,1009,
  	71,1,0,0,0,1010,1025,3,160,80,0,1011,1025,3,394,197,0,1012,1025,3,156,
  	78,0,1013,1025,3,146,73,0,1014,1025,3,140,70,0,1015,1025,3,134,67,0,1016,
  	1025,3,126,63,0,1017,1025,3,118,59,0,1018,1025,3,110,55,0,1019,1025,3,
  	100,50,0,1020,1025,3,92,46,0,1021,1025,3,86,43,0,1022,1025,3,80,40,0,
  	1023,1025,3,74,37,0,1024,1010,1,0,0,0,1024,1011,1,0,0,0,1024,1012,1,0,
  	0,0,1024,1013,1,0,0,0,1024,1014,1,0,0,0,1024,1015,1,0,0,0,1024,1016,1,
  	0,0,0,1024,1017,1,0,0,0,1024,1018,1,0,0,0,1024,1019,1,0,0,0,1024,1020,
  	1,0,0,0,1024,1021,1,0,0,0,1024,1022,1,0,0,0,1024,1023,1,0,0,0,1025,73,
  	1,0,0,0,1026,1028,5,14,0,0,1027,1029,5,30,0,0,1028,1027,1,0,0,0,1028,
  	1029,1,0,0,0,1029,1030,1,0,0,0,1030,1031,3,76,38,0,1031,75,1,0,0,0,1032,
  	1037,3,78,39,0,1033,1034,5,122,0,0,1034,1036,3,78,39,0,1035,1033,1,0,
  	0,0,1036,1039,1,0,0,0,1037,1035,1,0,0,0,1037,1038,1,0,0,0,1038,77,1,0,
  	0,0,1039,1037,1,0,0,0,1040,1047,3,182,91,0,1041,1042,3,182,91,0,1042,
  	1043,5,123,0,0,1043,1044,3,186,93,0,1044,1045,5,128,0,0,1045,1047,1,0,
  	0,0,1046,1040,1,0,0,0,1046,1041,1,0,0,0,1047,79,1,0,0,0,1048,1050,5,37,
  	0,0,1049,1051,5,30,0,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,1052,
  	1,0,0,0,1052,1053,3,82,41,0,1053,81,1,0,0,0,1054,1059,3,84,42,0,1055,
  	1056,5,122,0,0,1056,1058,3,84,42,0,1057,1055,1,0,0,0,1058,1061,1,0,0,
  	0,1059,1057,1,0,0,0,1059,1060,1,0,0,0,1060,83,1,0,0,0,1061,1059,1,0,0,
  	0,1062,1069,3,182,91,0,1063,1064,3,182,91,0,1064,1065,5,123,0,0,1065,
  	1066,3,270,135,0,1066,1067,5,128,0,0,1067,1069,1,0,0,0,1068,1062,1,0,
  	0,0,1068,1063,1,0,0,0,1069,85,1,0,0,0,1070,1072,5,16,0,0,1071,1073,5,
  	30,0,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1075,
  	3,88,44,0,1075,87,1,0,0,0,1076,1081,3,90,45,0,1077,1078,5,122,0,0,1078,
  	1080,3,90,45,0,1079,1077,1,0,0,0,1080,1083,1,0,0,0,1081,1079,1,0,0,0,
  	1081,1082,1,0,0,0,1082,89,1,0,0,0,1083,1081,1,0,0,0,1084,1085,3,106,53,
  	0,1085,91,1,0,0,0,1086,1087,5,17,0,0,1087,1088,3,94,47,0,1088,93,1,0,
  	0,0,1089,1090,6,47,-1,0,1090,1091,5,134,0,0,1091,1092,3,96,48,0,1092,
  	1093,5,134,0,0,1093,1094,3,98,49,0,1094,1113,1,0,0,0,1095,1096,10,3,0,
  	0,1096,1097,5,134,0,0,1097,1098,3,96,48,0,1098,1099,5,134,0,0,1099,1100,
  	3,98,49,0,1100,1112,1,0,0,0,1101,1102,10,2,0,0,1102,1103,5,122,0,0,1103,
  	1104,5,134,0,0,1104,1105,3,96,48,0,1105,1106,5,134,0,0,1106,1107,3,98,
  	49,0,1107,1112,1,0,0,0,1108,1109,10,1,0,0,1109,1110,5,122,0,0,1110,1112,
  	3,98,49,0,1111,1095,1,0,0,0,1111,1101,1,0,0,0,1111,1108,1,0,0,0,1112,
  	1115,1,0,0,0,1113,1111,1,0,0,0,1113,1114,1,0,0,0,1114,95,1,0,0,0,1115,
  	1113,1,0,0,0,1116,1117,5,189,0,0,1117,97,1,0,0,0,1118,1119,3,434,217,
  	0,1119,99,1,0,0,0,1120,1121,5,18,0,0,1121,1122,5,123,0,0,1122,1123,3,
  	108,54,0,1123,1125,5,128,0,0,1124,1126,5,30,0,0,1125,1124,1,0,0,0,1125,
  	1126,1,0,0,0,1126,1127,1,0,0,0,1127,1128,3,102,51,0,1128,101,1,0,0,0,
  	1129,1130,3,104,52,0,1130,1131,5,122,0,0,1131,1132,3,104,52,0,1132,103,
  	1,0,0,0,1133,1134,3,106,53,0,1134,105,1,0,0,0,1135,1136,5,189,0,0,1136,
  	107,1,0,0,0,1137,1138,7,0,0,0,1138,109,1,0,0,0,1139,1141,5,15,0,0,1140,
  	1142,5,30,0,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,1143,
  	1144,3,112,56,0,1144,111,1,0,0,0,1145,1150,3,114,57,0,1146,1147,5,122,
  	0,0,1147,1149,3,114,57,0,1148,1146,1,0,0,0,1149,1152,1,0,0,0,1150,1148,
  	1,0,0,0,1150,1151,1,0,0,0,1151,113,1,0,0,0,1152,1150,1,0,0,0,1153,1160,
  	3,116,58,0,1154,1155,3,116,58,0,1155,1156,5,123,0,0,1156,1157,3,270,135,
  	0,1157,1158,5,128,0,0,1158,1160,1,0,0,0,1159,1153,1,0,0,0,1159,1154,1,
  	0,0,0,1160,115,1,0,0,0,1161,1162,3,302,151,0,1162,117,1,0,0,0,1163,1165,
  	5,40,0,0,1164,1166,5,30,0,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,
  	1167,1,0,0,0,1167,1170,3,120,60,0,1168,1170,5,40,0,0,1169,1163,1,0,0,
  	0,1169,1168,1,0,0,0,1170,119,1,0,0,0,1171,1176,3,122,61,0,1172,1173,5,
  	122,0,0,1173,1175,3,122,61,0,1174,1172,1,0,0,0,1175,1178,1,0,0,0,1176,
  	1174,1,0,0,0,1176,1177,1,0,0,0,1177,121,1,0,0,0,1178,1176,1,0,0,0,1179,
  	1182,3,124,62,0,1180,1182,3,200,100,0,1181,1179,1,0,0,0,1181,1180,1,0,
  	0,0,1182,123,1,0,0,0,1183,1184,3,302,151,0,1184,125,1,0,0,0,1185,1192,
  	5,47,0,0,1186,1187,5,47,0,0,1187,1192,3,128,64,0,1188,1189,5,47,0,0,1189,
  	1190,5,30,0,0,1190,1192,3,128,64,0,1191,1185,1,0,0,0,1191,1186,1,0,0,
  	0,1191,1188,1,0,0,0,1192,127,1,0,0,0,1193,1195,3,130,65,0,1194,1193,1,
  	0,0,0,1195,1196,1,0,0,0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,129,
  	1,0,0,0,1198,1201,3,434,217,0,1199,1201,3,132,66,0,1200,1198,1,0,0,0,
  	1200,1199,1,0,0,0,1201,131,1,0,0,0,1202,1203,5,134,0,0,1203,1204,3,170,
  	85,0,1204,1205,5,134,0,0,1205,133,1,0,0,0,1206,1207,5,46,0,0,1207,1208,
  	3,136,68,0,1208,135,1,0,0,0,1209,1211,3,138,69,0,1210,1209,1,0,0,0,1211,
  	1212,1,0,0,0,1212,1210,1,0,0,0,1212,1213,1,0,0,0,1213,137,1,0,0,0,1214,
  	1215,5,189,0,0,1215,139,1,0,0,0,1216,1217,5,45,0,0,1217,1218,3,142,71,
  	0,1218,141,1,0,0,0,1219,1221,3,144,72,0,1220,1219,1,0,0,0,1221,1222,1,
  	0,0,0,1222,1220,1,0,0,0,1222,1223,1,0,0,0,1223,143,1,0,0,0,1224,1225,
  	5,189,0,0,1225,145,1,0,0,0,1226,1227,5,35,0,0,1227,1228,3,148,74,0,1228,
  	147,1,0,0,0,1229,1231,3,150,75,0,1230,1229,1,0,0,0,1231,1232,1,0,0,0,
  	1232,1230,1,0,0,0,1232,1233,1,0,0,0,1233,149,1,0,0,0,1234,1235,5,123,
  	0,0,1235,1236,3,152,76,0,1236,1237,5,122,0,0,1237,1238,3,154,77,0,1238,
  	1239,5,128,0,0,1239,151,1,0,0,0,1240,1241,3,406,203,0,1241,153,1,0,0,
  	0,1242,1244,3,152,76,0,1243,1242,1,0,0,0,1244,1245,1,0,0,0,1245,1243,
  	1,0,0,0,1245,1246,1,0,0,0,1246,155,1,0,0,0,1247,1248,5,13,0,0,1248,1253,
  	3,158,79,0,1249,1250,5,13,0,0,1250,1251,5,30,0,0,1251,1253,3,158,79,0,
  	1252,1247,1,0,0,0,1252,1249,1,0,0,0,1253,157,1,0,0,0,1254,1256,3,166,
  	83,0,1255,1254,1,0,0,0,1256,1257,1,0,0,0,1257,1255,1,0,0,0,1257,1258,
  	1,0,0,0,1258,159,1,0,0,0,1259,1260,5,32,0,0,1260,1261,3,162,81,0,1261,
  	161,1,0,0,0,1262,1264,6,81,-1,0,1263,1265,3,168,84,0,1264,1263,1,0,0,
  	0,1264,1265,1,0,0,0,1265,1266,1,0,0,0,1266,1267,3,164,82,0,1267,1280,
  	1,0,0,0,1268,1269,10,2,0,0,1269,1271,5,122,0,0,1270,1272,3,168,84,0,1271,
  	1270,1,0,0,0,1271,1272,1,0,0,0,1272,1273,1,0,0,0,1273,1279,3,164,82,0,
  	1274,1275,10,1,0,0,1275,1276,3,168,84,0,1276,1277,3,164,82,0,1277,1279,
  	1,0,0,0,1278,1268,1,0,0,0,1278,1274,1,0,0,0,1279,1282,1,0,0,0,1280,1278,
  	1,0,0,0,1280,1281,1,0,0,0,1281,163,1,0,0,0,1282,1280,1,0,0,0,1283,1286,
  	3,434,217,0,1284,1286,3,166,83,0,1285,1283,1,0,0,0,1285,1284,1,0,0,0,
  	1286,165,1,0,0,0,1287,1288,3,434,217,0,1288,1289,5,123,0,0,1289,1290,
  	3,186,93,0,1290,1291,5,128,0,0,1291,167,1,0,0,0,1292,1293,5,134,0,0,1293,
  	1294,5,185,0,0,1294,1295,5,134,0,0,1295,1301,5,186,0,0,1296,1297,5,134,
  	0,0,1297,1298,3,170,85,0,1298,1299,5,134,0,0,1299,1301,1,0,0,0,1300,1292,
  	1,0,0,0,1300,1296,1,0,0,0,1301,169,1,0,0,0,1302,1303,5,189,0,0,1303,171,
  	1,0,0,0,1304,1305,3,274,137,0,1305,1306,3,178,89,0,1306,1315,1,0,0,0,
  	1307,1309,3,274,137,0,1308,1310,3,174,87,0,1309,1308,1,0,0,0,1309,1310,
  	1,0,0,0,1310,1311,1,0,0,0,1311,1312,5,30,0,0,1312,1313,3,178,89,0,1313,
  	1315,1,0,0,0,1314,1304,1,0,0,0,1314,1307,1,0,0,0,1315,173,1,0,0,0,1316,
  	1317,6,87,-1,0,1317,1318,5,122,0,0,1318,1319,3,176,88,0,1319,1325,1,0,
  	0,0,1320,1321,10,1,0,0,1321,1322,5,122,0,0,1322,1324,3,176,88,0,1323,
  	1320,1,0,0,0,1324,1327,1,0,0,0,1325,1323,1,0,0,0,1325,1326,1,0,0,0,1326,
  	175,1,0,0,0,1327,1325,1,0,0,0,1328,1348,5,44,0,0,1329,1348,5,40,0,0,1330,
  	1348,5,15,0,0,1331,1332,5,13,0,0,1332,1333,5,123,0,0,1333,1334,3,186,
  	93,0,1334,1335,5,128,0,0,1335,1348,1,0,0,0,1336,1348,5,45,0,0,1337,1338,
  	5,18,0,0,1338,1339,5,123,0,0,1339,1340,3,108,54,0,1340,1341,5,128,0,0,
  	1341,1348,1,0,0,0,1342,1348,5,46,0,0,1343,1348,5,16,0,0,1344,1348,5,37,
  	0,0,1345,1348,5,47,0,0,1346,1348,5,14,0,0,1347,1328,1,0,0,0,1347,1329,
  	1,0,0,0,1347,1330,1,0,0,0,1347,1331,1,0,0,0,1347,1336,1,0,0,0,1347,1337,
  	1,0,0,0,1347,1342,1,0,0,0,1347,1343,1,0,0,0,1347,1344,1,0,0,0,1347,1345,
  	1,0,0,0,1347,1346,1,0,0,0,1348,177,1,0,0,0,1349,1354,3,180,90,0,1350,
  	1351,5,122,0,0,1351,1353,3,180,90,0,1352,1350,1,0,0,0,1353,1356,1,0,0,
  	0,1354,1352,1,0,0,0,1354,1355,1,0,0,0,1355,179,1,0,0,0,1356,1354,1,0,
  	0,0,1357,1401,3,182,91,0,1358,1359,3,182,91,0,1359,1360,5,123,0,0,1360,
  	1361,3,186,93,0,1361,1362,5,128,0,0,1362,1401,1,0,0,0,1363,1364,3,182,
  	91,0,1364,1365,5,193,0,0,1365,1366,3,284,142,0,1366,1401,1,0,0,0,1367,
  	1368,3,182,91,0,1368,1369,5,123,0,0,1369,1370,3,186,93,0,1370,1371,5,
  	128,0,0,1371,1372,5,193,0,0,1372,1373,3,284,142,0,1373,1401,1,0,0,0,1374,
  	1375,3,182,91,0,1375,1376,5,131,0,0,1376,1377,3,628,314,0,1377,1401,1,
  	0,0,0,1378,1379,3,182,91,0,1379,1380,5,123,0,0,1380,1381,3,186,93,0,1381,
  	1382,5,128,0,0,1382,1383,5,131,0,0,1383,1384,3,628,314,0,1384,1401,1,
  	0,0,0,1385,1386,3,182,91,0,1386,1387,5,193,0,0,1387,1388,3,284,142,0,
  	1388,1389,5,131,0,0,1389,1390,3,628,314,0,1390,1401,1,0,0,0,1391,1392,
  	3,182,91,0,1392,1393,5,193,0,0,1393,1394,3,284,142,0,1394,1395,5,123,
  	0,0,1395,1396,3,186,93,0,1396,1397,5,128,0,0,1397,1398,5,131,0,0,1398,
  	1399,3,628,314,0,1399,1401,1,0,0,0,1400,1357,1,0,0,0,1400,1358,1,0,0,
  	0,1400,1363,1,0,0,0,1400,1367,1,0,0,0,1400,1374,1,0,0,0,1400,1378,1,0,
  	0,0,1400,1385,1,0,0,0,1400,1391,1,0,0,0,1401,181,1,0,0,0,1402,1403,3,
  	184,92,0,1403,183,1,0,0,0,1404,1405,7,1,0,0,1405,185,1,0,0,0,1406,1411,
  	3,262,131,0,1407,1411,3,192,96,0,1408,1411,3,188,94,0,1409,1411,3,270,
  	135,0,1410,1406,1,0,0,0,1410,1407,1,0,0,0,1410,1408,1,0,0,0,1410,1409,
  	1,0,0,0,1411,187,1,0,0,0,1412,1413,6,94,-1,0,1413,1414,3,266,133,0,1414,
  	1415,5,129,0,0,1415,1422,1,0,0,0,1416,1417,3,270,135,0,1417,1418,5,122,
  	0,0,1418,1419,3,266,133,0,1419,1420,5,129,0,0,1420,1422,1,0,0,0,1421,
  	1412,1,0,0,0,1421,1416,1,0,0,0,1422,1428,1,0,0,0,1423,1424,10,1,0,0,1424,
  	1425,5,122,0,0,1425,1427,3,190,95,0,1426,1423,1,0,0,0,1427,1430,1,0,0,
  	0,1428,1426,1,0,0,0,1428,1429,1,0,0,0,1429,189,1,0,0,0,1430,1428,1,0,
  	0,0,1431,1432,3,266,133,0,1432,1433,5,129,0,0,1433,1436,1,0,0,0,1434,
  	1436,5,129,0,0,1435,1431,1,0,0,0,1435,1434,1,0,0,0,1436,191,1,0,0,0,1437,
  	1453,5,193,0,0,1438,1439,3,266,133,0,1439,1440,5,129,0,0,1440,1441,5,
  	193,0,0,1441,1453,1,0,0,0,1442,1443,3,262,131,0,1443,1444,5,122,0,0,1444,
  	1445,5,193,0,0,1445,1453,1,0,0,0,1446,1447,3,262,131,0,1447,1448,5,122,
  	0,0,1448,1449,3,266,133,0,1449,1450,5,129,0,0,1450,1451,5,193,0,0,1451,
  	1453,1,0,0,0,1452,1437,1,0,0,0,1452,1438,1,0,0,0,1452,1442,1,0,0,0,1452,
  	1446,1,0,0,0,1453,193,1,0,0,0,1454,1455,3,198,99,0,1455,1456,3,204,102,
  	0,1456,1457,3,196,98,0,1457,195,1,0,0,0,1458,1462,5,10,0,0,1459,1460,
  	5,12,0,0,1460,1462,5,184,0,0,1461,1458,1,0,0,0,1461,1459,1,0,0,0,1462,
  	1464,1,0,0,0,1463,1465,5,189,0,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,
  	1465,197,1,0,0,0,1466,1467,5,184,0,0,1467,1472,5,189,0,0,1468,1469,5,
  	184,0,0,1469,1472,3,200,100,0,1470,1472,5,184,0,0,1471,1466,1,0,0,0,1471,
  	1468,1,0,0,0,1471,1470,1,0,0,0,1472,199,1,0,0,0,1473,1474,5,22,0,0,1474,
  	1475,5,123,0,0,1475,1476,3,202,101,0,1476,1477,5,128,0,0,1477,1483,1,
  	0,0,0,1478,1479,5,26,0,0,1479,1480,5,123,0,0,1480,1481,5,131,0,0,1481,
  	1483,5,128,0,0,1482,1473,1,0,0,0,1482,1478,1,0,0,0,1483,201,1,0,0,0,1484,
  	1498,5,27,0,0,1485,1498,5,136,0,0,1486,1498,5,193,0,0,1487,1498,7,2,0,
  	0,1488,1498,7,3,0,0,1489,1490,5,134,0,0,1490,1491,5,185,0,0,1491,1492,
  	5,134,0,0,1492,1498,5,186,0,0,1493,1498,5,137,0,0,1494,1498,5,138,0,0,
  	1495,1498,5,139,0,0,1496,1498,7,4,0,0,1497,1484,1,0,0,0,1497,1485,1,0,
  	0,0,1497,1486,1,0,0,0,1497,1487,1,0,0,0,1497,1488,1,0,0,0,1497,1489,1,
  	0,0,0,1497,1493,1,0,0,0,1497,1494,1,0,0,0,1497,1495,1,0,0,0,1497,1496,
  	1,0,0,0,1498,203,1,0,0,0,1499,1500,6,102,-1,0,1500,1501,3,206,103,0,1501,
  	1506,1,0,0,0,1502,1503,10,1,0,0,1503,1505,3,206,103,0,1504,1502,1,0,0,
  	0,1505,1508,1,0,0,0,1506,1504,1,0,0,0,1506,1507,1,0,0,0,1507,205,1,0,
  	0,0,1508,1506,1,0,0,0,1509,1512,3,214,107,0,1510,1512,3,208,104,0,1511,
  	1509,1,0,0,0,1511,1510,1,0,0,0,1512,207,1,0,0,0,1513,1514,5,3,0,0,1514,
  	1515,5,11,0,0,1515,1516,3,210,105,0,1516,209,1,0,0,0,1517,1522,3,212,
  	106,0,1518,1519,5,122,0,0,1519,1521,3,212,106,0,1520,1518,1,0,0,0,1521,
  	1524,1,0,0,0,1522,1520,1,0,0,0,1522,1523,1,0,0,0,1523,211,1,0,0,0,1524,
  	1522,1,0,0,0,1525,1526,3,302,151,0,1526,213,1,0,0,0,1527,1528,3,222,111,
  	0,1528,1529,5,189,0,0,1529,1530,3,224,112,0,1530,1535,1,0,0,0,1531,1532,
  	5,9,0,0,1532,1533,5,189,0,0,1533,1535,3,216,108,0,1534,1527,1,0,0,0,1534,
  	1531,1,0,0,0,1535,215,1,0,0,0,1536,1538,3,64,32,0,1537,1539,3,232,116,
  	0,1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,1540,1,0,0,0,1540,1541,3,218,
  	109,0,1541,217,1,0,0,0,1542,1549,5,12,0,0,1543,1544,5,12,0,0,1544,1546,
  	5,9,0,0,1545,1547,5,189,0,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,
  	1549,1,0,0,0,1548,1542,1,0,0,0,1548,1543,1,0,0,0,1549,219,1,0,0,0,1550,
  	1551,5,1,0,0,1551,221,1,0,0,0,1552,1554,3,220,110,0,1553,1552,1,0,0,0,
  	1553,1554,1,0,0,0,1554,1556,1,0,0,0,1555,1557,3,274,137,0,1556,1555,1,
  	0,0,0,1556,1557,1,0,0,0,1557,1558,1,0,0,0,1558,1564,5,7,0,0,1559,1560,
  	3,274,137,0,1560,1561,5,1,0,0,1561,1562,5,7,0,0,1562,1564,1,0,0,0,1563,
  	1553,1,0,0,0,1563,1559,1,0,0,0,1564,223,1,0,0,0,1565,1567,3,226,113,0,
  	1566,1568,3,232,116,0,1567,1566,1,0,0,0,1567,1568,1,0,0,0,1568,1569,1,
  	0,0,0,1569,1570,3,234,117,0,1570,225,1,0,0,0,1571,1573,5,123,0,0,1572,
  	1574,3,228,114,0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,
  	0,1575,1576,5,128,0,0,1576,227,1,0,0,0,1577,1582,3,230,115,0,1578,1579,
  	5,122,0,0,1579,1581,3,230,115,0,1580,1578,1,0,0,0,1581,1584,1,0,0,0,1582,
  	1580,1,0,0,0,1582,1583,1,0,0,0,1583,229,1,0,0,0,1584,1582,1,0,0,0,1585,
  	1586,3,106,53,0,1586,231,1,0,0,0,1587,1588,6,116,-1,0,1588,1589,3,16,
  	8,0,1589,1594,1,0,0,0,1590,1591,10,1,0,0,1591,1593,3,16,8,0,1592,1590,
  	1,0,0,0,1593,1596,1,0,0,0,1594,1592,1,0,0,0,1594,1595,1,0,0,0,1595,233,
  	1,0,0,0,1596,1594,1,0,0,0,1597,1604,5,12,0,0,1598,1599,5,12,0,0,1599,
  	1601,5,7,0,0,1600,1602,5,189,0,0,1601,1600,1,0,0,0,1601,1602,1,0,0,0,
  	1602,1604,1,0,0,0,1603,1597,1,0,0,0,1603,1598,1,0,0,0,1604,235,1,0,0,
  	0,1605,1606,3,240,120,0,1606,1607,3,242,121,0,1607,1608,3,238,119,0,1608,
  	237,1,0,0,0,1609,1610,5,183,0,0,1610,1618,5,189,0,0,1611,1618,5,183,0,
  	0,1612,1613,5,12,0,0,1613,1614,5,188,0,0,1614,1618,5,189,0,0,1615,1616,
  	5,12,0,0,1616,1618,5,188,0,0,1617,1609,1,0,0,0,1617,1611,1,0,0,0,1617,
  	1612,1,0,0,0,1617,1615,1,0,0,0,1618,239,1,0,0,0,1619,1620,5,188,0,0,1620,
  	1630,5,189,0,0,1621,1622,5,188,0,0,1622,1623,5,30,0,0,1623,1630,5,189,
  	0,0,1624,1625,5,188,0,0,1625,1626,5,122,0,0,1626,1627,5,40,0,0,1627,1628,
  	5,30,0,0,1628,1630,5,189,0,0,1629,1619,1,0,0,0,1629,1621,1,0,0,0,1629,
  	1624,1,0,0,0,1630,241,1,0,0,0,1631,1632,6,121,-1,0,1632,1633,3,244,122,
  	0,1633,1638,1,0,0,0,1634,1635,10,1,0,0,1635,1637,3,244,122,0,1636,1634,
  	1,0,0,0,1637,1640,1,0,0,0,1638,1636,1,0,0,0,1638,1639,1,0,0,0,1639,243,
  	1,0,0,0,1640,1638,1,0,0,0,1641,1644,3,246,123,0,1642,1644,3,248,124,0,
  	1643,1641,1,0,0,0,1643,1642,1,0,0,0,1644,245,1,0,0,0,1645,1646,7,5,0,
  	0,1646,247,1,0,0,0,1647,1648,3,274,137,0,1648,1649,5,122,0,0,1649,1650,
  	3,256,128,0,1650,1651,5,30,0,0,1651,1652,3,250,125,0,1652,1661,1,0,0,
  	0,1653,1654,3,274,137,0,1654,1655,5,30,0,0,1655,1656,3,250,125,0,1656,
  	1661,1,0,0,0,1657,1658,3,274,137,0,1658,1659,3,250,125,0,1659,1661,1,
  	0,0,0,1660,1647,1,0,0,0,1660,1653,1,0,0,0,1660,1657,1,0,0,0,1661,249,
  	1,0,0,0,1662,1667,3,252,126,0,1663,1664,5,122,0,0,1664,1666,3,252,126,
  	0,1665,1663,1,0,0,0,1666,1669,1,0,0,0,1667,1665,1,0,0,0,1667,1668,1,0,
  	0,0,1668,251,1,0,0,0,1669,1667,1,0,0,0,1670,1671,3,254,127,0,1671,1672,
  	5,123,0,0,1672,1673,3,260,130,0,1673,1674,5,128,0,0,1674,1675,5,193,0,
  	0,1675,1676,3,284,142,0,1676,1714,1,0,0,0,1677,1678,3,254,127,0,1678,
  	1679,5,123,0,0,1679,1680,3,260,130,0,1680,1681,5,128,0,0,1681,1682,5,
  	131,0,0,1682,1683,3,628,314,0,1683,1714,1,0,0,0,1684,1685,3,254,127,0,
  	1685,1686,5,123,0,0,1686,1687,3,260,130,0,1687,1688,5,128,0,0,1688,1714,
  	1,0,0,0,1689,1690,3,254,127,0,1690,1691,5,193,0,0,1691,1692,3,284,142,
  	0,1692,1714,1,0,0,0,1693,1694,3,254,127,0,1694,1695,5,131,0,0,1695,1696,
  	3,628,314,0,1696,1714,1,0,0,0,1697,1698,3,254,127,0,1698,1699,5,193,0,
  	0,1699,1700,3,284,142,0,1700,1701,5,131,0,0,1701,1702,3,628,314,0,1702,
  	1714,1,0,0,0,1703,1704,3,254,127,0,1704,1705,5,193,0,0,1705,1706,3,284,
  	142,0,1706,1707,5,123,0,0,1707,1708,3,260,130,0,1708,1709,5,128,0,0,1709,
  	1710,5,131,0,0,1710,1711,3,628,314,0,1711,1714,1,0,0,0,1712,1714,3,254,
  	127,0,1713,1670,1,0,0,0,1713,1677,1,0,0,0,1713,1684,1,0,0,0,1713,1689,
  	1,0,0,0,1713,1693,1,0,0,0,1713,1697,1,0,0,0,1713,1703,1,0,0,0,1713,1712,
  	1,0,0,0,1714,253,1,0,0,0,1715,1716,5,189,0,0,1716,255,1,0,0,0,1717,1722,
  	3,258,129,0,1718,1719,5,122,0,0,1719,1721,3,258,129,0,1720,1718,1,0,0,
  	0,1721,1724,1,0,0,0,1722,1720,1,0,0,0,1722,1723,1,0,0,0,1723,257,1,0,
  	0,0,1724,1722,1,0,0,0,1725,1732,5,37,0,0,1726,1727,5,13,0,0,1727,1728,
  	5,123,0,0,1728,1729,3,260,130,0,1729,1730,5,128,0,0,1730,1732,1,0,0,0,
  	1731,1725,1,0,0,0,1731,1726,1,0,0,0,1732,259,1,0,0,0,1733,1736,3,262,
  	131,0,1734,1736,3,270,135,0,1735,1733,1,0,0,0,1735,1734,1,0,0,0,1736,
  	261,1,0,0,0,1737,1742,3,264,132,0,1738,1739,5,122,0,0,1739,1741,3,264,
  	132,0,1740,1738,1,0,0,0,1741,1744,1,0,0,0,1742,1740,1,0,0,0,1742,1743,
  	1,0,0,0,1743,263,1,0,0,0,1744,1742,1,0,0,0,1745,1746,3,266,133,0,1746,
  	1747,5,129,0,0,1747,1748,3,268,134,0,1748,1751,1,0,0,0,1749,1751,3,268,
  	134,0,1750,1745,1,0,0,0,1750,1749,1,0,0,0,1751,265,1,0,0,0,1752,1753,
  	3,628,314,0,1753,267,1,0,0,0,1754,1755,3,628,314,0,1755,269,1,0,0,0,1756,
  	1761,3,272,136,0,1757,1758,5,122,0,0,1758,1760,3,272,136,0,1759,1757,
  	1,0,0,0,1760,1763,1,0,0,0,1761,1759,1,0,0,0,1761,1762,1,0,0,0,1762,271,
  	1,0,0,0,1763,1761,1,0,0,0,1764,1765,5,129,0,0,1765,273,1,0,0,0,1766,1792,
  	5,169,0,0,1767,1792,5,34,0,0,1768,1792,5,29,0,0,1769,1792,5,167,0,0,1770,
  	1792,5,170,0,0,1771,1792,5,43,0,0,1772,1773,5,43,0,0,1773,1792,3,282,
  	141,0,1774,1775,5,169,0,0,1775,1792,3,276,138,0,1776,1777,5,34,0,0,1777,
  	1792,3,276,138,0,1778,1779,5,93,0,0,1779,1792,5,168,0,0,1780,1781,5,167,
  	0,0,1781,1792,3,276,138,0,1782,1783,5,43,0,0,1783,1792,3,280,140,0,1784,
  	1785,5,170,0,0,1785,1792,3,276,138,0,1786,1787,5,188,0,0,1787,1788,5,
  	123,0,0,1788,1789,3,278,139,0,1789,1790,5,128,0,0,1790,1792,1,0,0,0,1791,
  	1766,1,0,0,0,1791,1767,1,0,0,0,1791,1768,1,0,0,0,1791,1769,1,0,0,0,1791,
  	1770,1,0,0,0,1791,1771,1,0,0,0,1791,1772,1,0,0,0,1791,1774,1,0,0,0,1791,
  	1776,1,0,0,0,1791,1778,1,0,0,0,1791,1780,1,0,0,0,1791,1782,1,0,0,0,1791,
  	1784,1,0,0,0,1791,1786,1,0,0,0,1792,275,1,0,0,0,1793,1794,5,123,0,0,1794,
  	1795,5,117,0,0,1795,1796,5,131,0,0,1796,1797,3,628,314,0,1797,1798,5,
  	128,0,0,1798,1804,1,0,0,0,1799,1800,5,123,0,0,1800,1801,3,628,314,0,1801,
  	1802,5,128,0,0,1802,1804,1,0,0,0,1803,1793,1,0,0,0,1803,1799,1,0,0,0,
  	1804,277,1,0,0,0,1805,1806,3,302,151,0,1806,279,1,0,0,0,1807,1808,5,123,
  	0,0,1808,1809,5,118,0,0,1809,1810,5,131,0,0,1810,1811,3,296,148,0,1811,
  	1812,5,122,0,0,1812,1813,5,117,0,0,1813,1814,5,131,0,0,1814,1815,3,628,
  	314,0,1815,1816,5,128,0,0,1816,1842,1,0,0,0,1817,1818,5,123,0,0,1818,
  	1819,5,118,0,0,1819,1820,5,131,0,0,1820,1821,3,296,148,0,1821,1822,5,
  	122,0,0,1822,1823,3,628,314,0,1823,1824,5,128,0,0,1824,1842,1,0,0,0,1825,
  	1826,5,123,0,0,1826,1827,5,118,0,0,1827,1828,5,131,0,0,1828,1829,3,296,
  	148,0,1829,1830,5,128,0,0,1830,1842,1,0,0,0,1831,1832,5,123,0,0,1832,
  	1833,5,117,0,0,1833,1834,5,131,0,0,1834,1835,3,628,314,0,1835,1836,5,
  	128,0,0,1836,1842,1,0,0,0,1837,1838,5,123,0,0,1838,1839,3,628,314,0,1839,
  	1840,5,128,0,0,1840,1842,1,0,0,0,1841,1807,1,0,0,0,1841,1817,1,0,0,0,
  	1841,1825,1,0,0,0,1841,1831,1,0,0,0,1841,1837,1,0,0,0,1842,281,1,0,0,
  	0,1843,1844,5,193,0,0,1844,1850,3,284,142,0,1845,1846,5,123,0,0,1846,
  	1847,3,296,148,0,1847,1848,5,128,0,0,1848,1850,1,0,0,0,1849,1843,1,0,
  	0,0,1849,1845,1,0,0,0,1850,283,1,0,0,0,1851,1852,5,123,0,0,1852,1853,
  	3,296,148,0,1853,1854,5,128,0,0,1854,1857,1,0,0,0,1855,1857,3,286,143,
  	0,1856,1851,1,0,0,0,1856,1855,1,0,0,0,1857,285,1,0,0,0,1858,1876,3,294,
  	147,0,1859,1861,7,2,0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,
  	1,0,0,0,1862,1876,3,690,345,0,1863,1876,5,178,0,0,1864,1876,5,156,0,0,
  	1865,1876,3,686,343,0,1866,1867,5,187,0,0,1867,1868,5,171,0,0,1868,1876,
  	5,178,0,0,1869,1870,3,294,147,0,1870,1871,5,171,0,0,1871,1872,5,178,0,
  	0,1872,1876,1,0,0,0,1873,1876,3,290,145,0,1874,1876,3,288,144,0,1875,
  	1858,1,0,0,0,1875,1860,1,0,0,0,1875,1863,1,0,0,0,1875,1864,1,0,0,0,1875,
  	1865,1,0,0,0,1875,1866,1,0,0,0,1875,1869,1,0,0,0,1875,1873,1,0,0,0,1875,
  	1874,1,0,0,0,1876,287,1,0,0,0,1877,1878,7,6,0,0,1878,289,1,0,0,0,1879,
  	1880,3,278,139,0,1880,1881,5,123,0,0,1881,1882,3,292,146,0,1882,1883,
  	5,128,0,0,1883,291,1,0,0,0,1884,1885,3,628,314,0,1885,1886,5,122,0,0,
  	1886,1887,3,628,314,0,1887,293,1,0,0,0,1888,1889,5,189,0,0,1889,295,1,
  	0,0,0,1890,1893,3,628,314,0,1891,1893,5,193,0,0,1892,1890,1,0,0,0,1892,
  	1891,1,0,0,0,1893,297,1,0,0,0,1894,1895,5,3,0,0,1895,1896,3,300,150,0,
  	1896,299,1,0,0,0,1897,1898,3,302,151,0,1898,301,1,0,0,0,1899,1900,5,189,
  	0,0,1900,303,1,0,0,0,1901,1902,6,152,-1,0,1902,1905,3,16,8,0,1903,1905,
  	3,306,153,0,1904,1901,1,0,0,0,1904,1903,1,0,0,0,1905,1912,1,0,0,0,1906,
  	1907,10,2,0,0,1907,1911,3,16,8,0,1908,1909,10,1,0,0,1909,1911,3,306,153,
  	0,1910,1906,1,0,0,0,1910,1908,1,0,0,0,1911,1914,1,0,0,0,1912,1910,1,0,
  	0,0,1912,1913,1,0,0,0,1913,305,1,0,0,0,1914,1912,1,0,0,0,1915,1918,3,
  	308,154,0,1916,1918,3,310,155,0,1917,1915,1,0,0,0,1917,1916,1,0,0,0,1918,
  	307,1,0,0,0,1919,1920,5,2,0,0,1920,309,1,0,0,0,1921,1924,3,312,156,0,
  	1922,1924,3,610,305,0,1923,1921,1,0,0,0,1923,1922,1,0,0,0,1924,311,1,
  	0,0,0,1925,1926,3,222,111,0,1926,1927,3,314,157,0,1927,1928,3,316,158,
  	0,1928,313,1,0,0,0,1929,1930,5,189,0,0,1930,315,1,0,0,0,1931,1933,3,226,
  	113,0,1932,1934,3,318,159,0,1933,1932,1,0,0,0,1933,1934,1,0,0,0,1934,
  	1935,1,0,0,0,1935,1936,3,234,117,0,1936,1960,1,0,0,0,1937,1938,3,226,
  	113,0,1938,1939,5,55,0,0,1939,1940,5,123,0,0,1940,1941,5,189,0,0,1941,
  	1943,5,128,0,0,1942,1944,3,318,159,0,1943,1942,1,0,0,0,1943,1944,1,0,
  	0,0,1944,1945,1,0,0,0,1945,1946,3,234,117,0,1946,1960,1,0,0,0,1947,1948,
  	3,226,113,0,1948,1949,5,55,0,0,1949,1950,5,123,0,0,1950,1951,5,189,0,
  	0,1951,1952,5,128,0,0,1952,1953,3,12,6,0,1953,1954,3,234,117,0,1954,1960,
  	1,0,0,0,1955,1956,3,226,113,0,1956,1957,3,12,6,0,1957,1958,3,234,117,
  	0,1958,1960,1,0,0,0,1959,1931,1,0,0,0,1959,1937,1,0,0,0,1959,1947,1,0,
  	0,0,1959,1955,1,0,0,0,1960,317,1,0,0,0,1961,1963,3,320,160,0,1962,1961,
  	1,0,0,0,1963,1964,1,0,0,0,1964,1962,1,0,0,0,1964,1965,1,0,0,0,1965,319,
  	1,0,0,0,1966,1969,3,16,8,0,1967,1969,3,322,161,0,1968,1966,1,0,0,0,1968,
  	1967,1,0,0,0,1969,321,1,0,0,0,1970,1976,3,440,220,0,1971,1976,3,372,186,
  	0,1972,1976,3,356,178,0,1973,1976,3,338,169,0,1974,1976,3,324,162,0,1975,
  	1970,1,0,0,0,1975,1971,1,0,0,0,1975,1972,1,0,0,0,1975,1973,1,0,0,0,1975,
  	1974,1,0,0,0,1976,323,1,0,0,0,1977,1978,3,332,166,0,1978,1979,3,330,165,
  	0,1979,1984,1,0,0,0,1980,1981,3,326,163,0,1981,1982,3,330,165,0,1982,
  	1984,1,0,0,0,1983,1977,1,0,0,0,1983,1980,1,0,0,0,1984,325,1,0,0,0,1985,
  	1986,6,163,-1,0,1986,1987,3,332,166,0,1987,1988,3,328,164,0,1988,1993,
  	1,0,0,0,1989,1990,10,1,0,0,1990,1992,3,580,290,0,1991,1989,1,0,0,0,1992,
  	1995,1,0,0,0,1993,1991,1,0,0,0,1993,1994,1,0,0,0,1994,327,1,0,0,0,1995,
  	1993,1,0,0,0,1996,1997,5,33,0,0,1997,329,1,0,0,0,1998,2002,5,60,0,0,1999,
  	2000,5,12,0,0,2000,2002,5,61,0,0,2001,1998,1,0,0,0,2001,1999,1,0,0,0,
  	2002,331,1,0,0,0,2003,2004,6,166,-1,0,2004,2005,3,334,167,0,2005,2010,
  	1,0,0,0,2006,2007,10,1,0,0,2007,2009,3,580,290,0,2008,2006,1,0,0,0,2009,
  	2012,1,0,0,0,2010,2008,1,0,0,0,2010,2011,1,0,0,0,2011,333,1,0,0,0,2012,
  	2010,1,0,0,0,2013,2014,5,61,0,0,2014,2015,5,123,0,0,2015,2016,3,336,168,
  	0,2016,2017,5,128,0,0,2017,335,1,0,0,0,2018,2019,3,628,314,0,2019,337,
  	1,0,0,0,2020,2021,5,189,0,0,2021,2022,5,129,0,0,2022,2023,5,63,0,0,2023,
  	2024,5,123,0,0,2024,2025,3,628,314,0,2025,2026,5,128,0,0,2026,2027,3,
  	340,170,0,2027,2051,1,0,0,0,2028,2029,5,63,0,0,2029,2030,5,123,0,0,2030,
  	2031,3,628,314,0,2031,2032,5,128,0,0,2032,2033,3,340,170,0,2033,2051,
  	1,0,0,0,2034,2035,5,189,0,0,2035,2036,5,129,0,0,2036,2037,5,64,0,0,2037,
  	2038,5,65,0,0,2038,2039,5,123,0,0,2039,2040,3,628,314,0,2040,2041,5,128,
  	0,0,2041,2042,3,340,170,0,2042,2051,1,0,0,0,2043,2044,5,64,0,0,2044,2045,
  	5,65,0,0,2045,2046,5,123,0,0,2046,2047,3,628,314,0,2047,2048,5,128,0,
  	0,2048,2049,3,340,170,0,2049,2051,1,0,0,0,2050,2020,1,0,0,0,2050,2028,
  	1,0,0,0,2050,2034,1,0,0,0,2050,2043,1,0,0,0,2051,339,1,0,0,0,2052,2053,
  	3,344,172,0,2053,2054,3,342,171,0,2054,2057,1,0,0,0,2055,2057,3,342,171,
  	0,2056,2052,1,0,0,0,2056,2055,1,0,0,0,2057,341,1,0,0,0,2058,2060,5,62,
  	0,0,2059,2061,5,189,0,0,2060,2059,1,0,0,0,2060,2061,1,0,0,0,2061,2068,
  	1,0,0,0,2062,2063,5,12,0,0,2063,2065,5,64,0,0,2064,2066,5,189,0,0,2065,
  	2064,1,0,0,0,2065,2066,1,0,0,0,2066,2068,1,0,0,0,2067,2058,1,0,0,0,2067,
  	2062,1,0,0,0,2068,343,1,0,0,0,2069,2070,6,172,-1,0,2070,2071,3,348,174,
  	0,2071,2076,1,0,0,0,2072,2073,10,1,0,0,2073,2075,3,346,173,0,2074,2072,
  	1,0,0,0,2075,2078,1,0,0,0,2076,2074,1,0,0,0,2076,2077,1,0,0,0,2077,345,
  	1,0,0,0,2078,2076,1,0,0,0,2079,2082,3,348,174,0,2080,2082,3,390,195,0,
  	2081,2079,1,0,0,0,2081,2080,1,0,0,0,2082,347,1,0,0,0,2083,2084,5,65,0,
  	0,2084,2090,3,350,175,0,2085,2086,5,65,0,0,2086,2087,3,350,175,0,2087,
  	2088,5,189,0,0,2088,2090,1,0,0,0,2089,2083,1,0,0,0,2089,2085,1,0,0,0,
  	2090,349,1,0,0,0,2091,2092,5,123,0,0,2092,2093,3,352,176,0,2093,2094,
  	5,128,0,0,2094,2097,1,0,0,0,2095,2097,5,66,0,0,2096,2091,1,0,0,0,2096,
  	2095,1,0,0,0,2097,351,1,0,0,0,2098,2100,3,354,177,0,2099,2098,1,0,0,0,
  	2100,2101,1,0,0,0,2101,2099,1,0,0,0,2101,2102,1,0,0,0,2102,353,1,0,0,
  	0,2103,2114,3,628,314,0,2104,2105,3,628,314,0,2105,2106,5,129,0,0,2106,
  	2114,1,0,0,0,2107,2108,5,129,0,0,2108,2114,3,628,314,0,2109,2110,3,628,
  	314,0,2110,2111,5,129,0,0,2111,2112,3,628,314,0,2112,2114,1,0,0,0,2113,
  	2103,1,0,0,0,2113,2104,1,0,0,0,2113,2107,1,0,0,0,2113,2109,1,0,0,0,2114,
  	355,1,0,0,0,2115,2116,3,358,179,0,2116,2120,3,360,180,0,2117,2119,3,362,
  	181,0,2118,2117,1,0,0,0,2119,2122,1,0,0,0,2120,2118,1,0,0,0,2120,2121,
  	1,0,0,0,2121,2124,1,0,0,0,2122,2120,1,0,0,0,2123,2125,3,366,183,0,2124,
  	2123,1,0,0,0,2124,2125,1,0,0,0,2125,2126,1,0,0,0,2126,2127,3,370,185,
  	0,2127,357,1,0,0,0,2128,2129,5,51,0,0,2129,2130,5,123,0,0,2130,2131,3,
  	628,314,0,2131,2132,5,128,0,0,2132,2133,5,52,0,0,2133,359,1,0,0,0,2134,
  	2136,3,390,195,0,2135,2134,1,0,0,0,2136,2139,1,0,0,0,2137,2135,1,0,0,
  	0,2137,2138,1,0,0,0,2138,361,1,0,0,0,2139,2137,1,0,0,0,2140,2141,3,364,
  	182,0,2141,2142,3,360,180,0,2142,363,1,0,0,0,2143,2144,5,56,0,0,2144,
  	2145,5,123,0,0,2145,2146,3,628,314,0,2146,2147,5,128,0,0,2147,2148,5,
  	52,0,0,2148,2157,1,0,0,0,2149,2150,5,53,0,0,2150,2151,5,51,0,0,2151,2152,
  	5,123,0,0,2152,2153,3,628,314,0,2153,2154,5,128,0,0,2154,2155,5,52,0,
  	0,2155,2157,1,0,0,0,2156,2143,1,0,0,0,2156,2149,1,0,0,0,2157,365,1,0,
  	0,0,2158,2159,3,368,184,0,2159,2160,3,360,180,0,2160,367,1,0,0,0,2161,
  	2162,5,53,0,0,2162,369,1,0,0,0,2163,2167,5,54,0,0,2164,2165,5,12,0,0,
  	2165,2167,5,51,0,0,2166,2163,1,0,0,0,2166,2164,1,0,0,0,2167,371,1,0,0,
  	0,2168,2171,3,382,191,0,2169,2171,3,374,187,0,2170,2168,1,0,0,0,2170,
  	2169,1,0,0,0,2171,373,1,0,0,0,2172,2174,3,380,190,0,2173,2172,1,0,0,0,
  	2173,2174,1,0,0,0,2174,2175,1,0,0,0,2175,2177,5,57,0,0,2176,2178,3,430,
  	215,0,2177,2176,1,0,0,0,2177,2178,1,0,0,0,2178,2182,1,0,0,0,2179,2181,
  	3,390,195,0,2180,2179,1,0,0,0,2181,2184,1,0,0,0,2182,2180,1,0,0,0,2182,
  	2183,1,0,0,0,2183,2185,1,0,0,0,2184,2182,1,0,0,0,2185,2186,3,376,188,
  	0,2186,375,1,0,0,0,2187,2189,5,70,0,0,2188,2190,3,378,189,0,2189,2188,
  	1,0,0,0,2189,2190,1,0,0,0,2190,2197,1,0,0,0,2191,2192,5,12,0,0,2192,2194,
  	5,57,0,0,2193,2195,3,378,189,0,2194,2193,1,0,0,0,2194,2195,1,0,0,0,2195,
  	2197,1,0,0,0,2196,2187,1,0,0,0,2196,2191,1,0,0,0,2197,377,1,0,0,0,2198,
  	2199,3,302,151,0,2199,379,1,0,0,0,2200,2201,5,189,0,0,2201,2202,5,129,
  	0,0,2202,381,1,0,0,0,2203,2204,5,57,0,0,2204,2205,3,384,192,0,2205,2209,
  	3,430,215,0,2206,2208,3,390,195,0,2207,2206,1,0,0,0,2208,2211,1,0,0,0,
  	2209,2207,1,0,0,0,2209,2210,1,0,0,0,2210,2212,1,0,0,0,2211,2209,1,0,0,
  	0,2212,2213,3,386,193,0,2213,2214,3,388,194,0,2214,383,1,0,0,0,2215,2216,
  	5,187,0,0,2216,385,1,0,0,0,2217,2218,5,187,0,0,2218,387,1,0,0,0,2219,
  	2220,3,440,220,0,2220,389,1,0,0,0,2221,2227,3,322,161,0,2222,2227,3,48,
  	24,0,2223,2227,3,394,197,0,2224,2227,3,62,31,0,2225,2227,3,392,196,0,
  	2226,2221,1,0,0,0,2226,2222,1,0,0,0,2226,2223,1,0,0,0,2226,2224,1,0,0,
  	0,2226,2225,1,0,0,0,2227,391,1,0,0,0,2228,2229,5,57,0,0,2229,2230,3,576,
  	288,0,2230,2231,3,430,215,0,2231,393,1,0,0,0,2232,2233,5,48,0,0,2233,
  	2240,3,396,198,0,2234,2236,5,122,0,0,2235,2234,1,0,0,0,2235,2236,1,0,
  	0,0,2236,2237,1,0,0,0,2237,2239,3,396,198,0,2238,2235,1,0,0,0,2239,2242,
  	1,0,0,0,2240,2238,1,0,0,0,2240,2241,1,0,0,0,2241,395,1,0,0,0,2242,2240,
  	1,0,0,0,2243,2244,3,398,199,0,2244,2245,3,400,200,0,2245,397,1,0,0,0,
  	2246,2251,3,404,202,0,2247,2248,5,122,0,0,2248,2250,3,404,202,0,2249,
  	2247,1,0,0,0,2250,2253,1,0,0,0,2251,2249,1,0,0,0,2251,2252,1,0,0,0,2252,
  	2254,1,0,0,0,2253,2251,1,0,0,0,2254,2255,5,134,0,0,2255,399,1,0,0,0,2256,
  	2261,3,402,201,0,2257,2258,5,122,0,0,2258,2260,3,402,201,0,2259,2257,
  	1,0,0,0,2260,2263,1,0,0,0,2261,2259,1,0,0,0,2261,2262,1,0,0,0,2262,2264,
  	1,0,0,0,2263,2261,1,0,0,0,2264,2265,5,134,0,0,2265,401,1,0,0,0,2266,2276,
  	3,286,143,0,2267,2268,3,286,143,0,2268,2269,5,193,0,0,2269,2270,3,286,
  	143,0,2270,2276,1,0,0,0,2271,2272,3,294,147,0,2272,2273,5,193,0,0,2273,
  	2274,3,286,143,0,2274,2276,1,0,0,0,2275,2266,1,0,0,0,2275,2267,1,0,0,
  	0,2275,2271,1,0,0,0,2276,403,1,0,0,0,2277,2280,3,406,203,0,2278,2280,
  	3,416,208,0,2279,2277,1,0,0,0,2279,2278,1,0,0,0,2280,405,1,0,0,0,2281,
  	2283,3,434,217,0,2282,2284,3,408,204,0,2283,2282,1,0,0,0,2283,2284,1,
  	0,0,0,2284,2286,1,0,0,0,2285,2287,3,414,207,0,2286,2285,1,0,0,0,2286,
  	2287,1,0,0,0,2287,407,1,0,0,0,2288,2289,5,123,0,0,2289,2290,3,410,205,
  	0,2290,2291,5,128,0,0,2291,409,1,0,0,0,2292,2294,3,412,206,0,2293,2292,
  	1,0,0,0,2294,2295,1,0,0,0,2295,2293,1,0,0,0,2295,2296,1,0,0,0,2296,411,
  	1,0,0,0,2297,2298,3,628,314,0,2298,413,1,0,0,0,2299,2301,5,123,0,0,2300,
  	2302,3,628,314,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,2303,1,0,0,
  	0,2303,2304,3,684,342,0,2304,2305,5,128,0,0,2305,415,1,0,0,0,2306,2307,
  	5,123,0,0,2307,2308,3,418,209,0,2308,2309,5,122,0,0,2309,2310,3,428,214,
  	0,2310,2311,5,131,0,0,2311,2312,3,628,314,0,2312,2313,5,122,0,0,2313,
  	2314,3,628,314,0,2314,2315,5,128,0,0,2315,2329,1,0,0,0,2316,2317,5,123,
  	0,0,2317,2318,3,418,209,0,2318,2319,5,122,0,0,2319,2320,3,428,214,0,2320,
  	2321,5,131,0,0,2321,2322,3,628,314,0,2322,2323,5,122,0,0,2323,2324,3,
  	628,314,0,2324,2325,5,122,0,0,2325,2326,3,628,314,0,2326,2327,5,128,0,
  	0,2327,2329,1,0,0,0,2328,2306,1,0,0,0,2328,2316,1,0,0,0,2329,417,1,0,
  	0,0,2330,2332,3,420,210,0,2331,2330,1,0,0,0,2332,2333,1,0,0,0,2333,2331,
  	1,0,0,0,2333,2334,1,0,0,0,2334,419,1,0,0,0,2335,2339,3,426,213,0,2336,
  	2339,3,416,208,0,2337,2339,3,422,211,0,2338,2335,1,0,0,0,2338,2336,1,
  	0,0,0,2338,2337,1,0,0,0,2339,421,1,0,0,0,2340,2341,6,211,-1,0,2341,2342,
  	3,434,217,0,2342,2343,3,424,212,0,2343,2348,1,0,0,0,2344,2345,10,1,0,
  	0,2345,2347,3,424,212,0,2346,2344,1,0,0,0,2347,2350,1,0,0,0,2348,2346,
  	1,0,0,0,2348,2349,1,0,0,0,2349,423,1,0,0,0,2350,2348,1,0,0,0,2351,2352,
  	5,123,0,0,2352,2353,3,680,340,0,2353,2354,5,128,0,0,2354,2355,5,124,0,
  	0,2355,2356,5,189,0,0,2356,2360,1,0,0,0,2357,2358,5,124,0,0,2358,2360,
  	5,189,0,0,2359,2351,1,0,0,0,2359,2357,1,0,0,0,2360,425,1,0,0,0,2361,2362,
  	3,434,217,0,2362,2363,5,123,0,0,2363,2364,3,680,340,0,2364,2365,5,128,
  	0,0,2365,2372,1,0,0,0,2366,2367,3,422,211,0,2367,2368,5,123,0,0,2368,
  	2369,3,680,340,0,2369,2370,5,128,0,0,2370,2372,1,0,0,0,2371,2361,1,0,
  	0,0,2371,2366,1,0,0,0,2372,427,1,0,0,0,2373,2374,5,189,0,0,2374,429,1,
  	0,0,0,2375,2377,5,122,0,0,2376,2375,1,0,0,0,2376,2377,1,0,0,0,2377,2378,
  	1,0,0,0,2378,2379,3,432,216,0,2379,431,1,0,0,0,2380,2381,3,434,217,0,
  	2381,2382,5,131,0,0,2382,2383,3,628,314,0,2383,2384,5,122,0,0,2384,2386,
  	3,628,314,0,2385,2387,3,436,218,0,2386,2385,1,0,0,0,2386,2387,1,0,0,0,
  	2387,2394,1,0,0,0,2388,2389,5,125,0,0,2389,2390,5,123,0,0,2390,2391,3,
  	628,314,0,2391,2392,5,128,0,0,2392,2394,1,0,0,0,2393,2380,1,0,0,0,2393,
  	2388,1,0,0,0,2394,433,1,0,0,0,2395,2396,5,189,0,0,2396,435,1,0,0,0,2397,
  	2398,5,122,0,0,2398,2399,3,628,314,0,2399,437,1,0,0,0,2400,2401,5,130,
  	0,0,2401,2402,3,440,220,0,2402,439,1,0,0,0,2403,2434,3,574,287,0,2404,
  	2434,3,580,290,0,2405,2434,3,588,294,0,2406,2434,3,590,295,0,2407,2434,
  	3,566,283,0,2408,2434,3,552,276,0,2409,2434,3,550,275,0,2410,2434,3,548,
  	274,0,2411,2434,3,542,271,0,2412,2434,3,544,272,0,2413,2434,3,538,269,
  	0,2414,2434,3,698,349,0,2415,2434,3,532,266,0,2416,2434,3,526,263,0,2417,
  	2434,3,524,262,0,2418,2434,3,514,257,0,2419,2434,3,492,246,0,2420,2434,
  	3,488,244,0,2421,2434,3,490,245,0,2422,2434,3,480,240,0,2423,2434,3,474,
  	237,0,2424,2434,3,476,238,0,2425,2434,3,464,232,0,2426,2434,3,462,231,
  	0,2427,2434,3,458,229,0,2428,2434,3,456,228,0,2429,2434,3,448,224,0,2430,
  	2434,3,444,222,0,2431,2434,3,442,221,0,2432,2434,3,438,219,0,2433,2403,
  	1,0,0,0,2433,2404,1,0,0,0,2433,2405,1,0,0,0,2433,2406,1,0,0,0,2433,2407,
  	1,0,0,0,2433,2408,1,0,0,0,2433,2409,1,0,0,0,2433,2410,1,0,0,0,2433,2411,
  	1,0,0,0,2433,2412,1,0,0,0,2433,2413,1,0,0,0,2433,2414,1,0,0,0,2433,2415,
  	1,0,0,0,2433,2416,1,0,0,0,2433,2417,1,0,0,0,2433,2418,1,0,0,0,2433,2419,
  	1,0,0,0,2433,2420,1,0,0,0,2433,2421,1,0,0,0,2433,2422,1,0,0,0,2433,2423,
  	1,0,0,0,2433,2424,1,0,0,0,2433,2425,1,0,0,0,2433,2426,1,0,0,0,2433,2427,
  	1,0,0,0,2433,2428,1,0,0,0,2433,2429,1,0,0,0,2433,2430,1,0,0,0,2433,2431,
  	1,0,0,0,2433,2432,1,0,0,0,2434,441,1,0,0,0,2435,2436,5,61,0,0,2436,2437,
  	5,123,0,0,2437,2438,3,336,168,0,2438,2439,5,128,0,0,2439,2440,3,580,290,
  	0,2440,443,1,0,0,0,2441,2442,5,189,0,0,2442,2443,5,25,0,0,2443,2454,3,
  	446,223,0,2444,2446,5,189,0,0,2445,2447,3,582,291,0,2446,2445,1,0,0,0,
  	2446,2447,1,0,0,0,2447,2448,1,0,0,0,2448,2449,5,124,0,0,2449,2450,3,674,
  	337,0,2450,2451,5,25,0,0,2451,2452,3,446,223,0,2452,2454,1,0,0,0,2453,
  	2441,1,0,0,0,2453,2444,1,0,0,0,2454,445,1,0,0,0,2455,2456,3,628,314,0,
  	2456,447,1,0,0,0,2457,2458,5,181,0,0,2458,2459,5,123,0,0,2459,2460,3,
  	450,225,0,2460,2461,5,128,0,0,2461,449,1,0,0,0,2462,2467,3,452,226,0,
  	2463,2464,5,122,0,0,2464,2466,3,452,226,0,2465,2463,1,0,0,0,2466,2469,
  	1,0,0,0,2467,2465,1,0,0,0,2467,2468,1,0,0,0,2468,451,1,0,0,0,2469,2467,
  	1,0,0,0,2470,2473,5,189,0,0,2471,2473,3,454,227,0,2472,2470,1,0,0,0,2472,
  	2471,1,0,0,0,2473,453,1,0,0,0,2474,2475,6,227,-1,0,2475,2477,5,189,0,
  	0,2476,2478,3,582,291,0,2477,2476,1,0,0,0,2477,2478,1,0,0,0,2478,2479,
  	1,0,0,0,2479,2480,5,124,0,0,2480,2481,5,189,0,0,2481,2486,1,0,0,0,2482,
  	2483,10,1,0,0,2483,2485,3,424,212,0,2484,2482,1,0,0,0,2485,2488,1,0,0,
  	0,2486,2484,1,0,0,0,2486,2487,1,0,0,0,2487,455,1,0,0,0,2488,2486,1,0,
  	0,0,2489,2491,5,190,0,0,2490,2492,3,378,189,0,2491,2490,1,0,0,0,2491,
  	2492,1,0,0,0,2492,457,1,0,0,0,2493,2494,5,180,0,0,2494,2495,5,123,0,0,
  	2495,2496,3,460,230,0,2496,2497,5,122,0,0,2497,2498,5,127,0,0,2498,2499,
  	5,131,0,0,2499,2500,3,406,203,0,2500,2501,5,128,0,0,2501,2508,1,0,0,0,
  	2502,2503,5,180,0,0,2503,2504,5,123,0,0,2504,2505,3,460,230,0,2505,2506,
  	5,128,0,0,2506,2508,1,0,0,0,2507,2493,1,0,0,0,2507,2502,1,0,0,0,2508,
  	459,1,0,0,0,2509,2514,3,470,235,0,2510,2511,5,122,0,0,2511,2513,3,470,
  	235,0,2512,2510,1,0,0,0,2513,2516,1,0,0,0,2514,2512,1,0,0,0,2514,2515,
  	1,0,0,0,2515,461,1,0,0,0,2516,2514,1,0,0,0,2517,2519,5,182,0,0,2518,2520,
  	3,378,189,0,2519,2518,1,0,0,0,2519,2520,1,0,0,0,2520,463,1,0,0,0,2521,
  	2522,5,126,0,0,2522,2523,5,123,0,0,2523,2524,3,466,233,0,2524,2525,5,
  	122,0,0,2525,2526,5,127,0,0,2526,2527,5,131,0,0,2527,2528,3,406,203,0,
  	2528,2529,5,128,0,0,2529,2536,1,0,0,0,2530,2531,5,126,0,0,2531,2532,5,
  	123,0,0,2532,2533,3,466,233,0,2533,2534,5,128,0,0,2534,2536,1,0,0,0,2535,
  	2521,1,0,0,0,2535,2530,1,0,0,0,2536,465,1,0,0,0,2537,2542,3,468,234,0,
  	2538,2539,5,122,0,0,2539,2541,3,468,234,0,2540,2538,1,0,0,0,2541,2544,
  	1,0,0,0,2542,2540,1,0,0,0,2542,2543,1,0,0,0,2543,467,1,0,0,0,2544,2542,
  	1,0,0,0,2545,2550,3,470,235,0,2546,2547,3,470,235,0,2547,2548,3,472,236,
  	0,2548,2550,1,0,0,0,2549,2545,1,0,0,0,2549,2546,1,0,0,0,2550,469,1,0,
  	0,0,2551,2552,6,235,-1,0,2552,2553,3,434,217,0,2553,2558,1,0,0,0,2554,
  	2555,10,1,0,0,2555,2557,3,424,212,0,2556,2554,1,0,0,0,2557,2560,1,0,0,
  	0,2558,2556,1,0,0,0,2558,2559,1,0,0,0,2559,471,1,0,0,0,2560,2558,1,0,
  	0,0,2561,2562,5,123,0,0,2562,2563,3,680,340,0,2563,2564,5,128,0,0,2564,
  	473,1,0,0,0,2565,2567,5,68,0,0,2566,2568,7,7,0,0,2567,2566,1,0,0,0,2567,
  	2568,1,0,0,0,2568,475,1,0,0,0,2569,2570,5,72,0,0,2570,2571,5,123,0,0,
  	2571,2572,3,478,239,0,2572,2574,5,128,0,0,2573,2575,3,516,258,0,2574,
  	2573,1,0,0,0,2574,2575,1,0,0,0,2575,477,1,0,0,0,2576,2577,6,239,-1,0,
  	2577,2578,3,592,296,0,2578,2579,5,121,0,0,2579,2580,5,122,0,0,2580,2591,
  	1,0,0,0,2581,2582,3,592,296,0,2582,2583,5,122,0,0,2583,2584,3,522,261,
  	0,2584,2591,1,0,0,0,2585,2586,3,592,296,0,2586,2587,5,122,0,0,2587,2588,
  	3,512,256,0,2588,2591,1,0,0,0,2589,2591,3,512,256,0,2590,2576,1,0,0,0,
  	2590,2581,1,0,0,0,2590,2585,1,0,0,0,2590,2589,1,0,0,0,2591,2597,1,0,0,
  	0,2592,2593,10,1,0,0,2593,2594,5,122,0,0,2594,2596,3,512,256,0,2595,2592,
  	1,0,0,0,2596,2599,1,0,0,0,2597,2595,1,0,0,0,2597,2598,1,0,0,0,2598,479,
  	1,0,0,0,2599,2597,1,0,0,0,2600,2601,5,189,0,0,2601,2602,3,482,241,0,2602,
  	481,1,0,0,0,2603,2605,5,123,0,0,2604,2606,3,484,242,0,2605,2604,1,0,0,
  	0,2605,2606,1,0,0,0,2606,2607,1,0,0,0,2607,2608,5,128,0,0,2608,2609,5,
  	131,0,0,2609,2610,3,628,314,0,2610,483,1,0,0,0,2611,2616,3,486,243,0,
  	2612,2613,5,122,0,0,2613,2615,3,486,243,0,2614,2612,1,0,0,0,2615,2618,
  	1,0,0,0,2616,2614,1,0,0,0,2616,2617,1,0,0,0,2617,485,1,0,0,0,2618,2616,
  	1,0,0,0,2619,2620,5,189,0,0,2620,487,1,0,0,0,2621,2623,5,91,0,0,2622,
  	2624,3,628,314,0,2623,2622,1,0,0,0,2623,2624,1,0,0,0,2624,489,1,0,0,0,
  	2625,2626,5,114,0,0,2626,2633,3,592,296,0,2627,2628,5,114,0,0,2628,2629,
  	5,123,0,0,2629,2630,3,594,297,0,2630,2631,5,128,0,0,2631,2633,1,0,0,0,
  	2632,2625,1,0,0,0,2632,2627,1,0,0,0,2633,491,1,0,0,0,2634,2635,5,73,0,
  	0,2635,2637,3,506,253,0,2636,2638,3,500,250,0,2637,2636,1,0,0,0,2637,
  	2638,1,0,0,0,2638,2645,1,0,0,0,2639,2640,5,73,0,0,2640,2642,3,496,248,
  	0,2641,2643,3,494,247,0,2642,2641,1,0,0,0,2642,2643,1,0,0,0,2643,2645,
  	1,0,0,0,2644,2634,1,0,0,0,2644,2639,1,0,0,0,2645,493,1,0,0,0,2646,2647,
  	5,122,0,0,2647,2648,3,500,250,0,2648,495,1,0,0,0,2649,2667,3,576,288,
  	0,2650,2667,5,193,0,0,2651,2667,3,562,281,0,2652,2653,3,562,281,0,2653,
  	2654,5,134,0,0,2654,2655,5,185,0,0,2655,2656,5,134,0,0,2656,2657,5,186,
  	0,0,2657,2658,3,560,280,0,2658,2667,1,0,0,0,2659,2660,3,498,249,0,2660,
  	2661,5,134,0,0,2661,2662,5,185,0,0,2662,2663,5,134,0,0,2663,2664,5,186,
  	0,0,2664,2665,3,560,280,0,2665,2667,1,0,0,0,2666,2649,1,0,0,0,2666,2650,
  	1,0,0,0,2666,2651,1,0,0,0,2666,2652,1,0,0,0,2666,2659,1,0,0,0,2667,497,
  	1,0,0,0,2668,2669,5,123,0,0,2669,2670,3,602,301,0,2670,2671,5,128,0,0,
  	2671,499,1,0,0,0,2672,2677,3,502,251,0,2673,2674,5,122,0,0,2674,2676,
  	3,502,251,0,2675,2673,1,0,0,0,2676,2679,1,0,0,0,2677,2675,1,0,0,0,2677,
  	2678,1,0,0,0,2678,501,1,0,0,0,2679,2677,1,0,0,0,2680,2683,3,674,337,0,
  	2681,2683,3,504,252,0,2682,2680,1,0,0,0,2682,2681,1,0,0,0,2683,503,1,
  	0,0,0,2684,2685,5,123,0,0,2685,2686,3,500,250,0,2686,2687,5,122,0,0,2687,
  	2688,3,428,214,0,2688,2689,5,131,0,0,2689,2690,3,628,314,0,2690,2691,
  	5,122,0,0,2691,2693,3,628,314,0,2692,2694,3,436,218,0,2693,2692,1,0,0,
  	0,2693,2694,1,0,0,0,2694,2695,1,0,0,0,2695,2696,5,128,0,0,2696,505,1,
  	0,0,0,2697,2703,3,508,254,0,2698,2699,5,123,0,0,2699,2700,3,510,255,0,
  	2700,2701,5,128,0,0,2701,2703,1,0,0,0,2702,2697,1,0,0,0,2702,2698,1,0,
  	0,0,2703,507,1,0,0,0,2704,2705,5,123,0,0,2705,2706,3,602,301,0,2706,2707,
  	5,128,0,0,2707,2712,1,0,0,0,2708,2709,5,123,0,0,2709,2710,5,193,0,0,2710,
  	2712,5,128,0,0,2711,2704,1,0,0,0,2711,2708,1,0,0,0,2712,509,1,0,0,0,2713,
  	2714,6,255,-1,0,2714,2715,3,592,296,0,2715,2716,5,122,0,0,2716,2717,3,
  	512,256,0,2717,2724,1,0,0,0,2718,2719,3,592,296,0,2719,2720,5,122,0,0,
  	2720,2721,3,522,261,0,2721,2724,1,0,0,0,2722,2724,3,512,256,0,2723,2713,
  	1,0,0,0,2723,2718,1,0,0,0,2723,2722,1,0,0,0,2724,2730,1,0,0,0,2725,2726,
  	10,1,0,0,2726,2727,5,122,0,0,2727,2729,3,512,256,0,2728,2725,1,0,0,0,
  	2729,2732,1,0,0,0,2730,2728,1,0,0,0,2730,2731,1,0,0,0,2731,511,1,0,0,
  	0,2732,2730,1,0,0,0,2733,2734,5,76,0,0,2734,2735,5,131,0,0,2735,2764,
  	3,522,261,0,2736,2737,5,77,0,0,2737,2738,5,131,0,0,2738,2764,3,592,296,
  	0,2739,2740,5,69,0,0,2740,2741,5,131,0,0,2741,2764,3,628,314,0,2742,2743,
  	5,12,0,0,2743,2744,5,131,0,0,2744,2764,3,576,288,0,2745,2746,5,83,0,0,
  	2746,2747,5,131,0,0,2747,2764,3,576,288,0,2748,2749,5,87,0,0,2749,2750,
  	5,131,0,0,2750,2764,3,600,300,0,2751,2752,5,86,0,0,2752,2753,5,131,0,
  	0,2753,2764,3,96,48,0,2754,2755,5,85,0,0,2755,2756,5,131,0,0,2756,2764,
  	3,558,279,0,2757,2758,5,84,0,0,2758,2759,5,131,0,0,2759,2764,3,406,203,
  	0,2760,2761,5,143,0,0,2761,2762,5,131,0,0,2762,2764,3,576,288,0,2763,
  	2733,1,0,0,0,2763,2736,1,0,0,0,2763,2739,1,0,0,0,2763,2742,1,0,0,0,2763,
  	2745,1,0,0,0,2763,2748,1,0,0,0,2763,2751,1,0,0,0,2763,2754,1,0,0,0,2763,
  	2757,1,0,0,0,2763,2760,1,0,0,0,2764,513,1,0,0,0,2765,2766,5,74,0,0,2766,
  	2767,3,522,261,0,2767,2768,5,122,0,0,2768,2769,3,516,258,0,2769,2773,
  	1,0,0,0,2770,2771,5,74,0,0,2771,2773,3,522,261,0,2772,2765,1,0,0,0,2772,
  	2770,1,0,0,0,2773,515,1,0,0,0,2774,2777,3,628,314,0,2775,2777,3,518,259,
  	0,2776,2774,1,0,0,0,2776,2775,1,0,0,0,2777,517,1,0,0,0,2778,2779,6,259,
  	-1,0,2779,2780,3,628,314,0,2780,2781,5,122,0,0,2781,2782,3,628,314,0,
  	2782,2789,1,0,0,0,2783,2784,3,628,314,0,2784,2785,5,122,0,0,2785,2786,
  	3,520,260,0,2786,2789,1,0,0,0,2787,2789,3,520,260,0,2788,2778,1,0,0,0,
  	2788,2783,1,0,0,0,2788,2787,1,0,0,0,2789,2798,1,0,0,0,2790,2791,10,2,
  	0,0,2791,2792,5,122,0,0,2792,2797,3,628,314,0,2793,2794,10,1,0,0,2794,
  	2795,5,122,0,0,2795,2797,3,520,260,0,2796,2790,1,0,0,0,2796,2793,1,0,
  	0,0,2797,2800,1,0,0,0,2798,2796,1,0,0,0,2798,2799,1,0,0,0,2799,519,1,
  	0,0,0,2800,2798,1,0,0,0,2801,2802,5,123,0,0,2802,2803,3,628,314,0,2803,
  	2804,5,122,0,0,2804,2805,3,428,214,0,2805,2806,5,131,0,0,2806,2807,3,
  	628,314,0,2807,2808,5,122,0,0,2808,2810,3,628,314,0,2809,2811,3,436,218,
  	0,2810,2809,1,0,0,0,2810,2811,1,0,0,0,2811,2812,1,0,0,0,2812,2813,5,128,
  	0,0,2813,2828,1,0,0,0,2814,2815,5,123,0,0,2815,2816,3,518,259,0,2816,
  	2817,5,122,0,0,2817,2818,3,428,214,0,2818,2819,5,131,0,0,2819,2820,3,
  	628,314,0,2820,2821,5,122,0,0,2821,2823,3,628,314,0,2822,2824,3,436,218,
  	0,2823,2822,1,0,0,0,2823,2824,1,0,0,0,2824,2825,1,0,0,0,2825,2826,5,128,
  	0,0,2826,2828,1,0,0,0,2827,2801,1,0,0,0,2827,2814,1,0,0,0,2828,521,1,
  	0,0,0,2829,2833,3,576,288,0,2830,2833,3,558,279,0,2831,2833,5,193,0,0,
  	2832,2829,1,0,0,0,2832,2830,1,0,0,0,2832,2831,1,0,0,0,2833,523,1,0,0,
  	0,2834,2836,5,71,0,0,2835,2837,7,7,0,0,2836,2835,1,0,0,0,2836,2837,1,
  	0,0,0,2837,525,1,0,0,0,2838,2839,5,75,0,0,2839,2840,5,123,0,0,2840,2841,
  	3,528,264,0,2841,2842,5,128,0,0,2842,527,1,0,0,0,2843,2845,3,596,298,
  	0,2844,2843,1,0,0,0,2844,2845,1,0,0,0,2845,2847,1,0,0,0,2846,2848,3,530,
  	265,0,2847,2846,1,0,0,0,2847,2848,1,0,0,0,2848,2853,1,0,0,0,2849,2850,
  	5,122,0,0,2850,2852,3,530,265,0,2851,2849,1,0,0,0,2852,2855,1,0,0,0,2853,
  	2851,1,0,0,0,2853,2854,1,0,0,0,2854,529,1,0,0,0,2855,2853,1,0,0,0,2856,
  	2857,5,77,0,0,2857,2858,5,131,0,0,2858,2896,3,592,296,0,2859,2860,5,83,
  	0,0,2860,2861,5,131,0,0,2861,2896,3,576,288,0,2862,2863,5,97,0,0,2863,
  	2864,5,131,0,0,2864,2896,3,558,279,0,2865,2866,5,98,0,0,2866,2867,5,131,
  	0,0,2867,2896,3,558,279,0,2868,2869,5,99,0,0,2869,2870,5,131,0,0,2870,
  	2896,3,558,279,0,2871,2872,5,101,0,0,2872,2873,5,131,0,0,2873,2896,3,
  	558,279,0,2874,2875,5,102,0,0,2875,2876,5,131,0,0,2876,2896,3,628,314,
  	0,2877,2878,5,191,0,0,2878,2879,5,131,0,0,2879,2896,3,558,279,0,2880,
  	2881,5,87,0,0,2881,2882,5,131,0,0,2882,2896,3,600,300,0,2883,2884,5,100,
  	0,0,2884,2885,5,131,0,0,2885,2896,3,558,279,0,2886,2887,5,79,0,0,2887,
  	2888,5,131,0,0,2888,2896,3,558,279,0,2889,2890,5,80,0,0,2890,2891,5,131,
  	0,0,2891,2896,3,558,279,0,2892,2893,5,78,0,0,2893,2894,5,131,0,0,2894,
  	2896,3,558,279,0,2895,2856,1,0,0,0,2895,2859,1,0,0,0,2895,2862,1,0,0,
  	0,2895,2865,1,0,0,0,2895,2868,1,0,0,0,2895,2871,1,0,0,0,2895,2874,1,0,
  	0,0,2895,2877,1,0,0,0,2895,2880,1,0,0,0,2895,2883,1,0,0,0,2895,2886,1,
  	0,0,0,2895,2889,1,0,0,0,2895,2892,1,0,0,0,2896,531,1,0,0,0,2897,2898,
  	5,111,0,0,2898,2899,5,123,0,0,2899,2900,3,534,267,0,2900,2901,5,128,0,
  	0,2901,2911,1,0,0,0,2902,2903,5,111,0,0,2903,2904,5,123,0,0,2904,2905,
  	5,81,0,0,2905,2906,5,131,0,0,2906,2907,3,600,300,0,2907,2908,5,128,0,
  	0,2908,2909,3,516,258,0,2909,2911,1,0,0,0,2910,2897,1,0,0,0,2910,2902,
  	1,0,0,0,2911,533,1,0,0,0,2912,2914,3,592,296,0,2913,2912,1,0,0,0,2913,
  	2914,1,0,0,0,2914,2916,1,0,0,0,2915,2917,3,536,268,0,2916,2915,1,0,0,
  	0,2916,2917,1,0,0,0,2917,2922,1,0,0,0,2918,2919,5,122,0,0,2919,2921,3,
  	536,268,0,2920,2918,1,0,0,0,2921,2924,1,0,0,0,2922,2920,1,0,0,0,2922,
  	2923,1,0,0,0,2923,535,1,0,0,0,2924,2922,1,0,0,0,2925,2926,5,77,0,0,2926,
  	2927,5,131,0,0,2927,3001,3,592,296,0,2928,2929,5,97,0,0,2929,2930,5,131,
  	0,0,2930,3001,3,558,279,0,2931,2932,5,83,0,0,2932,2933,5,131,0,0,2933,
  	3001,3,576,288,0,2934,2935,5,87,0,0,2935,2936,5,131,0,0,2936,3001,3,600,
  	300,0,2937,2938,5,103,0,0,2938,2939,5,131,0,0,2939,3001,3,600,300,0,2940,
  	2941,5,104,0,0,2941,2942,5,131,0,0,2942,3001,3,600,300,0,2943,2944,5,
  	105,0,0,2944,2945,5,131,0,0,2945,3001,3,600,300,0,2946,2947,5,106,0,0,
  	2947,2948,5,131,0,0,2948,3001,3,600,300,0,2949,2950,5,189,0,0,2950,2951,
  	5,131,0,0,2951,3001,3,600,300,0,2952,2953,5,99,0,0,2953,2954,5,131,0,
  	0,2954,3001,3,600,300,0,2955,2956,5,95,0,0,2956,2957,5,131,0,0,2957,3001,
  	3,600,300,0,2958,2959,5,67,0,0,2959,2960,5,131,0,0,2960,3001,3,600,300,
  	0,2961,2962,5,101,0,0,2962,2963,5,131,0,0,2963,3001,3,600,300,0,2964,
  	2965,5,108,0,0,2965,2966,5,131,0,0,2966,3001,3,600,300,0,2967,2968,5,
  	109,0,0,2968,2969,5,131,0,0,2969,3001,3,600,300,0,2970,2971,5,102,0,0,
  	2971,2972,5,131,0,0,2972,3001,3,628,314,0,2973,2974,5,110,0,0,2974,2975,
  	5,131,0,0,2975,3001,3,600,300,0,2976,2977,5,191,0,0,2977,2978,5,131,0,
  	0,2978,3001,3,600,300,0,2979,2980,5,100,0,0,2980,2981,5,131,0,0,2981,
  	3001,3,600,300,0,2982,2983,5,79,0,0,2983,2984,5,131,0,0,2984,3001,3,600,
  	300,0,2985,2986,5,73,0,0,2986,2987,5,131,0,0,2987,3001,3,600,300,0,2988,
  	2989,5,72,0,0,2989,2990,5,131,0,0,2990,3001,3,600,300,0,2991,2992,5,82,
  	0,0,2992,2993,5,131,0,0,2993,3001,3,600,300,0,2994,2995,5,80,0,0,2995,
  	2996,5,131,0,0,2996,3001,3,600,300,0,2997,2998,5,78,0,0,2998,2999,5,131,
  	0,0,2999,3001,3,600,300,0,3000,2925,1,0,0,0,3000,2928,1,0,0,0,3000,2931,
  	1,0,0,0,3000,2934,1,0,0,0,3000,2937,1,0,0,0,3000,2940,1,0,0,0,3000,2943,
  	1,0,0,0,3000,2946,1,0,0,0,3000,2949,1,0,0,0,3000,2952,1,0,0,0,3000,2955,
  	1,0,0,0,3000,2958,1,0,0,0,3000,2961,1,0,0,0,3000,2964,1,0,0,0,3000,2967,
  	1,0,0,0,3000,2970,1,0,0,0,3000,2973,1,0,0,0,3000,2976,1,0,0,0,3000,2979,
  	1,0,0,0,3000,2982,1,0,0,0,3000,2985,1,0,0,0,3000,2988,1,0,0,0,3000,2991,
  	1,0,0,0,3000,2994,1,0,0,0,3000,2997,1,0,0,0,3001,537,1,0,0,0,3002,3006,
  	5,50,0,0,3003,3004,5,49,0,0,3004,3006,5,160,0,0,3005,3002,1,0,0,0,3005,
  	3003,1,0,0,0,3006,3007,1,0,0,0,3007,3029,3,434,217,0,3008,3012,5,50,0,
  	0,3009,3010,5,49,0,0,3010,3012,5,160,0,0,3011,3008,1,0,0,0,3011,3009,
  	1,0,0,0,3012,3013,1,0,0,0,3013,3014,3,434,217,0,3014,3015,5,123,0,0,3015,
  	3016,3,546,273,0,3016,3017,5,128,0,0,3017,3029,1,0,0,0,3018,3022,5,50,
  	0,0,3019,3020,5,49,0,0,3020,3022,5,160,0,0,3021,3018,1,0,0,0,3021,3019,
  	1,0,0,0,3022,3023,1,0,0,0,3023,3024,3,540,270,0,3024,3025,5,123,0,0,3025,
  	3026,3,546,273,0,3026,3027,5,128,0,0,3027,3029,1,0,0,0,3028,3005,1,0,
  	0,0,3028,3011,1,0,0,0,3028,3021,1,0,0,0,3029,539,1,0,0,0,3030,3031,3,
  	434,217,0,3031,3032,5,122,0,0,3032,541,1,0,0,0,3033,3037,5,50,0,0,3034,
  	3035,5,49,0,0,3035,3037,5,160,0,0,3036,3033,1,0,0,0,3036,3034,1,0,0,0,
  	3037,3038,1,0,0,0,3038,3039,3,576,288,0,3039,543,1,0,0,0,3040,3041,5,
  	50,0,0,3041,3042,5,123,0,0,3042,3043,3,546,273,0,3043,3045,5,128,0,0,
  	3044,3046,5,122,0,0,3045,3044,1,0,0,0,3045,3046,1,0,0,0,3046,3047,1,0,
  	0,0,3047,3048,3,628,314,0,3048,545,1,0,0,0,3049,3054,3,576,288,0,3050,
  	3051,5,122,0,0,3051,3053,3,576,288,0,3052,3050,1,0,0,0,3053,3056,1,0,
  	0,0,3054,3052,1,0,0,0,3054,3055,1,0,0,0,3055,547,1,0,0,0,3056,3054,1,
  	0,0,0,3057,3061,5,113,0,0,3058,3059,5,12,0,0,3059,3061,5,97,0,0,3060,
  	3057,1,0,0,0,3060,3058,1,0,0,0,3061,3062,1,0,0,0,3062,3073,3,592,296,
  	0,3063,3067,5,113,0,0,3064,3065,5,12,0,0,3065,3067,5,97,0,0,3066,3063,
  	1,0,0,0,3066,3064,1,0,0,0,3067,3068,1,0,0,0,3068,3069,5,123,0,0,3069,
  	3070,3,594,297,0,3070,3071,5,128,0,0,3071,3073,1,0,0,0,3072,3060,1,0,
  	0,0,3072,3066,1,0,0,0,3073,549,1,0,0,0,3074,3075,5,59,0,0,3075,551,1,
  	0,0,0,3076,3077,5,92,0,0,3077,3078,5,123,0,0,3078,3079,3,554,277,0,3079,
  	3080,5,128,0,0,3080,553,1,0,0,0,3081,3083,3,596,298,0,3082,3081,1,0,0,
  	0,3082,3083,1,0,0,0,3083,3085,1,0,0,0,3084,3086,3,556,278,0,3085,3084,
  	1,0,0,0,3085,3086,1,0,0,0,3086,3091,1,0,0,0,3087,3088,5,122,0,0,3088,
  	3090,3,556,278,0,3089,3087,1,0,0,0,3090,3093,1,0,0,0,3091,3089,1,0,0,
  	0,3091,3092,1,0,0,0,3092,555,1,0,0,0,3093,3091,1,0,0,0,3094,3095,5,77,
  	0,0,3095,3096,5,131,0,0,3096,3106,3,592,296,0,3097,3098,5,83,0,0,3098,
  	3099,5,131,0,0,3099,3106,3,576,288,0,3100,3101,5,98,0,0,3101,3102,5,131,
  	0,0,3102,3106,3,558,279,0,3103,3104,5,87,0,0,3104,3106,3,600,300,0,3105,
  	3094,1,0,0,0,3105,3097,1,0,0,0,3105,3100,1,0,0,0,3105,3103,1,0,0,0,3106,
  	557,1,0,0,0,3107,3111,3,560,280,0,3108,3110,3,564,282,0,3109,3108,1,0,
  	0,0,3110,3113,1,0,0,0,3111,3109,1,0,0,0,3111,3112,1,0,0,0,3112,559,1,
  	0,0,0,3113,3111,1,0,0,0,3114,3120,3,562,281,0,3115,3116,5,123,0,0,3116,
  	3117,3,558,279,0,3117,3118,5,128,0,0,3118,3120,1,0,0,0,3119,3114,1,0,
  	0,0,3119,3115,1,0,0,0,3120,561,1,0,0,0,3121,3125,5,178,0,0,3122,3125,
  	3,674,337,0,3123,3125,3,668,334,0,3124,3121,1,0,0,0,3124,3122,1,0,0,0,
  	3124,3123,1,0,0,0,3125,563,1,0,0,0,3126,3127,3,560,280,0,3127,3128,5,
  	134,0,0,3128,3129,5,185,0,0,3129,3130,5,134,0,0,3130,3131,5,186,0,0,3131,
  	565,1,0,0,0,3132,3133,5,90,0,0,3133,3141,3,568,284,0,3134,3135,5,90,0,
  	0,3135,3136,3,568,284,0,3136,3137,5,123,0,0,3137,3138,3,570,285,0,3138,
  	3139,5,128,0,0,3139,3141,1,0,0,0,3140,3132,1,0,0,0,3140,3134,1,0,0,0,
  	3141,567,1,0,0,0,3142,3143,5,189,0,0,3143,569,1,0,0,0,3144,3146,3,572,
  	286,0,3145,3144,1,0,0,0,3145,3146,1,0,0,0,3146,3151,1,0,0,0,3147,3148,
  	5,122,0,0,3148,3150,3,572,286,0,3149,3147,1,0,0,0,3150,3153,1,0,0,0,3151,
  	3149,1,0,0,0,3151,3152,1,0,0,0,3152,571,1,0,0,0,3153,3151,1,0,0,0,3154,
  	3169,3,628,314,0,3155,3169,5,156,0,0,3156,3157,5,193,0,0,3157,3169,3,
  	576,288,0,3158,3159,5,189,0,0,3159,3160,5,131,0,0,3160,3169,3,628,314,
  	0,3161,3162,5,189,0,0,3162,3163,5,131,0,0,3163,3169,5,156,0,0,3164,3165,
  	5,189,0,0,3165,3166,5,131,0,0,3166,3167,5,193,0,0,3167,3169,3,576,288,
  	0,3168,3154,1,0,0,0,3168,3155,1,0,0,0,3168,3156,1,0,0,0,3168,3158,1,0,
  	0,0,3168,3161,1,0,0,0,3168,3164,1,0,0,0,3169,573,1,0,0,0,3170,3171,5,
  	51,0,0,3171,3172,5,123,0,0,3172,3173,3,628,314,0,3173,3174,5,128,0,0,
  	3174,3175,3,576,288,0,3175,3176,5,122,0,0,3176,3177,3,576,288,0,3177,
  	3178,5,122,0,0,3178,3179,3,576,288,0,3179,575,1,0,0,0,3180,3181,3,578,
  	289,0,3181,577,1,0,0,0,3182,3183,5,187,0,0,3183,579,1,0,0,0,3184,3186,
  	3,578,289,0,3185,3184,1,0,0,0,3185,3186,1,0,0,0,3186,3187,1,0,0,0,3187,
  	3189,5,189,0,0,3188,3190,3,582,291,0,3189,3188,1,0,0,0,3189,3190,1,0,
  	0,0,3190,3192,1,0,0,0,3191,3193,3,414,207,0,3192,3191,1,0,0,0,3192,3193,
  	1,0,0,0,3193,3194,1,0,0,0,3194,3195,5,131,0,0,3195,3215,3,628,314,0,3196,
  	3198,5,189,0,0,3197,3199,3,582,291,0,3198,3197,1,0,0,0,3198,3199,1,0,
  	0,0,3199,3200,1,0,0,0,3200,3201,5,124,0,0,3201,3202,3,674,337,0,3202,
  	3203,5,131,0,0,3203,3204,3,628,314,0,3204,3215,1,0,0,0,3205,3206,5,189,
  	0,0,3206,3207,5,123,0,0,3207,3208,3,484,242,0,3208,3209,5,128,0,0,3209,
  	3210,5,124,0,0,3210,3211,3,674,337,0,3211,3212,5,131,0,0,3212,3213,3,
  	628,314,0,3213,3215,1,0,0,0,3214,3185,1,0,0,0,3214,3196,1,0,0,0,3214,
  	3205,1,0,0,0,3215,581,1,0,0,0,3216,3217,5,123,0,0,3217,3221,3,584,292,
  	0,3218,3220,3,586,293,0,3219,3218,1,0,0,0,3220,3223,1,0,0,0,3221,3219,
  	1,0,0,0,3221,3222,1,0,0,0,3222,3224,1,0,0,0,3223,3221,1,0,0,0,3224,3225,
  	5,128,0,0,3225,583,1,0,0,0,3226,3228,3,628,314,0,3227,3229,5,129,0,0,
  	3228,3227,1,0,0,0,3228,3229,1,0,0,0,3229,3231,1,0,0,0,3230,3232,3,628,
  	314,0,3231,3230,1,0,0,0,3231,3232,1,0,0,0,3232,3251,1,0,0,0,3233,3235,
  	5,129,0,0,3234,3236,3,628,314,0,3235,3234,1,0,0,0,3235,3236,1,0,0,0,3236,
  	3251,1,0,0,0,3237,3239,3,628,314,0,3238,3237,1,0,0,0,3238,3239,1,0,0,
  	0,3239,3240,1,0,0,0,3240,3241,5,129,0,0,3241,3242,3,628,314,0,3242,3243,
  	5,129,0,0,3243,3244,3,628,314,0,3244,3251,1,0,0,0,3245,3247,3,628,314,
  	0,3246,3245,1,0,0,0,3246,3247,1,0,0,0,3247,3248,1,0,0,0,3248,3249,5,30,
  	0,0,3249,3251,3,628,314,0,3250,3226,1,0,0,0,3250,3233,1,0,0,0,3250,3238,
  	1,0,0,0,3250,3246,1,0,0,0,3251,585,1,0,0,0,3252,3253,5,122,0,0,3253,3254,
  	3,682,341,0,3254,587,1,0,0,0,3255,3256,5,31,0,0,3256,3257,3,576,288,0,
  	3257,3258,5,160,0,0,3258,3259,3,434,217,0,3259,589,1,0,0,0,3260,3261,
  	5,112,0,0,3261,3268,3,592,296,0,3262,3263,5,112,0,0,3263,3264,5,123,0,
  	0,3264,3265,3,594,297,0,3265,3266,5,128,0,0,3266,3268,1,0,0,0,3267,3260,
  	1,0,0,0,3267,3262,1,0,0,0,3268,591,1,0,0,0,3269,3272,3,602,301,0,3270,
  	3272,5,193,0,0,3271,3269,1,0,0,0,3271,3270,1,0,0,0,3272,593,1,0,0,0,3273,
  	3275,3,596,298,0,3274,3273,1,0,0,0,3274,3275,1,0,0,0,3275,3277,1,0,0,
  	0,3276,3278,3,598,299,0,3277,3276,1,0,0,0,3278,3279,1,0,0,0,3279,3277,
  	1,0,0,0,3279,3280,1,0,0,0,3280,595,1,0,0,0,3281,3283,3,592,296,0,3282,
  	3284,5,122,0,0,3283,3282,1,0,0,0,3283,3284,1,0,0,0,3284,597,1,0,0,0,3285,
  	3286,5,77,0,0,3286,3287,5,131,0,0,3287,3295,3,592,296,0,3288,3289,5,83,
  	0,0,3289,3290,5,131,0,0,3290,3295,3,576,288,0,3291,3292,5,87,0,0,3292,
  	3293,5,131,0,0,3293,3295,3,600,300,0,3294,3285,1,0,0,0,3294,3288,1,0,
  	0,0,3294,3291,1,0,0,0,3295,599,1,0,0,0,3296,3299,3,434,217,0,3297,3299,
  	3,426,213,0,3298,3296,1,0,0,0,3298,3297,1,0,0,0,3299,601,1,0,0,0,3300,
  	3301,6,301,-1,0,3301,3305,3,604,302,0,3302,3303,7,2,0,0,3303,3305,3,604,
  	302,0,3304,3300,1,0,0,0,3304,3302,1,0,0,0,3305,3311,1,0,0,0,3306,3307,
  	10,1,0,0,3307,3308,7,2,0,0,3308,3310,3,604,302,0,3309,3306,1,0,0,0,3310,
  	3313,1,0,0,0,3311,3309,1,0,0,0,3311,3312,1,0,0,0,3312,603,1,0,0,0,3313,
  	3311,1,0,0,0,3314,3315,6,302,-1,0,3315,3316,3,606,303,0,3316,3327,1,0,
  	0,0,3317,3318,10,2,0,0,3318,3319,7,8,0,0,3319,3326,3,606,303,0,3320,3321,
  	10,1,0,0,3321,3322,5,134,0,0,3322,3323,5,134,0,0,3323,3324,1,0,0,0,3324,
  	3326,3,608,304,0,3325,3317,1,0,0,0,3325,3320,1,0,0,0,3326,3329,1,0,0,
  	0,3327,3325,1,0,0,0,3327,3328,1,0,0,0,3328,605,1,0,0,0,3329,3327,1,0,
  	0,0,3330,3336,3,608,304,0,3331,3332,3,608,304,0,3332,3333,5,136,0,0,3333,
  	3334,3,606,303,0,3334,3336,1,0,0,0,3335,3330,1,0,0,0,3335,3331,1,0,0,
  	0,3336,607,1,0,0,0,3337,3346,5,187,0,0,3338,3346,5,178,0,0,3339,3346,
  	3,674,337,0,3340,3346,3,668,334,0,3341,3342,5,123,0,0,3342,3343,3,602,
  	301,0,3343,3344,5,128,0,0,3344,3346,1,0,0,0,3345,3337,1,0,0,0,3345,3338,
  	1,0,0,0,3345,3339,1,0,0,0,3345,3340,1,0,0,0,3345,3341,1,0,0,0,3346,609,
  	1,0,0,0,3347,3348,5,9,0,0,3348,3349,3,612,306,0,3349,3350,3,614,307,0,
  	3350,3357,1,0,0,0,3351,3352,5,1,0,0,3352,3353,5,9,0,0,3353,3354,3,612,
  	306,0,3354,3355,3,614,307,0,3355,3357,1,0,0,0,3356,3347,1,0,0,0,3356,
  	3351,1,0,0,0,3357,611,1,0,0,0,3358,3359,5,189,0,0,3359,613,1,0,0,0,3360,
  	3362,3,64,32,0,3361,3363,3,318,159,0,3362,3361,1,0,0,0,3362,3363,1,0,
  	0,0,3363,3364,1,0,0,0,3364,3365,3,218,109,0,3365,3371,1,0,0,0,3366,3367,
  	3,64,32,0,3367,3368,3,12,6,0,3368,3369,3,218,109,0,3369,3371,1,0,0,0,
  	3370,3360,1,0,0,0,3370,3366,1,0,0,0,3371,615,1,0,0,0,3372,3373,5,58,0,
  	0,3373,3374,5,178,0,0,3374,617,1,0,0,0,3375,3376,5,41,0,0,3376,3380,3,
  	620,310,0,3377,3378,5,41,0,0,3378,3380,5,42,0,0,3379,3375,1,0,0,0,3379,
  	3377,1,0,0,0,3380,619,1,0,0,0,3381,3386,3,622,311,0,3382,3383,5,122,0,
  	0,3383,3385,3,622,311,0,3384,3382,1,0,0,0,3385,3388,1,0,0,0,3386,3384,
  	1,0,0,0,3386,3387,1,0,0,0,3387,621,1,0,0,0,3388,3386,1,0,0,0,3389,3390,
  	3,274,137,0,3390,3391,3,624,312,0,3391,3398,1,0,0,0,3392,3393,3,274,137,
  	0,3393,3394,5,123,0,0,3394,3395,3,624,312,0,3395,3396,5,128,0,0,3396,
  	3398,1,0,0,0,3397,3389,1,0,0,0,3397,3392,1,0,0,0,3398,623,1,0,0,0,3399,
  	3401,3,626,313,0,3400,3399,1,0,0,0,3400,3401,1,0,0,0,3401,3406,1,0,0,
  	0,3402,3403,5,122,0,0,3403,3405,3,626,313,0,3404,3402,1,0,0,0,3405,3408,
  	1,0,0,0,3406,3404,1,0,0,0,3406,3407,1,0,0,0,3407,625,1,0,0,0,3408,3406,
  	1,0,0,0,3409,3410,5,189,0,0,3410,3411,5,132,0,0,3411,3412,5,189,0,0,3412,
  	627,1,0,0,0,3413,3414,6,314,-1,0,3414,3415,3,632,316,0,3415,3422,1,0,
  	0,0,3416,3417,10,1,0,0,3417,3418,3,630,315,0,3418,3419,3,632,316,0,3419,
  	3421,1,0,0,0,3420,3416,1,0,0,0,3421,3424,1,0,0,0,3422,3420,1,0,0,0,3422,
  	3423,1,0,0,0,3423,629,1,0,0,0,3424,3422,1,0,0,0,3425,3426,5,27,0,0,3426,
  	631,1,0,0,0,3427,3432,3,634,317,0,3428,3429,7,4,0,0,3429,3431,3,634,317,
  	0,3430,3428,1,0,0,0,3431,3434,1,0,0,0,3432,3430,1,0,0,0,3432,3433,1,0,
  	0,0,3433,633,1,0,0,0,3434,3432,1,0,0,0,3435,3440,3,636,318,0,3436,3437,
  	5,139,0,0,3437,3439,3,636,318,0,3438,3436,1,0,0,0,3439,3442,1,0,0,0,3440,
  	3438,1,0,0,0,3440,3441,1,0,0,0,3441,635,1,0,0,0,3442,3440,1,0,0,0,3443,
  	3448,3,638,319,0,3444,3445,5,138,0,0,3445,3447,3,638,319,0,3446,3444,
  	1,0,0,0,3447,3450,1,0,0,0,3448,3446,1,0,0,0,3448,3449,1,0,0,0,3449,637,
  	1,0,0,0,3450,3448,1,0,0,0,3451,3453,5,137,0,0,3452,3451,1,0,0,0,3452,
  	3453,1,0,0,0,3453,3454,1,0,0,0,3454,3455,3,642,321,0,3455,639,1,0,0,0,
  	3456,3457,7,9,0,0,3457,641,1,0,0,0,3458,3464,3,644,322,0,3459,3460,3,
  	640,320,0,3460,3461,3,644,322,0,3461,3463,1,0,0,0,3462,3459,1,0,0,0,3463,
  	3466,1,0,0,0,3464,3462,1,0,0,0,3464,3465,1,0,0,0,3465,643,1,0,0,0,3466,
  	3464,1,0,0,0,3467,3479,3,646,323,0,3468,3470,5,134,0,0,3469,3471,5,185,
  	0,0,3470,3469,1,0,0,0,3470,3471,1,0,0,0,3471,3472,1,0,0,0,3472,3474,5,
  	134,0,0,3473,3475,5,186,0,0,3474,3473,1,0,0,0,3474,3475,1,0,0,0,3475,
  	3476,1,0,0,0,3476,3478,3,646,323,0,3477,3468,1,0,0,0,3478,3481,1,0,0,
  	0,3479,3477,1,0,0,0,3479,3480,1,0,0,0,3480,645,1,0,0,0,3481,3479,1,0,
  	0,0,3482,3484,3,648,324,0,3483,3482,1,0,0,0,3483,3484,1,0,0,0,3484,3485,
  	1,0,0,0,3485,3490,3,650,325,0,3486,3487,7,2,0,0,3487,3489,3,650,325,0,
  	3488,3486,1,0,0,0,3489,3492,1,0,0,0,3490,3488,1,0,0,0,3490,3491,1,0,0,
  	0,3491,647,1,0,0,0,3492,3490,1,0,0,0,3493,3494,7,2,0,0,3494,649,1,0,0,
  	0,3495,3500,3,652,326,0,3496,3497,7,8,0,0,3497,3499,3,652,326,0,3498,
  	3496,1,0,0,0,3499,3502,1,0,0,0,3500,3498,1,0,0,0,3500,3501,1,0,0,0,3501,
  	651,1,0,0,0,3502,3500,1,0,0,0,3503,3508,3,654,327,0,3504,3505,5,136,0,
  	0,3505,3507,3,654,327,0,3506,3504,1,0,0,0,3507,3510,1,0,0,0,3508,3506,
  	1,0,0,0,3508,3509,1,0,0,0,3509,653,1,0,0,0,3510,3508,1,0,0,0,3511,3516,
  	3,658,329,0,3512,3513,3,656,328,0,3513,3514,3,658,329,0,3514,3516,1,0,
  	0,0,3515,3511,1,0,0,0,3515,3512,1,0,0,0,3516,655,1,0,0,0,3517,3518,5,
  	27,0,0,3518,657,1,0,0,0,3519,3530,3,690,345,0,3520,3530,3,674,337,0,3521,
  	3530,3,668,334,0,3522,3523,5,123,0,0,3523,3524,3,628,314,0,3524,3525,
  	5,128,0,0,3525,3530,1,0,0,0,3526,3530,5,178,0,0,3527,3530,3,686,343,0,
  	3528,3530,3,660,330,0,3529,3519,1,0,0,0,3529,3520,1,0,0,0,3529,3521,1,
  	0,0,0,3529,3522,1,0,0,0,3529,3526,1,0,0,0,3529,3527,1,0,0,0,3529,3528,
  	1,0,0,0,3530,659,1,0,0,0,3531,3532,5,172,0,0,3532,3533,3,662,331,0,3533,
  	3534,5,174,0,0,3534,661,1,0,0,0,3535,3538,3,628,314,0,3536,3538,3,664,
  	332,0,3537,3535,1,0,0,0,3537,3536,1,0,0,0,3538,663,1,0,0,0,3539,3540,
  	6,332,-1,0,3540,3541,3,628,314,0,3541,3542,5,122,0,0,3542,3543,3,628,
  	314,0,3543,3550,1,0,0,0,3544,3545,3,628,314,0,3545,3546,5,122,0,0,3546,
  	3547,3,666,333,0,3547,3550,1,0,0,0,3548,3550,3,666,333,0,3549,3539,1,
  	0,0,0,3549,3544,1,0,0,0,3549,3548,1,0,0,0,3550,3559,1,0,0,0,3551,3552,
  	10,2,0,0,3552,3553,5,122,0,0,3553,3558,3,628,314,0,3554,3555,10,1,0,0,
  	3555,3556,5,122,0,0,3556,3558,3,666,333,0,3557,3551,1,0,0,0,3557,3554,
  	1,0,0,0,3558,3561,1,0,0,0,3559,3557,1,0,0,0,3559,3560,1,0,0,0,3560,665,
  	1,0,0,0,3561,3559,1,0,0,0,3562,3563,5,123,0,0,3563,3564,3,628,314,0,3564,
  	3565,5,122,0,0,3565,3566,3,428,214,0,3566,3567,5,131,0,0,3567,3568,3,
  	628,314,0,3568,3569,5,122,0,0,3569,3570,3,628,314,0,3570,3571,5,128,0,
  	0,3571,3607,1,0,0,0,3572,3573,5,123,0,0,3573,3574,3,628,314,0,3574,3575,
  	5,122,0,0,3575,3576,3,428,214,0,3576,3577,5,131,0,0,3577,3578,3,628,314,
  	0,3578,3579,5,122,0,0,3579,3580,3,628,314,0,3580,3581,5,122,0,0,3581,
  	3582,3,628,314,0,3582,3583,5,128,0,0,3583,3607,1,0,0,0,3584,3585,5,123,
  	0,0,3585,3586,3,666,333,0,3586,3587,5,122,0,0,3587,3588,3,428,214,0,3588,
  	3589,5,131,0,0,3589,3590,3,628,314,0,3590,3591,5,122,0,0,3591,3592,3,
  	628,314,0,3592,3593,5,128,0,0,3593,3607,1,0,0,0,3594,3595,5,123,0,0,3595,
  	3596,3,666,333,0,3596,3597,5,122,0,0,3597,3598,3,428,214,0,3598,3599,
  	5,131,0,0,3599,3600,3,628,314,0,3600,3601,5,122,0,0,3601,3602,3,628,314,
  	0,3602,3603,5,122,0,0,3603,3604,3,628,314,0,3604,3605,5,128,0,0,3605,
  	3607,1,0,0,0,3606,3562,1,0,0,0,3606,3572,1,0,0,0,3606,3584,1,0,0,0,3606,
  	3594,1,0,0,0,3607,667,1,0,0,0,3608,3609,5,189,0,0,3609,3610,5,123,0,0,
  	3610,3617,5,128,0,0,3611,3612,5,189,0,0,3612,3613,5,123,0,0,3613,3614,
  	3,670,335,0,3614,3615,5,128,0,0,3615,3617,1,0,0,0,3616,3608,1,0,0,0,3616,
  	3611,1,0,0,0,3617,669,1,0,0,0,3618,3619,6,335,-1,0,3619,3625,3,672,336,
  	0,3620,3621,3,680,340,0,3621,3622,5,122,0,0,3622,3623,3,672,336,0,3623,
  	3625,1,0,0,0,3624,3618,1,0,0,0,3624,3620,1,0,0,0,3625,3631,1,0,0,0,3626,
  	3627,10,2,0,0,3627,3628,5,122,0,0,3628,3630,3,672,336,0,3629,3626,1,0,
  	0,0,3630,3633,1,0,0,0,3631,3629,1,0,0,0,3631,3632,1,0,0,0,3632,671,1,
  	0,0,0,3633,3631,1,0,0,0,3634,3635,5,189,0,0,3635,3636,5,131,0,0,3636,
  	3637,3,628,314,0,3637,673,1,0,0,0,3638,3642,3,184,92,0,3639,3641,3,676,
  	338,0,3640,3639,1,0,0,0,3641,3644,1,0,0,0,3642,3640,1,0,0,0,3642,3643,
  	1,0,0,0,3643,675,1,0,0,0,3644,3642,1,0,0,0,3645,3649,3,678,339,0,3646,
  	3647,5,124,0,0,3647,3649,5,189,0,0,3648,3645,1,0,0,0,3648,3646,1,0,0,
  	0,3649,677,1,0,0,0,3650,3651,5,123,0,0,3651,3652,3,680,340,0,3652,3653,
  	5,128,0,0,3653,679,1,0,0,0,3654,3659,3,682,341,0,3655,3656,5,122,0,0,
  	3656,3658,3,682,341,0,3657,3655,1,0,0,0,3658,3661,1,0,0,0,3659,3657,1,
  	0,0,0,3659,3660,1,0,0,0,3660,681,1,0,0,0,3661,3659,1,0,0,0,3662,3664,
  	3,628,314,0,3663,3665,3,684,342,0,3664,3663,1,0,0,0,3664,3665,1,0,0,0,
  	3665,3668,1,0,0,0,3666,3668,3,684,342,0,3667,3662,1,0,0,0,3667,3666,1,
  	0,0,0,3668,683,1,0,0,0,3669,3671,5,129,0,0,3670,3672,3,628,314,0,3671,
  	3670,1,0,0,0,3671,3672,1,0,0,0,3672,3681,1,0,0,0,3673,3674,5,129,0,0,
  	3674,3675,3,628,314,0,3675,3676,5,129,0,0,3676,3677,3,628,314,0,3677,
  	3681,1,0,0,0,3678,3679,5,30,0,0,3679,3681,3,628,314,0,3680,3669,1,0,0,
  	0,3680,3673,1,0,0,0,3680,3678,1,0,0,0,3681,685,1,0,0,0,3682,3692,7,10,
  	0,0,3683,3684,5,150,0,0,3684,3685,5,171,0,0,3685,3692,3,688,344,0,3686,
  	3687,5,151,0,0,3687,3688,5,171,0,0,3688,3689,3,688,344,0,3689,3690,5,
  	173,0,0,3690,3692,1,0,0,0,3691,3682,1,0,0,0,3691,3683,1,0,0,0,3691,3686,
  	1,0,0,0,3692,687,1,0,0,0,3693,3696,5,187,0,0,3694,3696,3,294,147,0,3695,
  	3693,1,0,0,0,3695,3694,1,0,0,0,3696,689,1,0,0,0,3697,3706,7,11,0,0,3698,
  	3706,3,692,346,0,3699,3700,5,187,0,0,3700,3701,5,171,0,0,3701,3706,3,
  	688,344,0,3702,3703,5,179,0,0,3703,3704,5,171,0,0,3704,3706,3,688,344,
  	0,3705,3697,1,0,0,0,3705,3698,1,0,0,0,3705,3699,1,0,0,0,3705,3702,1,0,
  	0,0,3706,691,1,0,0,0,3707,3708,5,123,0,0,3708,3709,3,694,347,0,3709,3710,
  	5,122,0,0,3710,3711,5,128,0,0,3711,693,1,0,0,0,3712,3714,7,2,0,0,3713,
  	3712,1,0,0,0,3713,3714,1,0,0,0,3714,3715,1,0,0,0,3715,3719,5,187,0,0,
  	3716,3719,5,179,0,0,3717,3719,5,189,0,0,3718,3713,1,0,0,0,3718,3716,1,
  	0,0,0,3718,3717,1,0,0,0,3719,695,1,0,0,0,3720,3721,3,628,314,0,3721,697,
  	1,0,0,0,3722,3723,5,51,0,0,3723,3724,5,123,0,0,3724,3725,3,628,314,0,
  	3725,3726,5,128,0,0,3726,3727,3,440,220,0,3727,699,1,0,0,0,331,706,713,
  	716,724,730,740,746,751,760,779,786,795,802,819,829,831,840,844,849,851,
  	860,867,872,877,883,886,892,901,918,920,933,944,954,963,968,972,975,987,
  	990,997,1002,1008,1024,1028,1037,1046,1050,1059,1068,1072,1081,1111,1113,
  	1125,1141,1150,1159,1165,1169,1176,1181,1191,1196,1200,1212,1222,1232,
  	1245,1252,1257,1264,1271,1278,1280,1285,1300,1309,1314,1325,1347,1354,
  	1400,1410,1421,1428,1435,1452,1461,1464,1471,1482,1497,1506,1511,1522,
  	1534,1538,1546,1548,1553,1556,1563,1567,1573,1582,1594,1601,1603,1617,
  	1629,1638,1643,1660,1667,1713,1722,1731,1735,1742,1750,1761,1791,1803,
  	1841,1849,1856,1860,1875,1892,1904,1910,1912,1917,1923,1933,1943,1959,
  	1964,1968,1975,1983,1993,2001,2010,2050,2056,2060,2065,2067,2076,2081,
  	2089,2096,2101,2113,2120,2124,2137,2156,2166,2170,2173,2177,2182,2189,
  	2194,2196,2209,2226,2235,2240,2251,2261,2275,2279,2283,2286,2295,2301,
  	2328,2333,2338,2348,2359,2371,2376,2386,2393,2433,2446,2453,2467,2472,
  	2477,2486,2491,2507,2514,2519,2535,2542,2549,2558,2567,2574,2590,2597,
  	2605,2616,2623,2632,2637,2642,2644,2666,2677,2682,2693,2702,2711,2723,
  	2730,2763,2772,2776,2788,2796,2798,2810,2823,2827,2832,2836,2844,2847,
  	2853,2895,2910,2913,2916,2922,3000,3005,3011,3021,3028,3036,3045,3054,
  	3060,3066,3072,3082,3085,3091,3105,3111,3119,3124,3140,3145,3151,3168,
  	3185,3189,3192,3198,3214,3221,3228,3231,3235,3238,3246,3250,3267,3271,
  	3274,3279,3283,3294,3298,3304,3311,3325,3327,3335,3345,3356,3362,3370,
  	3379,3386,3397,3400,3406,3422,3432,3440,3448,3452,3464,3470,3474,3479,
  	3483,3490,3500,3508,3515,3529,3537,3549,3557,3559,3606,3616,3624,3631,
  	3642,3648,3659,3664,3667,3671,3680,3691,3695,3705,3713,3718
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  fortran90parserParserStaticData = std::move(staticData);
}

}

Fortran90Parser::Fortran90Parser(TokenStream *input) : Fortran90Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

Fortran90Parser::Fortran90Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  Fortran90Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *fortran90parserParserStaticData->atn, fortran90parserParserStaticData->decisionToDFA, fortran90parserParserStaticData->sharedContextCache, options);
}

Fortran90Parser::~Fortran90Parser() {
  delete _interpreter;
}

const atn::ATN& Fortran90Parser::getATN() const {
  return *fortran90parserParserStaticData->atn;
}

std::string Fortran90Parser::getGrammarFileName() const {
  return "Fortran90Parser.g4";
}

const std::vector<std::string>& Fortran90Parser::getRuleNames() const {
  return fortran90parserParserStaticData->ruleNames;
}

const dfa::Vocabulary& Fortran90Parser::getVocabulary() const {
  return fortran90parserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView Fortran90Parser::getSerializedATN() const {
  return fortran90parserParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

Fortran90Parser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExecutableProgramContext* Fortran90Parser::ProgramContext::executableProgram() {
  return getRuleContext<Fortran90Parser::ExecutableProgramContext>(0);
}

tree::TerminalNode* Fortran90Parser::ProgramContext::EOF() {
  return getToken(Fortran90Parser::EOF, 0);
}


size_t Fortran90Parser::ProgramContext::getRuleIndex() const {
  return Fortran90Parser::RuleProgram;
}

void Fortran90Parser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void Fortran90Parser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

Fortran90Parser::ProgramContext* Fortran90Parser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, Fortran90Parser::RuleProgram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(700);
    executableProgram();
    setState(701);
    match(Fortran90Parser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExecutableProgramContext ------------------------------------------------------------------

Fortran90Parser::ExecutableProgramContext::ExecutableProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ProgramUnitContext *> Fortran90Parser::ExecutableProgramContext::programUnit() {
  return getRuleContexts<Fortran90Parser::ProgramUnitContext>();
}

Fortran90Parser::ProgramUnitContext* Fortran90Parser::ExecutableProgramContext::programUnit(size_t i) {
  return getRuleContext<Fortran90Parser::ProgramUnitContext>(i);
}


size_t Fortran90Parser::ExecutableProgramContext::getRuleIndex() const {
  return Fortran90Parser::RuleExecutableProgram;
}

void Fortran90Parser::ExecutableProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecutableProgram(this);
}

void Fortran90Parser::ExecutableProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecutableProgram(this);
}

Fortran90Parser::ExecutableProgramContext* Fortran90Parser::executableProgram() {
  ExecutableProgramContext *_localctx = _tracker.createInstance<ExecutableProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, Fortran90Parser::RuleExecutableProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(704); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(703);
      programUnit();
      setState(706); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5904224344354589714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4613797081759354769) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 2187625305701613569) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramUnitContext ------------------------------------------------------------------

Fortran90Parser::ProgramUnitContext::ProgramUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::MainProgramContext* Fortran90Parser::ProgramUnitContext::mainProgram() {
  return getRuleContext<Fortran90Parser::MainProgramContext>(0);
}

Fortran90Parser::FunctionSubprogramContext* Fortran90Parser::ProgramUnitContext::functionSubprogram() {
  return getRuleContext<Fortran90Parser::FunctionSubprogramContext>(0);
}

Fortran90Parser::SubroutineSubprogramContext* Fortran90Parser::ProgramUnitContext::subroutineSubprogram() {
  return getRuleContext<Fortran90Parser::SubroutineSubprogramContext>(0);
}

Fortran90Parser::BlockDataSubprogramContext* Fortran90Parser::ProgramUnitContext::blockDataSubprogram() {
  return getRuleContext<Fortran90Parser::BlockDataSubprogramContext>(0);
}

Fortran90Parser::ModuleContext* Fortran90Parser::ProgramUnitContext::module() {
  return getRuleContext<Fortran90Parser::ModuleContext>(0);
}


size_t Fortran90Parser::ProgramUnitContext::getRuleIndex() const {
  return Fortran90Parser::RuleProgramUnit;
}

void Fortran90Parser::ProgramUnitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgramUnit(this);
}

void Fortran90Parser::ProgramUnitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgramUnit(this);
}

Fortran90Parser::ProgramUnitContext* Fortran90Parser::programUnit() {
  ProgramUnitContext *_localctx = _tracker.createInstance<ProgramUnitContext>(_ctx, getState());
  enterRule(_localctx, 4, Fortran90Parser::RuleProgramUnit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(713);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(708);
      mainProgram();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(709);
      functionSubprogram();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(710);
      subroutineSubprogram();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(711);
      blockDataSubprogram();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(712);
      module();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MainProgramContext ------------------------------------------------------------------

Fortran90Parser::MainProgramContext::MainProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::MainRangeContext* Fortran90Parser::MainProgramContext::mainRange() {
  return getRuleContext<Fortran90Parser::MainRangeContext>(0);
}

Fortran90Parser::ProgramStmtContext* Fortran90Parser::MainProgramContext::programStmt() {
  return getRuleContext<Fortran90Parser::ProgramStmtContext>(0);
}


size_t Fortran90Parser::MainProgramContext::getRuleIndex() const {
  return Fortran90Parser::RuleMainProgram;
}

void Fortran90Parser::MainProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMainProgram(this);
}

void Fortran90Parser::MainProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMainProgram(this);
}

Fortran90Parser::MainProgramContext* Fortran90Parser::mainProgram() {
  MainProgramContext *_localctx = _tracker.createInstance<MainProgramContext>(_ctx, getState());
  enterRule(_localctx, 6, Fortran90Parser::RuleMainProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(716);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::PROGRAM) {
      setState(715);
      programStmt();
    }
    setState(718);
    mainRange();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramStmtContext ------------------------------------------------------------------

Fortran90Parser::ProgramStmtContext::ProgramStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ProgramStmtContext::PROGRAM() {
  return getToken(Fortran90Parser::PROGRAM, 0);
}

tree::TerminalNode* Fortran90Parser::ProgramStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::ProgramStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleProgramStmt;
}

void Fortran90Parser::ProgramStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgramStmt(this);
}

void Fortran90Parser::ProgramStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgramStmt(this);
}

Fortran90Parser::ProgramStmtContext* Fortran90Parser::programStmt() {
  ProgramStmtContext *_localctx = _tracker.createInstance<ProgramStmtContext>(_ctx, getState());
  enterRule(_localctx, 8, Fortran90Parser::RuleProgramStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(720);
    match(Fortran90Parser::PROGRAM);
    setState(721);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MainRangeContext ------------------------------------------------------------------

Fortran90Parser::MainRangeContext::MainRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::EndProgramStmtContext* Fortran90Parser::MainRangeContext::endProgramStmt() {
  return getRuleContext<Fortran90Parser::EndProgramStmtContext>(0);
}

Fortran90Parser::BodyContext* Fortran90Parser::MainRangeContext::body() {
  return getRuleContext<Fortran90Parser::BodyContext>(0);
}

Fortran90Parser::BodyPlusInternalsContext* Fortran90Parser::MainRangeContext::bodyPlusInternals() {
  return getRuleContext<Fortran90Parser::BodyPlusInternalsContext>(0);
}


size_t Fortran90Parser::MainRangeContext::getRuleIndex() const {
  return Fortran90Parser::RuleMainRange;
}

void Fortran90Parser::MainRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMainRange(this);
}

void Fortran90Parser::MainRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMainRange(this);
}

Fortran90Parser::MainRangeContext* Fortran90Parser::mainRange() {
  MainRangeContext *_localctx = _tracker.createInstance<MainRangeContext>(_ctx, getState());
  enterRule(_localctx, 10, Fortran90Parser::RuleMainRange);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(730);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(724);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
      case 1: {
        setState(723);
        body();
        break;
      }

      default:
        break;
      }
      setState(726);
      endProgramStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(727);
      bodyPlusInternals(0);
      setState(728);
      endProgramStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyPlusInternalsContext ------------------------------------------------------------------

Fortran90Parser::BodyPlusInternalsContext::BodyPlusInternalsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::BodyContext* Fortran90Parser::BodyPlusInternalsContext::body() {
  return getRuleContext<Fortran90Parser::BodyContext>(0);
}

Fortran90Parser::ContainsStmtContext* Fortran90Parser::BodyPlusInternalsContext::containsStmt() {
  return getRuleContext<Fortran90Parser::ContainsStmtContext>(0);
}

Fortran90Parser::InternalSubprogramContext* Fortran90Parser::BodyPlusInternalsContext::internalSubprogram() {
  return getRuleContext<Fortran90Parser::InternalSubprogramContext>(0);
}

Fortran90Parser::BodyPlusInternalsContext* Fortran90Parser::BodyPlusInternalsContext::bodyPlusInternals() {
  return getRuleContext<Fortran90Parser::BodyPlusInternalsContext>(0);
}


size_t Fortran90Parser::BodyPlusInternalsContext::getRuleIndex() const {
  return Fortran90Parser::RuleBodyPlusInternals;
}

void Fortran90Parser::BodyPlusInternalsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBodyPlusInternals(this);
}

void Fortran90Parser::BodyPlusInternalsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBodyPlusInternals(this);
}


Fortran90Parser::BodyPlusInternalsContext* Fortran90Parser::bodyPlusInternals() {
   return bodyPlusInternals(0);
}

Fortran90Parser::BodyPlusInternalsContext* Fortran90Parser::bodyPlusInternals(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::BodyPlusInternalsContext *_localctx = _tracker.createInstance<BodyPlusInternalsContext>(_ctx, parentState);
  Fortran90Parser::BodyPlusInternalsContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 12;
  enterRecursionRule(_localctx, 12, Fortran90Parser::RuleBodyPlusInternals, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(740);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::USE:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::SEMICOLON:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::ICON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME:
      case Fortran90Parser::EXIT: {
        setState(733);
        body();
        setState(734);
        containsStmt();
        setState(735);
        internalSubprogram();
        break;
      }

      case Fortran90Parser::CONTAINS: {
        setState(737);
        containsStmt();
        setState(738);
        internalSubprogram();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(746);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<BodyPlusInternalsContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBodyPlusInternals);
        setState(742);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(743);
        internalSubprogram(); 
      }
      setState(748);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- InternalSubprogramContext ------------------------------------------------------------------

Fortran90Parser::InternalSubprogramContext::InternalSubprogramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::FunctionSubprogramContext* Fortran90Parser::InternalSubprogramContext::functionSubprogram() {
  return getRuleContext<Fortran90Parser::FunctionSubprogramContext>(0);
}

Fortran90Parser::SubroutineSubprogramContext* Fortran90Parser::InternalSubprogramContext::subroutineSubprogram() {
  return getRuleContext<Fortran90Parser::SubroutineSubprogramContext>(0);
}


size_t Fortran90Parser::InternalSubprogramContext::getRuleIndex() const {
  return Fortran90Parser::RuleInternalSubprogram;
}

void Fortran90Parser::InternalSubprogramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInternalSubprogram(this);
}

void Fortran90Parser::InternalSubprogramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInternalSubprogram(this);
}

Fortran90Parser::InternalSubprogramContext* Fortran90Parser::internalSubprogram() {
  InternalSubprogramContext *_localctx = _tracker.createInstance<InternalSubprogramContext>(_ctx, getState());
  enterRule(_localctx, 14, Fortran90Parser::RuleInternalSubprogram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(751);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(749);
      functionSubprogram();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(750);
      subroutineSubprogram();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecificationPartConstructContext ------------------------------------------------------------------

Fortran90Parser::SpecificationPartConstructContext::SpecificationPartConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ImplicitStmtContext* Fortran90Parser::SpecificationPartConstructContext::implicitStmt() {
  return getRuleContext<Fortran90Parser::ImplicitStmtContext>(0);
}

Fortran90Parser::ParameterStmtContext* Fortran90Parser::SpecificationPartConstructContext::parameterStmt() {
  return getRuleContext<Fortran90Parser::ParameterStmtContext>(0);
}

Fortran90Parser::FormatStmtContext* Fortran90Parser::SpecificationPartConstructContext::formatStmt() {
  return getRuleContext<Fortran90Parser::FormatStmtContext>(0);
}

Fortran90Parser::EntryStmtContext* Fortran90Parser::SpecificationPartConstructContext::entryStmt() {
  return getRuleContext<Fortran90Parser::EntryStmtContext>(0);
}

Fortran90Parser::DeclarationConstructContext* Fortran90Parser::SpecificationPartConstructContext::declarationConstruct() {
  return getRuleContext<Fortran90Parser::DeclarationConstructContext>(0);
}

Fortran90Parser::IncludeStmtContext* Fortran90Parser::SpecificationPartConstructContext::includeStmt() {
  return getRuleContext<Fortran90Parser::IncludeStmtContext>(0);
}

Fortran90Parser::UseStmtContext* Fortran90Parser::SpecificationPartConstructContext::useStmt() {
  return getRuleContext<Fortran90Parser::UseStmtContext>(0);
}


size_t Fortran90Parser::SpecificationPartConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleSpecificationPartConstruct;
}

void Fortran90Parser::SpecificationPartConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecificationPartConstruct(this);
}

void Fortran90Parser::SpecificationPartConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecificationPartConstruct(this);
}

Fortran90Parser::SpecificationPartConstructContext* Fortran90Parser::specificationPartConstruct() {
  SpecificationPartConstructContext *_localctx = _tracker.createInstance<SpecificationPartConstructContext>(_ctx, getState());
  enterRule(_localctx, 16, Fortran90Parser::RuleSpecificationPartConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(760);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::IMPLICIT: {
        enterOuterAlt(_localctx, 1);
        setState(753);
        implicitStmt();
        break;
      }

      case Fortran90Parser::PARAMETER: {
        enterOuterAlt(_localctx, 2);
        setState(754);
        parameterStmt();
        break;
      }

      case Fortran90Parser::ICON: {
        enterOuterAlt(_localctx, 3);
        setState(755);
        formatStmt();
        break;
      }

      case Fortran90Parser::ENTRY: {
        enterOuterAlt(_localctx, 4);
        setState(756);
        entryStmt();
        break;
      }

      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::TYPE: {
        enterOuterAlt(_localctx, 5);
        setState(757);
        declarationConstruct();
        break;
      }

      case Fortran90Parser::INCLUDE: {
        enterOuterAlt(_localctx, 6);
        setState(758);
        includeStmt();
        break;
      }

      case Fortran90Parser::USE: {
        enterOuterAlt(_localctx, 7);
        setState(759);
        useStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseStmtContext ------------------------------------------------------------------

Fortran90Parser::UseStmtContext::UseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::UseStmtContext::USE() {
  return getToken(Fortran90Parser::USE, 0);
}

tree::TerminalNode* Fortran90Parser::UseStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::UseStmtContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

tree::TerminalNode* Fortran90Parser::UseStmtContext::ONLY() {
  return getToken(Fortran90Parser::ONLY, 0);
}

tree::TerminalNode* Fortran90Parser::UseStmtContext::COLON() {
  return getToken(Fortran90Parser::COLON, 0);
}

Fortran90Parser::RenameListContext* Fortran90Parser::UseStmtContext::renameList() {
  return getRuleContext<Fortran90Parser::RenameListContext>(0);
}

Fortran90Parser::OnlyListContext* Fortran90Parser::UseStmtContext::onlyList() {
  return getRuleContext<Fortran90Parser::OnlyListContext>(0);
}


size_t Fortran90Parser::UseStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleUseStmt;
}

void Fortran90Parser::UseStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUseStmt(this);
}

void Fortran90Parser::UseStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUseStmt(this);
}

Fortran90Parser::UseStmtContext* Fortran90Parser::useStmt() {
  UseStmtContext *_localctx = _tracker.createInstance<UseStmtContext>(_ctx, getState());
  enterRule(_localctx, 18, Fortran90Parser::RuleUseStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(779);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(762);
      match(Fortran90Parser::USE);
      setState(763);
      match(Fortran90Parser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(764);
      match(Fortran90Parser::USE);
      setState(765);
      match(Fortran90Parser::NAME);
      setState(766);
      match(Fortran90Parser::COMMA);
      setState(767);
      match(Fortran90Parser::ONLY);
      setState(768);
      match(Fortran90Parser::COLON);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(769);
      match(Fortran90Parser::USE);
      setState(770);
      match(Fortran90Parser::NAME);
      setState(771);
      match(Fortran90Parser::COMMA);
      setState(772);
      renameList();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(773);
      match(Fortran90Parser::USE);
      setState(774);
      match(Fortran90Parser::NAME);
      setState(775);
      match(Fortran90Parser::COMMA);
      setState(776);
      match(Fortran90Parser::ONLY);
      setState(777);
      match(Fortran90Parser::COLON);
      setState(778);
      onlyList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OnlyListContext ------------------------------------------------------------------

Fortran90Parser::OnlyListContext::OnlyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::OnlyStmtContext *> Fortran90Parser::OnlyListContext::onlyStmt() {
  return getRuleContexts<Fortran90Parser::OnlyStmtContext>();
}

Fortran90Parser::OnlyStmtContext* Fortran90Parser::OnlyListContext::onlyStmt(size_t i) {
  return getRuleContext<Fortran90Parser::OnlyStmtContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::OnlyListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::OnlyListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::OnlyListContext::getRuleIndex() const {
  return Fortran90Parser::RuleOnlyList;
}

void Fortran90Parser::OnlyListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOnlyList(this);
}

void Fortran90Parser::OnlyListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOnlyList(this);
}

Fortran90Parser::OnlyListContext* Fortran90Parser::onlyList() {
  OnlyListContext *_localctx = _tracker.createInstance<OnlyListContext>(_ctx, getState());
  enterRule(_localctx, 20, Fortran90Parser::RuleOnlyList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(781);
    onlyStmt();
    setState(786);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(782);
        match(Fortran90Parser::COMMA);
        setState(783);
        onlyStmt(); 
      }
      setState(788);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OnlyStmtContext ------------------------------------------------------------------

Fortran90Parser::OnlyStmtContext::OnlyStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::GenericSpecContext* Fortran90Parser::OnlyStmtContext::genericSpec() {
  return getRuleContext<Fortran90Parser::GenericSpecContext>(0);
}

Fortran90Parser::IdentContext* Fortran90Parser::OnlyStmtContext::ident() {
  return getRuleContext<Fortran90Parser::IdentContext>(0);
}

tree::TerminalNode* Fortran90Parser::OnlyStmtContext::IMPLIEDT() {
  return getToken(Fortran90Parser::IMPLIEDT, 0);
}

Fortran90Parser::UseNameContext* Fortran90Parser::OnlyStmtContext::useName() {
  return getRuleContext<Fortran90Parser::UseNameContext>(0);
}


size_t Fortran90Parser::OnlyStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleOnlyStmt;
}

void Fortran90Parser::OnlyStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOnlyStmt(this);
}

void Fortran90Parser::OnlyStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOnlyStmt(this);
}

Fortran90Parser::OnlyStmtContext* Fortran90Parser::onlyStmt() {
  OnlyStmtContext *_localctx = _tracker.createInstance<OnlyStmtContext>(_ctx, getState());
  enterRule(_localctx, 22, Fortran90Parser::RuleOnlyStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(795);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(789);
      genericSpec();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(790);
      ident();
      setState(791);
      match(Fortran90Parser::IMPLIEDT);
      setState(792);
      useName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(794);
      useName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RenameListContext ------------------------------------------------------------------

Fortran90Parser::RenameListContext::RenameListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::RenameContext *> Fortran90Parser::RenameListContext::rename() {
  return getRuleContexts<Fortran90Parser::RenameContext>();
}

Fortran90Parser::RenameContext* Fortran90Parser::RenameListContext::rename(size_t i) {
  return getRuleContext<Fortran90Parser::RenameContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::RenameListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::RenameListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::RenameListContext::getRuleIndex() const {
  return Fortran90Parser::RuleRenameList;
}

void Fortran90Parser::RenameListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRenameList(this);
}

void Fortran90Parser::RenameListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRenameList(this);
}

Fortran90Parser::RenameListContext* Fortran90Parser::renameList() {
  RenameListContext *_localctx = _tracker.createInstance<RenameListContext>(_ctx, getState());
  enterRule(_localctx, 24, Fortran90Parser::RuleRenameList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(797);
    rename();
    setState(802);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(798);
        match(Fortran90Parser::COMMA);
        setState(799);
        rename(); 
      }
      setState(804);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RenameContext ------------------------------------------------------------------

Fortran90Parser::RenameContext::RenameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::IdentContext* Fortran90Parser::RenameContext::ident() {
  return getRuleContext<Fortran90Parser::IdentContext>(0);
}

tree::TerminalNode* Fortran90Parser::RenameContext::IMPLIEDT() {
  return getToken(Fortran90Parser::IMPLIEDT, 0);
}

Fortran90Parser::UseNameContext* Fortran90Parser::RenameContext::useName() {
  return getRuleContext<Fortran90Parser::UseNameContext>(0);
}


size_t Fortran90Parser::RenameContext::getRuleIndex() const {
  return Fortran90Parser::RuleRename;
}

void Fortran90Parser::RenameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRename(this);
}

void Fortran90Parser::RenameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRename(this);
}

Fortran90Parser::RenameContext* Fortran90Parser::rename() {
  RenameContext *_localctx = _tracker.createInstance<RenameContext>(_ctx, getState());
  enterRule(_localctx, 26, Fortran90Parser::RuleRename);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(805);
    ident();
    setState(806);
    match(Fortran90Parser::IMPLIEDT);
    setState(807);
    useName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseNameContext ------------------------------------------------------------------

Fortran90Parser::UseNameContext::UseNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::IdentContext* Fortran90Parser::UseNameContext::ident() {
  return getRuleContext<Fortran90Parser::IdentContext>(0);
}


size_t Fortran90Parser::UseNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleUseName;
}

void Fortran90Parser::UseNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUseName(this);
}

void Fortran90Parser::UseNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUseName(this);
}

Fortran90Parser::UseNameContext* Fortran90Parser::useName() {
  UseNameContext *_localctx = _tracker.createInstance<UseNameContext>(_ctx, getState());
  enterRule(_localctx, 28, Fortran90Parser::RuleUseName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(809);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterStmtContext ------------------------------------------------------------------

Fortran90Parser::ParameterStmtContext::ParameterStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ParameterStmtContext::PARAMETER() {
  return getToken(Fortran90Parser::PARAMETER, 0);
}

tree::TerminalNode* Fortran90Parser::ParameterStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::NamedConstantDefListContext* Fortran90Parser::ParameterStmtContext::namedConstantDefList() {
  return getRuleContext<Fortran90Parser::NamedConstantDefListContext>(0);
}

tree::TerminalNode* Fortran90Parser::ParameterStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::ParameterStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleParameterStmt;
}

void Fortran90Parser::ParameterStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameterStmt(this);
}

void Fortran90Parser::ParameterStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameterStmt(this);
}

Fortran90Parser::ParameterStmtContext* Fortran90Parser::parameterStmt() {
  ParameterStmtContext *_localctx = _tracker.createInstance<ParameterStmtContext>(_ctx, getState());
  enterRule(_localctx, 30, Fortran90Parser::RuleParameterStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(811);
    match(Fortran90Parser::PARAMETER);
    setState(812);
    match(Fortran90Parser::LPAREN);
    setState(813);
    namedConstantDefList();
    setState(814);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedConstantDefListContext ------------------------------------------------------------------

Fortran90Parser::NamedConstantDefListContext::NamedConstantDefListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::NamedConstantDefContext *> Fortran90Parser::NamedConstantDefListContext::namedConstantDef() {
  return getRuleContexts<Fortran90Parser::NamedConstantDefContext>();
}

Fortran90Parser::NamedConstantDefContext* Fortran90Parser::NamedConstantDefListContext::namedConstantDef(size_t i) {
  return getRuleContext<Fortran90Parser::NamedConstantDefContext>(i);
}


size_t Fortran90Parser::NamedConstantDefListContext::getRuleIndex() const {
  return Fortran90Parser::RuleNamedConstantDefList;
}

void Fortran90Parser::NamedConstantDefListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedConstantDefList(this);
}

void Fortran90Parser::NamedConstantDefListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedConstantDefList(this);
}

Fortran90Parser::NamedConstantDefListContext* Fortran90Parser::namedConstantDefList() {
  NamedConstantDefListContext *_localctx = _tracker.createInstance<NamedConstantDefListContext>(_ctx, getState());
  enterRule(_localctx, 32, Fortran90Parser::RuleNamedConstantDefList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(817); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(816);
      namedConstantDef();
      setState(819); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedConstantDefContext ------------------------------------------------------------------

Fortran90Parser::NamedConstantDefContext::NamedConstantDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::NamedConstantDefContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::NamedConstantDefContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::NamedConstantDefContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::NamedConstantDefContext::getRuleIndex() const {
  return Fortran90Parser::RuleNamedConstantDef;
}

void Fortran90Parser::NamedConstantDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedConstantDef(this);
}

void Fortran90Parser::NamedConstantDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedConstantDef(this);
}

Fortran90Parser::NamedConstantDefContext* Fortran90Parser::namedConstantDef() {
  NamedConstantDefContext *_localctx = _tracker.createInstance<NamedConstantDefContext>(_ctx, getState());
  enterRule(_localctx, 34, Fortran90Parser::RuleNamedConstantDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(821);
    match(Fortran90Parser::NAME);
    setState(822);
    match(Fortran90Parser::ASSIGN);
    setState(823);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndProgramStmtContext ------------------------------------------------------------------

Fortran90Parser::EndProgramStmtContext::EndProgramStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EndProgramStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndProgramStmtContext::PROGRAM() {
  return getToken(Fortran90Parser::PROGRAM, 0);
}

tree::TerminalNode* Fortran90Parser::EndProgramStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::EndProgramStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndProgramStmt;
}

void Fortran90Parser::EndProgramStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndProgramStmt(this);
}

void Fortran90Parser::EndProgramStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndProgramStmt(this);
}

Fortran90Parser::EndProgramStmtContext* Fortran90Parser::endProgramStmt() {
  EndProgramStmtContext *_localctx = _tracker.createInstance<EndProgramStmtContext>(_ctx, getState());
  enterRule(_localctx, 36, Fortran90Parser::RuleEndProgramStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(831);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(825);
      match(Fortran90Parser::END);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(826);
      match(Fortran90Parser::END);
      setState(827);
      match(Fortran90Parser::PROGRAM);
      setState(829);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
      case 1: {
        setState(828);
        match(Fortran90Parser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockDataSubprogramContext ------------------------------------------------------------------

Fortran90Parser::BlockDataSubprogramContext::BlockDataSubprogramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::BlockDataStmtContext* Fortran90Parser::BlockDataSubprogramContext::blockDataStmt() {
  return getRuleContext<Fortran90Parser::BlockDataStmtContext>(0);
}

Fortran90Parser::BlockDataBodyContext* Fortran90Parser::BlockDataSubprogramContext::blockDataBody() {
  return getRuleContext<Fortran90Parser::BlockDataBodyContext>(0);
}

Fortran90Parser::EndBlockDataStmtContext* Fortran90Parser::BlockDataSubprogramContext::endBlockDataStmt() {
  return getRuleContext<Fortran90Parser::EndBlockDataStmtContext>(0);
}


size_t Fortran90Parser::BlockDataSubprogramContext::getRuleIndex() const {
  return Fortran90Parser::RuleBlockDataSubprogram;
}

void Fortran90Parser::BlockDataSubprogramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockDataSubprogram(this);
}

void Fortran90Parser::BlockDataSubprogramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockDataSubprogram(this);
}

Fortran90Parser::BlockDataSubprogramContext* Fortran90Parser::blockDataSubprogram() {
  BlockDataSubprogramContext *_localctx = _tracker.createInstance<BlockDataSubprogramContext>(_ctx, getState());
  enterRule(_localctx, 38, Fortran90Parser::RuleBlockDataSubprogram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(840);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(833);
      blockDataStmt();
      setState(834);
      blockDataBody(0);
      setState(835);
      endBlockDataStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(837);
      blockDataStmt();
      setState(838);
      endBlockDataStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockDataStmtContext ------------------------------------------------------------------

Fortran90Parser::BlockDataStmtContext::BlockDataStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::BlockDataStmtContext::BLOCKDATA() {
  return getToken(Fortran90Parser::BLOCKDATA, 0);
}

tree::TerminalNode* Fortran90Parser::BlockDataStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::BlockDataStmtContext::BLOCK() {
  return getToken(Fortran90Parser::BLOCK, 0);
}

tree::TerminalNode* Fortran90Parser::BlockDataStmtContext::DATA() {
  return getToken(Fortran90Parser::DATA, 0);
}


size_t Fortran90Parser::BlockDataStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleBlockDataStmt;
}

void Fortran90Parser::BlockDataStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockDataStmt(this);
}

void Fortran90Parser::BlockDataStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockDataStmt(this);
}

Fortran90Parser::BlockDataStmtContext* Fortran90Parser::blockDataStmt() {
  BlockDataStmtContext *_localctx = _tracker.createInstance<BlockDataStmtContext>(_ctx, getState());
  enterRule(_localctx, 40, Fortran90Parser::RuleBlockDataStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(851);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::BLOCKDATA: {
        enterOuterAlt(_localctx, 1);
        setState(842);
        match(Fortran90Parser::BLOCKDATA);
        setState(844);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Fortran90Parser::NAME) {
          setState(843);
          match(Fortran90Parser::NAME);
        }
        break;
      }

      case Fortran90Parser::BLOCK: {
        enterOuterAlt(_localctx, 2);
        setState(846);
        match(Fortran90Parser::BLOCK);
        setState(847);
        match(Fortran90Parser::DATA);
        setState(849);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Fortran90Parser::NAME) {
          setState(848);
          match(Fortran90Parser::NAME);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockDataBodyContext ------------------------------------------------------------------

Fortran90Parser::BlockDataBodyContext::BlockDataBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::BlockDataBodyConstructContext* Fortran90Parser::BlockDataBodyContext::blockDataBodyConstruct() {
  return getRuleContext<Fortran90Parser::BlockDataBodyConstructContext>(0);
}

Fortran90Parser::BlockDataBodyContext* Fortran90Parser::BlockDataBodyContext::blockDataBody() {
  return getRuleContext<Fortran90Parser::BlockDataBodyContext>(0);
}


size_t Fortran90Parser::BlockDataBodyContext::getRuleIndex() const {
  return Fortran90Parser::RuleBlockDataBody;
}

void Fortran90Parser::BlockDataBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockDataBody(this);
}

void Fortran90Parser::BlockDataBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockDataBody(this);
}


Fortran90Parser::BlockDataBodyContext* Fortran90Parser::blockDataBody() {
   return blockDataBody(0);
}

Fortran90Parser::BlockDataBodyContext* Fortran90Parser::blockDataBody(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::BlockDataBodyContext *_localctx = _tracker.createInstance<BlockDataBodyContext>(_ctx, parentState);
  Fortran90Parser::BlockDataBodyContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 42;
  enterRecursionRule(_localctx, 42, Fortran90Parser::RuleBlockDataBody, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(854);
    blockDataBodyConstruct();
    _ctx->stop = _input->LT(-1);
    setState(860);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<BlockDataBodyContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBlockDataBody);
        setState(856);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(857);
        blockDataBodyConstruct(); 
      }
      setState(862);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BlockDataBodyConstructContext ------------------------------------------------------------------

Fortran90Parser::BlockDataBodyConstructContext::BlockDataBodyConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::SpecificationPartConstructContext* Fortran90Parser::BlockDataBodyConstructContext::specificationPartConstruct() {
  return getRuleContext<Fortran90Parser::SpecificationPartConstructContext>(0);
}


size_t Fortran90Parser::BlockDataBodyConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleBlockDataBodyConstruct;
}

void Fortran90Parser::BlockDataBodyConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockDataBodyConstruct(this);
}

void Fortran90Parser::BlockDataBodyConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockDataBodyConstruct(this);
}

Fortran90Parser::BlockDataBodyConstructContext* Fortran90Parser::blockDataBodyConstruct() {
  BlockDataBodyConstructContext *_localctx = _tracker.createInstance<BlockDataBodyConstructContext>(_ctx, getState());
  enterRule(_localctx, 44, Fortran90Parser::RuleBlockDataBodyConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(863);
    specificationPartConstruct();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndBlockDataStmtContext ------------------------------------------------------------------

Fortran90Parser::EndBlockDataStmtContext::EndBlockDataStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EndBlockDataStmtContext::ENDBLOCKDATA() {
  return getToken(Fortran90Parser::ENDBLOCKDATA, 0);
}

tree::TerminalNode* Fortran90Parser::EndBlockDataStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::EndBlockDataStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndBlockDataStmtContext::BLOCKDATA() {
  return getToken(Fortran90Parser::BLOCKDATA, 0);
}

tree::TerminalNode* Fortran90Parser::EndBlockDataStmtContext::ENDBLOCK() {
  return getToken(Fortran90Parser::ENDBLOCK, 0);
}

tree::TerminalNode* Fortran90Parser::EndBlockDataStmtContext::DATA() {
  return getToken(Fortran90Parser::DATA, 0);
}

tree::TerminalNode* Fortran90Parser::EndBlockDataStmtContext::BLOCK() {
  return getToken(Fortran90Parser::BLOCK, 0);
}


size_t Fortran90Parser::EndBlockDataStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndBlockDataStmt;
}

void Fortran90Parser::EndBlockDataStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndBlockDataStmt(this);
}

void Fortran90Parser::EndBlockDataStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndBlockDataStmt(this);
}

Fortran90Parser::EndBlockDataStmtContext* Fortran90Parser::endBlockDataStmt() {
  EndBlockDataStmtContext *_localctx = _tracker.createInstance<EndBlockDataStmtContext>(_ctx, getState());
  enterRule(_localctx, 46, Fortran90Parser::RuleEndBlockDataStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(886);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(865);
      match(Fortran90Parser::ENDBLOCKDATA);
      setState(867);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
      case 1: {
        setState(866);
        match(Fortran90Parser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(869);
      match(Fortran90Parser::END);
      setState(870);
      match(Fortran90Parser::BLOCKDATA);
      setState(872);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
      case 1: {
        setState(871);
        match(Fortran90Parser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(874);
      match(Fortran90Parser::ENDBLOCK);
      setState(875);
      match(Fortran90Parser::DATA);
      setState(877);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
      case 1: {
        setState(876);
        match(Fortran90Parser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(879);
      match(Fortran90Parser::END);
      setState(880);
      match(Fortran90Parser::BLOCK);
      setState(881);
      match(Fortran90Parser::DATA);
      setState(883);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
      case 1: {
        setState(882);
        match(Fortran90Parser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(885);
      match(Fortran90Parser::END);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormatStmtContext ------------------------------------------------------------------

Fortran90Parser::FormatStmtContext::FormatStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::FormatStmtContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}

tree::TerminalNode* Fortran90Parser::FormatStmtContext::FORMAT() {
  return getToken(Fortran90Parser::FORMAT, 0);
}

tree::TerminalNode* Fortran90Parser::FormatStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::FormatStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::FmtSpecContext* Fortran90Parser::FormatStmtContext::fmtSpec() {
  return getRuleContext<Fortran90Parser::FmtSpecContext>(0);
}


size_t Fortran90Parser::FormatStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleFormatStmt;
}

void Fortran90Parser::FormatStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormatStmt(this);
}

void Fortran90Parser::FormatStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormatStmt(this);
}

Fortran90Parser::FormatStmtContext* Fortran90Parser::formatStmt() {
  FormatStmtContext *_localctx = _tracker.createInstance<FormatStmtContext>(_ctx, getState());
  enterRule(_localctx, 48, Fortran90Parser::RuleFormatStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(888);
    match(Fortran90Parser::ICON);
    setState(889);
    match(Fortran90Parser::FORMAT);
    setState(890);
    match(Fortran90Parser::LPAREN);
    setState(892);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 123) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 123)) & 108086403404926977) != 0) || _la == Fortran90Parser::ICON

    || _la == Fortran90Parser::NAME) {
      setState(891);
      fmtSpec(0);
    }
    setState(894);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FmtSpecContext ------------------------------------------------------------------

Fortran90Parser::FmtSpecContext::FmtSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::FormateditContext* Fortran90Parser::FmtSpecContext::formatedit() {
  return getRuleContext<Fortran90Parser::FormateditContext>(0);
}

tree::TerminalNode* Fortran90Parser::FmtSpecContext::FORMATSEP() {
  return getToken(Fortran90Parser::FORMATSEP, 0);
}

Fortran90Parser::FmtSpecContext* Fortran90Parser::FmtSpecContext::fmtSpec() {
  return getRuleContext<Fortran90Parser::FmtSpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::FmtSpecContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}


size_t Fortran90Parser::FmtSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleFmtSpec;
}

void Fortran90Parser::FmtSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFmtSpec(this);
}

void Fortran90Parser::FmtSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFmtSpec(this);
}


Fortran90Parser::FmtSpecContext* Fortran90Parser::fmtSpec() {
   return fmtSpec(0);
}

Fortran90Parser::FmtSpecContext* Fortran90Parser::fmtSpec(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::FmtSpecContext *_localctx = _tracker.createInstance<FmtSpecContext>(_ctx, parentState);
  Fortran90Parser::FmtSpecContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 50;
  enterRecursionRule(_localctx, 50, Fortran90Parser::RuleFmtSpec, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(901);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(897);
      formatedit();
      break;
    }

    case 2: {
      setState(898);
      match(Fortran90Parser::FORMATSEP);
      break;
    }

    case 3: {
      setState(899);
      match(Fortran90Parser::FORMATSEP);
      setState(900);
      formatedit();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(920);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(918);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<FmtSpecContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleFmtSpec);
          setState(903);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(904);
          match(Fortran90Parser::FORMATSEP);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<FmtSpecContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleFmtSpec);
          setState(905);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(906);
          match(Fortran90Parser::FORMATSEP);
          setState(907);
          formatedit();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<FmtSpecContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleFmtSpec);
          setState(908);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(909);
          match(Fortran90Parser::COMMA);
          setState(910);
          formatedit();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<FmtSpecContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleFmtSpec);
          setState(911);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(912);
          match(Fortran90Parser::COMMA);
          setState(913);
          match(Fortran90Parser::FORMATSEP);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<FmtSpecContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleFmtSpec);
          setState(914);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(915);
          match(Fortran90Parser::COMMA);
          setState(916);
          match(Fortran90Parser::FORMATSEP);
          setState(917);
          formatedit();
          break;
        }

        default:
          break;
        } 
      }
      setState(922);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FormateditContext ------------------------------------------------------------------

Fortran90Parser::FormateditContext::FormateditContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::EditElementContext* Fortran90Parser::FormateditContext::editElement() {
  return getRuleContext<Fortran90Parser::EditElementContext>(0);
}

tree::TerminalNode* Fortran90Parser::FormateditContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}

tree::TerminalNode* Fortran90Parser::FormateditContext::XCON() {
  return getToken(Fortran90Parser::XCON, 0);
}

tree::TerminalNode* Fortran90Parser::FormateditContext::PCON() {
  return getToken(Fortran90Parser::PCON, 0);
}


size_t Fortran90Parser::FormateditContext::getRuleIndex() const {
  return Fortran90Parser::RuleFormatedit;
}

void Fortran90Parser::FormateditContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormatedit(this);
}

void Fortran90Parser::FormateditContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormatedit(this);
}

Fortran90Parser::FormateditContext* Fortran90Parser::formatedit() {
  FormateditContext *_localctx = _tracker.createInstance<FormateditContext>(_ctx, getState());
  enterRule(_localctx, 52, Fortran90Parser::RuleFormatedit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(933);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(923);
      editElement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(924);
      match(Fortran90Parser::ICON);
      setState(925);
      editElement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(926);
      match(Fortran90Parser::XCON);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(927);
      match(Fortran90Parser::PCON);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(928);
      match(Fortran90Parser::PCON);
      setState(929);
      editElement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(930);
      match(Fortran90Parser::PCON);
      setState(931);
      match(Fortran90Parser::ICON);
      setState(932);
      editElement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EditElementContext ------------------------------------------------------------------

Fortran90Parser::EditElementContext::EditElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EditElementContext::FCON() {
  return getToken(Fortran90Parser::FCON, 0);
}

Fortran90Parser::MislexedFconContext* Fortran90Parser::EditElementContext::mislexedFcon() {
  return getRuleContext<Fortran90Parser::MislexedFconContext>(0);
}

tree::TerminalNode* Fortran90Parser::EditElementContext::SCON() {
  return getToken(Fortran90Parser::SCON, 0);
}

tree::TerminalNode* Fortran90Parser::EditElementContext::HOLLERITH() {
  return getToken(Fortran90Parser::HOLLERITH, 0);
}

tree::TerminalNode* Fortran90Parser::EditElementContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::EditElementContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::FmtSpecContext* Fortran90Parser::EditElementContext::fmtSpec() {
  return getRuleContext<Fortran90Parser::FmtSpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::EditElementContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::EditElementContext::getRuleIndex() const {
  return Fortran90Parser::RuleEditElement;
}

void Fortran90Parser::EditElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEditElement(this);
}

void Fortran90Parser::EditElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEditElement(this);
}

Fortran90Parser::EditElementContext* Fortran90Parser::editElement() {
  EditElementContext *_localctx = _tracker.createInstance<EditElementContext>(_ctx, getState());
  enterRule(_localctx, 54, Fortran90Parser::RuleEditElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(944);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(935);
      match(Fortran90Parser::FCON);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(936);
      mislexedFcon();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(937);
      match(Fortran90Parser::SCON);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(938);
      match(Fortran90Parser::HOLLERITH);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(939);
      match(Fortran90Parser::NAME);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(940);
      match(Fortran90Parser::LPAREN);
      setState(941);
      fmtSpec(0);
      setState(942);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MislexedFconContext ------------------------------------------------------------------

Fortran90Parser::MislexedFconContext::MislexedFconContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Fortran90Parser::MislexedFconContext::RDCON() {
  return getTokens(Fortran90Parser::RDCON);
}

tree::TerminalNode* Fortran90Parser::MislexedFconContext::RDCON(size_t i) {
  return getToken(Fortran90Parser::RDCON, i);
}

tree::TerminalNode* Fortran90Parser::MislexedFconContext::SPOFF() {
  return getToken(Fortran90Parser::SPOFF, 0);
}

tree::TerminalNode* Fortran90Parser::MislexedFconContext::SPON() {
  return getToken(Fortran90Parser::SPON, 0);
}

tree::TerminalNode* Fortran90Parser::MislexedFconContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::MislexedFconContext::getRuleIndex() const {
  return Fortran90Parser::RuleMislexedFcon;
}

void Fortran90Parser::MislexedFconContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMislexedFcon(this);
}

void Fortran90Parser::MislexedFconContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMislexedFcon(this);
}

Fortran90Parser::MislexedFconContext* Fortran90Parser::mislexedFcon() {
  MislexedFconContext *_localctx = _tracker.createInstance<MislexedFconContext>(_ctx, getState());
  enterRule(_localctx, 56, Fortran90Parser::RuleMislexedFcon);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(954);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RDCON: {
        enterOuterAlt(_localctx, 1);
        setState(946);
        match(Fortran90Parser::RDCON);
        setState(947);
        match(Fortran90Parser::SPOFF);
        setState(948);
        match(Fortran90Parser::RDCON);
        setState(949);
        match(Fortran90Parser::SPON);
        break;
      }

      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 2);
        setState(950);
        match(Fortran90Parser::NAME);
        setState(951);
        match(Fortran90Parser::SPOFF);
        setState(952);
        match(Fortran90Parser::RDCON);
        setState(953);
        match(Fortran90Parser::SPON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleContext ------------------------------------------------------------------

Fortran90Parser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ModuleStmtContext* Fortran90Parser::ModuleContext::moduleStmt() {
  return getRuleContext<Fortran90Parser::ModuleStmtContext>(0);
}

Fortran90Parser::ModuleBodyContext* Fortran90Parser::ModuleContext::moduleBody() {
  return getRuleContext<Fortran90Parser::ModuleBodyContext>(0);
}

Fortran90Parser::EndModuleStmtContext* Fortran90Parser::ModuleContext::endModuleStmt() {
  return getRuleContext<Fortran90Parser::EndModuleStmtContext>(0);
}


size_t Fortran90Parser::ModuleContext::getRuleIndex() const {
  return Fortran90Parser::RuleModule;
}

void Fortran90Parser::ModuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule(this);
}

void Fortran90Parser::ModuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule(this);
}

Fortran90Parser::ModuleContext* Fortran90Parser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 58, Fortran90Parser::RuleModule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(963);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(956);
      moduleStmt();
      setState(957);
      moduleBody(0);
      setState(958);
      endModuleStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(960);
      moduleStmt();
      setState(961);
      endModuleStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndModuleStmtContext ------------------------------------------------------------------

Fortran90Parser::EndModuleStmtContext::EndModuleStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EndModuleStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndModuleStmtContext::MODULE() {
  return getToken(Fortran90Parser::MODULE, 0);
}

tree::TerminalNode* Fortran90Parser::EndModuleStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::EndModuleStmtContext::ENDMODULE() {
  return getToken(Fortran90Parser::ENDMODULE, 0);
}


size_t Fortran90Parser::EndModuleStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndModuleStmt;
}

void Fortran90Parser::EndModuleStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndModuleStmt(this);
}

void Fortran90Parser::EndModuleStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndModuleStmt(this);
}

Fortran90Parser::EndModuleStmtContext* Fortran90Parser::endModuleStmt() {
  EndModuleStmtContext *_localctx = _tracker.createInstance<EndModuleStmtContext>(_ctx, getState());
  enterRule(_localctx, 60, Fortran90Parser::RuleEndModuleStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(975);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(965);
      match(Fortran90Parser::END);
      setState(966);
      match(Fortran90Parser::MODULE);
      setState(968);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
      case 1: {
        setState(967);
        match(Fortran90Parser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(970);
      match(Fortran90Parser::ENDMODULE);
      setState(972);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
      case 1: {
        setState(971);
        match(Fortran90Parser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(974);
      match(Fortran90Parser::END);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EntryStmtContext ------------------------------------------------------------------

Fortran90Parser::EntryStmtContext::EntryStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EntryStmtContext::ENTRY() {
  return getToken(Fortran90Parser::ENTRY, 0);
}

std::vector<tree::TerminalNode *> Fortran90Parser::EntryStmtContext::NAME() {
  return getTokens(Fortran90Parser::NAME);
}

tree::TerminalNode* Fortran90Parser::EntryStmtContext::NAME(size_t i) {
  return getToken(Fortran90Parser::NAME, i);
}

Fortran90Parser::SubroutineParListContext* Fortran90Parser::EntryStmtContext::subroutineParList() {
  return getRuleContext<Fortran90Parser::SubroutineParListContext>(0);
}

tree::TerminalNode* Fortran90Parser::EntryStmtContext::RESULT() {
  return getToken(Fortran90Parser::RESULT, 0);
}

tree::TerminalNode* Fortran90Parser::EntryStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::EntryStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::EntryStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEntryStmt;
}

void Fortran90Parser::EntryStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntryStmt(this);
}

void Fortran90Parser::EntryStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntryStmt(this);
}

Fortran90Parser::EntryStmtContext* Fortran90Parser::entryStmt() {
  EntryStmtContext *_localctx = _tracker.createInstance<EntryStmtContext>(_ctx, getState());
  enterRule(_localctx, 62, Fortran90Parser::RuleEntryStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(977);
    match(Fortran90Parser::ENTRY);
    setState(978);
    match(Fortran90Parser::NAME);
    setState(979);
    subroutineParList();
    setState(980);
    match(Fortran90Parser::RESULT);
    setState(981);
    match(Fortran90Parser::LPAREN);
    setState(982);
    match(Fortran90Parser::NAME);
    setState(983);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineParListContext ------------------------------------------------------------------

Fortran90Parser::SubroutineParListContext::SubroutineParListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SubroutineParListContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::SubroutineParListContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::SubroutineParsContext* Fortran90Parser::SubroutineParListContext::subroutinePars() {
  return getRuleContext<Fortran90Parser::SubroutineParsContext>(0);
}


size_t Fortran90Parser::SubroutineParListContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubroutineParList;
}

void Fortran90Parser::SubroutineParListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutineParList(this);
}

void Fortran90Parser::SubroutineParListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutineParList(this);
}

Fortran90Parser::SubroutineParListContext* Fortran90Parser::subroutineParList() {
  SubroutineParListContext *_localctx = _tracker.createInstance<SubroutineParListContext>(_ctx, getState());
  enterRule(_localctx, 64, Fortran90Parser::RuleSubroutineParList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(990);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::LPAREN) {
      setState(985);
      match(Fortran90Parser::LPAREN);
      setState(987);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::NAME

      || _la == Fortran90Parser::STAR) {
        setState(986);
        subroutinePars();
      }
      setState(989);
      match(Fortran90Parser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineParsContext ------------------------------------------------------------------

Fortran90Parser::SubroutineParsContext::SubroutineParsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::SubroutineParContext *> Fortran90Parser::SubroutineParsContext::subroutinePar() {
  return getRuleContexts<Fortran90Parser::SubroutineParContext>();
}

Fortran90Parser::SubroutineParContext* Fortran90Parser::SubroutineParsContext::subroutinePar(size_t i) {
  return getRuleContext<Fortran90Parser::SubroutineParContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::SubroutineParsContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::SubroutineParsContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::SubroutineParsContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubroutinePars;
}

void Fortran90Parser::SubroutineParsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutinePars(this);
}

void Fortran90Parser::SubroutineParsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutinePars(this);
}

Fortran90Parser::SubroutineParsContext* Fortran90Parser::subroutinePars() {
  SubroutineParsContext *_localctx = _tracker.createInstance<SubroutineParsContext>(_ctx, getState());
  enterRule(_localctx, 66, Fortran90Parser::RuleSubroutinePars);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(992);
    subroutinePar();
    setState(997);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(993);
      match(Fortran90Parser::COMMA);
      setState(994);
      subroutinePar();
      setState(999);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineParContext ------------------------------------------------------------------

Fortran90Parser::SubroutineParContext::SubroutineParContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::DummyArgNameContext* Fortran90Parser::SubroutineParContext::dummyArgName() {
  return getRuleContext<Fortran90Parser::DummyArgNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::SubroutineParContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}


size_t Fortran90Parser::SubroutineParContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubroutinePar;
}

void Fortran90Parser::SubroutineParContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutinePar(this);
}

void Fortran90Parser::SubroutineParContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutinePar(this);
}

Fortran90Parser::SubroutineParContext* Fortran90Parser::subroutinePar() {
  SubroutineParContext *_localctx = _tracker.createInstance<SubroutineParContext>(_ctx, getState());
  enterRule(_localctx, 68, Fortran90Parser::RuleSubroutinePar);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1002);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1000);
        dummyArgName();
        break;
      }

      case Fortran90Parser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(1001);
        match(Fortran90Parser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationConstructContext ------------------------------------------------------------------

Fortran90Parser::DeclarationConstructContext::DeclarationConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::DerivedTypeDefContext* Fortran90Parser::DeclarationConstructContext::derivedTypeDef() {
  return getRuleContext<Fortran90Parser::DerivedTypeDefContext>(0);
}

Fortran90Parser::InterfaceBlockContext* Fortran90Parser::DeclarationConstructContext::interfaceBlock() {
  return getRuleContext<Fortran90Parser::InterfaceBlockContext>(0);
}

Fortran90Parser::TypeDeclarationStmtContext* Fortran90Parser::DeclarationConstructContext::typeDeclarationStmt() {
  return getRuleContext<Fortran90Parser::TypeDeclarationStmtContext>(0);
}

Fortran90Parser::SpecificationStmtContext* Fortran90Parser::DeclarationConstructContext::specificationStmt() {
  return getRuleContext<Fortran90Parser::SpecificationStmtContext>(0);
}


size_t Fortran90Parser::DeclarationConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleDeclarationConstruct;
}

void Fortran90Parser::DeclarationConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationConstruct(this);
}

void Fortran90Parser::DeclarationConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationConstruct(this);
}

Fortran90Parser::DeclarationConstructContext* Fortran90Parser::declarationConstruct() {
  DeclarationConstructContext *_localctx = _tracker.createInstance<DeclarationConstructContext>(_ctx, getState());
  enterRule(_localctx, 70, Fortran90Parser::RuleDeclarationConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1008);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1004);
      derivedTypeDef();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1005);
      interfaceBlock();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1006);
      typeDeclarationStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1007);
      specificationStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecificationStmtContext ------------------------------------------------------------------

Fortran90Parser::SpecificationStmtContext::SpecificationStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::CommonStmtContext* Fortran90Parser::SpecificationStmtContext::commonStmt() {
  return getRuleContext<Fortran90Parser::CommonStmtContext>(0);
}

Fortran90Parser::DataStmtContext* Fortran90Parser::SpecificationStmtContext::dataStmt() {
  return getRuleContext<Fortran90Parser::DataStmtContext>(0);
}

Fortran90Parser::DimensionStmtContext* Fortran90Parser::SpecificationStmtContext::dimensionStmt() {
  return getRuleContext<Fortran90Parser::DimensionStmtContext>(0);
}

Fortran90Parser::EquivalenceStmtContext* Fortran90Parser::SpecificationStmtContext::equivalenceStmt() {
  return getRuleContext<Fortran90Parser::EquivalenceStmtContext>(0);
}

Fortran90Parser::ExternalStmtContext* Fortran90Parser::SpecificationStmtContext::externalStmt() {
  return getRuleContext<Fortran90Parser::ExternalStmtContext>(0);
}

Fortran90Parser::IntrinsicStmtContext* Fortran90Parser::SpecificationStmtContext::intrinsicStmt() {
  return getRuleContext<Fortran90Parser::IntrinsicStmtContext>(0);
}

Fortran90Parser::SaveStmtContext* Fortran90Parser::SpecificationStmtContext::saveStmt() {
  return getRuleContext<Fortran90Parser::SaveStmtContext>(0);
}

Fortran90Parser::AccessStmtContext* Fortran90Parser::SpecificationStmtContext::accessStmt() {
  return getRuleContext<Fortran90Parser::AccessStmtContext>(0);
}

Fortran90Parser::AllocatableStmtContext* Fortran90Parser::SpecificationStmtContext::allocatableStmt() {
  return getRuleContext<Fortran90Parser::AllocatableStmtContext>(0);
}

Fortran90Parser::IntentStmtContext* Fortran90Parser::SpecificationStmtContext::intentStmt() {
  return getRuleContext<Fortran90Parser::IntentStmtContext>(0);
}

Fortran90Parser::NamelistStmtContext* Fortran90Parser::SpecificationStmtContext::namelistStmt() {
  return getRuleContext<Fortran90Parser::NamelistStmtContext>(0);
}

Fortran90Parser::OptionalStmtContext* Fortran90Parser::SpecificationStmtContext::optionalStmt() {
  return getRuleContext<Fortran90Parser::OptionalStmtContext>(0);
}

Fortran90Parser::PointerStmtContext* Fortran90Parser::SpecificationStmtContext::pointerStmt() {
  return getRuleContext<Fortran90Parser::PointerStmtContext>(0);
}

Fortran90Parser::TargetStmtContext* Fortran90Parser::SpecificationStmtContext::targetStmt() {
  return getRuleContext<Fortran90Parser::TargetStmtContext>(0);
}


size_t Fortran90Parser::SpecificationStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleSpecificationStmt;
}

void Fortran90Parser::SpecificationStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecificationStmt(this);
}

void Fortran90Parser::SpecificationStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecificationStmt(this);
}

Fortran90Parser::SpecificationStmtContext* Fortran90Parser::specificationStmt() {
  SpecificationStmtContext *_localctx = _tracker.createInstance<SpecificationStmtContext>(_ctx, getState());
  enterRule(_localctx, 72, Fortran90Parser::RuleSpecificationStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1024);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::COMMON: {
        enterOuterAlt(_localctx, 1);
        setState(1010);
        commonStmt();
        break;
      }

      case Fortran90Parser::DATA: {
        enterOuterAlt(_localctx, 2);
        setState(1011);
        dataStmt();
        break;
      }

      case Fortran90Parser::DIMENSION: {
        enterOuterAlt(_localctx, 3);
        setState(1012);
        dimensionStmt();
        break;
      }

      case Fortran90Parser::EQUIVALENCE: {
        enterOuterAlt(_localctx, 4);
        setState(1013);
        equivalenceStmt();
        break;
      }

      case Fortran90Parser::EXTERNAL: {
        enterOuterAlt(_localctx, 5);
        setState(1014);
        externalStmt();
        break;
      }

      case Fortran90Parser::INTRINSIC: {
        enterOuterAlt(_localctx, 6);
        setState(1015);
        intrinsicStmt();
        break;
      }

      case Fortran90Parser::SAVE: {
        enterOuterAlt(_localctx, 7);
        setState(1016);
        saveStmt();
        break;
      }

      case Fortran90Parser::ACCESSSPEC: {
        enterOuterAlt(_localctx, 8);
        setState(1017);
        accessStmt();
        break;
      }

      case Fortran90Parser::ALLOCATABLE: {
        enterOuterAlt(_localctx, 9);
        setState(1018);
        allocatableStmt();
        break;
      }

      case Fortran90Parser::INTENT: {
        enterOuterAlt(_localctx, 10);
        setState(1019);
        intentStmt();
        break;
      }

      case Fortran90Parser::NAMELIST: {
        enterOuterAlt(_localctx, 11);
        setState(1020);
        namelistStmt();
        break;
      }

      case Fortran90Parser::OPTIONAL: {
        enterOuterAlt(_localctx, 12);
        setState(1021);
        optionalStmt();
        break;
      }

      case Fortran90Parser::POINTER: {
        enterOuterAlt(_localctx, 13);
        setState(1022);
        pointerStmt();
        break;
      }

      case Fortran90Parser::TARGET: {
        enterOuterAlt(_localctx, 14);
        setState(1023);
        targetStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TargetStmtContext ------------------------------------------------------------------

Fortran90Parser::TargetStmtContext::TargetStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::TargetStmtContext::TARGET() {
  return getToken(Fortran90Parser::TARGET, 0);
}

Fortran90Parser::TargetObjectListContext* Fortran90Parser::TargetStmtContext::targetObjectList() {
  return getRuleContext<Fortran90Parser::TargetObjectListContext>(0);
}

tree::TerminalNode* Fortran90Parser::TargetStmtContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}


size_t Fortran90Parser::TargetStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleTargetStmt;
}

void Fortran90Parser::TargetStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTargetStmt(this);
}

void Fortran90Parser::TargetStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTargetStmt(this);
}

Fortran90Parser::TargetStmtContext* Fortran90Parser::targetStmt() {
  TargetStmtContext *_localctx = _tracker.createInstance<TargetStmtContext>(_ctx, getState());
  enterRule(_localctx, 74, Fortran90Parser::RuleTargetStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1026);
    match(Fortran90Parser::TARGET);
    setState(1028);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::DOUBLECOLON) {
      setState(1027);
      match(Fortran90Parser::DOUBLECOLON);
    }
    setState(1030);
    targetObjectList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TargetObjectListContext ------------------------------------------------------------------

Fortran90Parser::TargetObjectListContext::TargetObjectListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::TargetObjectContext *> Fortran90Parser::TargetObjectListContext::targetObject() {
  return getRuleContexts<Fortran90Parser::TargetObjectContext>();
}

Fortran90Parser::TargetObjectContext* Fortran90Parser::TargetObjectListContext::targetObject(size_t i) {
  return getRuleContext<Fortran90Parser::TargetObjectContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::TargetObjectListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::TargetObjectListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::TargetObjectListContext::getRuleIndex() const {
  return Fortran90Parser::RuleTargetObjectList;
}

void Fortran90Parser::TargetObjectListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTargetObjectList(this);
}

void Fortran90Parser::TargetObjectListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTargetObjectList(this);
}

Fortran90Parser::TargetObjectListContext* Fortran90Parser::targetObjectList() {
  TargetObjectListContext *_localctx = _tracker.createInstance<TargetObjectListContext>(_ctx, getState());
  enterRule(_localctx, 76, Fortran90Parser::RuleTargetObjectList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1032);
    targetObject();
    setState(1037);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1033);
        match(Fortran90Parser::COMMA);
        setState(1034);
        targetObject(); 
      }
      setState(1039);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TargetObjectContext ------------------------------------------------------------------

Fortran90Parser::TargetObjectContext::TargetObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ObjectNameContext* Fortran90Parser::TargetObjectContext::objectName() {
  return getRuleContext<Fortran90Parser::ObjectNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::TargetObjectContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ArraySpecContext* Fortran90Parser::TargetObjectContext::arraySpec() {
  return getRuleContext<Fortran90Parser::ArraySpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::TargetObjectContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::TargetObjectContext::getRuleIndex() const {
  return Fortran90Parser::RuleTargetObject;
}

void Fortran90Parser::TargetObjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTargetObject(this);
}

void Fortran90Parser::TargetObjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTargetObject(this);
}

Fortran90Parser::TargetObjectContext* Fortran90Parser::targetObject() {
  TargetObjectContext *_localctx = _tracker.createInstance<TargetObjectContext>(_ctx, getState());
  enterRule(_localctx, 78, Fortran90Parser::RuleTargetObject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1046);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1040);
      objectName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1041);
      objectName();
      setState(1042);
      match(Fortran90Parser::LPAREN);
      setState(1043);
      arraySpec();
      setState(1044);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerStmtContext ------------------------------------------------------------------

Fortran90Parser::PointerStmtContext::PointerStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::PointerStmtContext::POINTER() {
  return getToken(Fortran90Parser::POINTER, 0);
}

Fortran90Parser::PointerStmtObjectListContext* Fortran90Parser::PointerStmtContext::pointerStmtObjectList() {
  return getRuleContext<Fortran90Parser::PointerStmtObjectListContext>(0);
}

tree::TerminalNode* Fortran90Parser::PointerStmtContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}


size_t Fortran90Parser::PointerStmtContext::getRuleIndex() const {
  return Fortran90Parser::RulePointerStmt;
}

void Fortran90Parser::PointerStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointerStmt(this);
}

void Fortran90Parser::PointerStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointerStmt(this);
}

Fortran90Parser::PointerStmtContext* Fortran90Parser::pointerStmt() {
  PointerStmtContext *_localctx = _tracker.createInstance<PointerStmtContext>(_ctx, getState());
  enterRule(_localctx, 80, Fortran90Parser::RulePointerStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1048);
    match(Fortran90Parser::POINTER);
    setState(1050);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::DOUBLECOLON) {
      setState(1049);
      match(Fortran90Parser::DOUBLECOLON);
    }
    setState(1052);
    pointerStmtObjectList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerStmtObjectListContext ------------------------------------------------------------------

Fortran90Parser::PointerStmtObjectListContext::PointerStmtObjectListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::PointerStmtObjectContext *> Fortran90Parser::PointerStmtObjectListContext::pointerStmtObject() {
  return getRuleContexts<Fortran90Parser::PointerStmtObjectContext>();
}

Fortran90Parser::PointerStmtObjectContext* Fortran90Parser::PointerStmtObjectListContext::pointerStmtObject(size_t i) {
  return getRuleContext<Fortran90Parser::PointerStmtObjectContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::PointerStmtObjectListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::PointerStmtObjectListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::PointerStmtObjectListContext::getRuleIndex() const {
  return Fortran90Parser::RulePointerStmtObjectList;
}

void Fortran90Parser::PointerStmtObjectListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointerStmtObjectList(this);
}

void Fortran90Parser::PointerStmtObjectListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointerStmtObjectList(this);
}

Fortran90Parser::PointerStmtObjectListContext* Fortran90Parser::pointerStmtObjectList() {
  PointerStmtObjectListContext *_localctx = _tracker.createInstance<PointerStmtObjectListContext>(_ctx, getState());
  enterRule(_localctx, 82, Fortran90Parser::RulePointerStmtObjectList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1054);
    pointerStmtObject();
    setState(1059);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1055);
        match(Fortran90Parser::COMMA);
        setState(1056);
        pointerStmtObject(); 
      }
      setState(1061);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerStmtObjectContext ------------------------------------------------------------------

Fortran90Parser::PointerStmtObjectContext::PointerStmtObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ObjectNameContext* Fortran90Parser::PointerStmtObjectContext::objectName() {
  return getRuleContext<Fortran90Parser::ObjectNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::PointerStmtObjectContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::DeferredShapeSpecListContext* Fortran90Parser::PointerStmtObjectContext::deferredShapeSpecList() {
  return getRuleContext<Fortran90Parser::DeferredShapeSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::PointerStmtObjectContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::PointerStmtObjectContext::getRuleIndex() const {
  return Fortran90Parser::RulePointerStmtObject;
}

void Fortran90Parser::PointerStmtObjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointerStmtObject(this);
}

void Fortran90Parser::PointerStmtObjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointerStmtObject(this);
}

Fortran90Parser::PointerStmtObjectContext* Fortran90Parser::pointerStmtObject() {
  PointerStmtObjectContext *_localctx = _tracker.createInstance<PointerStmtObjectContext>(_ctx, getState());
  enterRule(_localctx, 84, Fortran90Parser::RulePointerStmtObject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1068);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1062);
      objectName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1063);
      objectName();
      setState(1064);
      match(Fortran90Parser::LPAREN);
      setState(1065);
      deferredShapeSpecList();
      setState(1066);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalStmtContext ------------------------------------------------------------------

Fortran90Parser::OptionalStmtContext::OptionalStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::OptionalStmtContext::OPTIONAL() {
  return getToken(Fortran90Parser::OPTIONAL, 0);
}

Fortran90Parser::OptionalParListContext* Fortran90Parser::OptionalStmtContext::optionalParList() {
  return getRuleContext<Fortran90Parser::OptionalParListContext>(0);
}

tree::TerminalNode* Fortran90Parser::OptionalStmtContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}


size_t Fortran90Parser::OptionalStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleOptionalStmt;
}

void Fortran90Parser::OptionalStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionalStmt(this);
}

void Fortran90Parser::OptionalStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionalStmt(this);
}

Fortran90Parser::OptionalStmtContext* Fortran90Parser::optionalStmt() {
  OptionalStmtContext *_localctx = _tracker.createInstance<OptionalStmtContext>(_ctx, getState());
  enterRule(_localctx, 86, Fortran90Parser::RuleOptionalStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1070);
    match(Fortran90Parser::OPTIONAL);
    setState(1072);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::DOUBLECOLON) {
      setState(1071);
      match(Fortran90Parser::DOUBLECOLON);
    }
    setState(1074);
    optionalParList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalParListContext ------------------------------------------------------------------

Fortran90Parser::OptionalParListContext::OptionalParListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::OptionalParContext *> Fortran90Parser::OptionalParListContext::optionalPar() {
  return getRuleContexts<Fortran90Parser::OptionalParContext>();
}

Fortran90Parser::OptionalParContext* Fortran90Parser::OptionalParListContext::optionalPar(size_t i) {
  return getRuleContext<Fortran90Parser::OptionalParContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::OptionalParListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::OptionalParListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::OptionalParListContext::getRuleIndex() const {
  return Fortran90Parser::RuleOptionalParList;
}

void Fortran90Parser::OptionalParListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionalParList(this);
}

void Fortran90Parser::OptionalParListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionalParList(this);
}

Fortran90Parser::OptionalParListContext* Fortran90Parser::optionalParList() {
  OptionalParListContext *_localctx = _tracker.createInstance<OptionalParListContext>(_ctx, getState());
  enterRule(_localctx, 88, Fortran90Parser::RuleOptionalParList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1076);
    optionalPar();
    setState(1081);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1077);
        match(Fortran90Parser::COMMA);
        setState(1078);
        optionalPar(); 
      }
      setState(1083);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalParContext ------------------------------------------------------------------

Fortran90Parser::OptionalParContext::OptionalParContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::DummyArgNameContext* Fortran90Parser::OptionalParContext::dummyArgName() {
  return getRuleContext<Fortran90Parser::DummyArgNameContext>(0);
}


size_t Fortran90Parser::OptionalParContext::getRuleIndex() const {
  return Fortran90Parser::RuleOptionalPar;
}

void Fortran90Parser::OptionalParContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionalPar(this);
}

void Fortran90Parser::OptionalParContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionalPar(this);
}

Fortran90Parser::OptionalParContext* Fortran90Parser::optionalPar() {
  OptionalParContext *_localctx = _tracker.createInstance<OptionalParContext>(_ctx, getState());
  enterRule(_localctx, 90, Fortran90Parser::RuleOptionalPar);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1084);
    dummyArgName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamelistStmtContext ------------------------------------------------------------------

Fortran90Parser::NamelistStmtContext::NamelistStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::NamelistStmtContext::NAMELIST() {
  return getToken(Fortran90Parser::NAMELIST, 0);
}

Fortran90Parser::NamelistGroupsContext* Fortran90Parser::NamelistStmtContext::namelistGroups() {
  return getRuleContext<Fortran90Parser::NamelistGroupsContext>(0);
}


size_t Fortran90Parser::NamelistStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleNamelistStmt;
}

void Fortran90Parser::NamelistStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamelistStmt(this);
}

void Fortran90Parser::NamelistStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamelistStmt(this);
}

Fortran90Parser::NamelistStmtContext* Fortran90Parser::namelistStmt() {
  NamelistStmtContext *_localctx = _tracker.createInstance<NamelistStmtContext>(_ctx, getState());
  enterRule(_localctx, 92, Fortran90Parser::RuleNamelistStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1086);
    match(Fortran90Parser::NAMELIST);
    setState(1087);
    namelistGroups(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamelistGroupsContext ------------------------------------------------------------------

Fortran90Parser::NamelistGroupsContext::NamelistGroupsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Fortran90Parser::NamelistGroupsContext::DIV() {
  return getTokens(Fortran90Parser::DIV);
}

tree::TerminalNode* Fortran90Parser::NamelistGroupsContext::DIV(size_t i) {
  return getToken(Fortran90Parser::DIV, i);
}

Fortran90Parser::NamelistGroupNameContext* Fortran90Parser::NamelistGroupsContext::namelistGroupName() {
  return getRuleContext<Fortran90Parser::NamelistGroupNameContext>(0);
}

Fortran90Parser::NamelistGroupObjectContext* Fortran90Parser::NamelistGroupsContext::namelistGroupObject() {
  return getRuleContext<Fortran90Parser::NamelistGroupObjectContext>(0);
}

Fortran90Parser::NamelistGroupsContext* Fortran90Parser::NamelistGroupsContext::namelistGroups() {
  return getRuleContext<Fortran90Parser::NamelistGroupsContext>(0);
}

tree::TerminalNode* Fortran90Parser::NamelistGroupsContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}


size_t Fortran90Parser::NamelistGroupsContext::getRuleIndex() const {
  return Fortran90Parser::RuleNamelistGroups;
}

void Fortran90Parser::NamelistGroupsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamelistGroups(this);
}

void Fortran90Parser::NamelistGroupsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamelistGroups(this);
}


Fortran90Parser::NamelistGroupsContext* Fortran90Parser::namelistGroups() {
   return namelistGroups(0);
}

Fortran90Parser::NamelistGroupsContext* Fortran90Parser::namelistGroups(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::NamelistGroupsContext *_localctx = _tracker.createInstance<NamelistGroupsContext>(_ctx, parentState);
  Fortran90Parser::NamelistGroupsContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 94;
  enterRecursionRule(_localctx, 94, Fortran90Parser::RuleNamelistGroups, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1090);
    match(Fortran90Parser::DIV);
    setState(1091);
    namelistGroupName();
    setState(1092);
    match(Fortran90Parser::DIV);
    setState(1093);
    namelistGroupObject();
    _ctx->stop = _input->LT(-1);
    setState(1113);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1111);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<NamelistGroupsContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNamelistGroups);
          setState(1095);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1096);
          match(Fortran90Parser::DIV);
          setState(1097);
          namelistGroupName();
          setState(1098);
          match(Fortran90Parser::DIV);
          setState(1099);
          namelistGroupObject();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<NamelistGroupsContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNamelistGroups);
          setState(1101);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1102);
          match(Fortran90Parser::COMMA);
          setState(1103);
          match(Fortran90Parser::DIV);
          setState(1104);
          namelistGroupName();
          setState(1105);
          match(Fortran90Parser::DIV);
          setState(1106);
          namelistGroupObject();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<NamelistGroupsContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNamelistGroups);
          setState(1108);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1109);
          match(Fortran90Parser::COMMA);
          setState(1110);
          namelistGroupObject();
          break;
        }

        default:
          break;
        } 
      }
      setState(1115);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- NamelistGroupNameContext ------------------------------------------------------------------

Fortran90Parser::NamelistGroupNameContext::NamelistGroupNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::NamelistGroupNameContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::NamelistGroupNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleNamelistGroupName;
}

void Fortran90Parser::NamelistGroupNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamelistGroupName(this);
}

void Fortran90Parser::NamelistGroupNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamelistGroupName(this);
}

Fortran90Parser::NamelistGroupNameContext* Fortran90Parser::namelistGroupName() {
  NamelistGroupNameContext *_localctx = _tracker.createInstance<NamelistGroupNameContext>(_ctx, getState());
  enterRule(_localctx, 96, Fortran90Parser::RuleNamelistGroupName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1116);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamelistGroupObjectContext ------------------------------------------------------------------

Fortran90Parser::NamelistGroupObjectContext::NamelistGroupObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::NamelistGroupObjectContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}


size_t Fortran90Parser::NamelistGroupObjectContext::getRuleIndex() const {
  return Fortran90Parser::RuleNamelistGroupObject;
}

void Fortran90Parser::NamelistGroupObjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamelistGroupObject(this);
}

void Fortran90Parser::NamelistGroupObjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamelistGroupObject(this);
}

Fortran90Parser::NamelistGroupObjectContext* Fortran90Parser::namelistGroupObject() {
  NamelistGroupObjectContext *_localctx = _tracker.createInstance<NamelistGroupObjectContext>(_ctx, getState());
  enterRule(_localctx, 98, Fortran90Parser::RuleNamelistGroupObject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1118);
    variableName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntentStmtContext ------------------------------------------------------------------

Fortran90Parser::IntentStmtContext::IntentStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::IntentStmtContext::INTENT() {
  return getToken(Fortran90Parser::INTENT, 0);
}

tree::TerminalNode* Fortran90Parser::IntentStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::IntentSpecContext* Fortran90Parser::IntentStmtContext::intentSpec() {
  return getRuleContext<Fortran90Parser::IntentSpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::IntentStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::IntentParListContext* Fortran90Parser::IntentStmtContext::intentParList() {
  return getRuleContext<Fortran90Parser::IntentParListContext>(0);
}

tree::TerminalNode* Fortran90Parser::IntentStmtContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}


size_t Fortran90Parser::IntentStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleIntentStmt;
}

void Fortran90Parser::IntentStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntentStmt(this);
}

void Fortran90Parser::IntentStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntentStmt(this);
}

Fortran90Parser::IntentStmtContext* Fortran90Parser::intentStmt() {
  IntentStmtContext *_localctx = _tracker.createInstance<IntentStmtContext>(_ctx, getState());
  enterRule(_localctx, 100, Fortran90Parser::RuleIntentStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1120);
    match(Fortran90Parser::INTENT);
    setState(1121);
    match(Fortran90Parser::LPAREN);
    setState(1122);
    intentSpec();
    setState(1123);
    match(Fortran90Parser::RPAREN);
    setState(1125);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::DOUBLECOLON) {
      setState(1124);
      match(Fortran90Parser::DOUBLECOLON);
    }
    setState(1127);
    intentParList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntentParListContext ------------------------------------------------------------------

Fortran90Parser::IntentParListContext::IntentParListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::IntentParContext *> Fortran90Parser::IntentParListContext::intentPar() {
  return getRuleContexts<Fortran90Parser::IntentParContext>();
}

Fortran90Parser::IntentParContext* Fortran90Parser::IntentParListContext::intentPar(size_t i) {
  return getRuleContext<Fortran90Parser::IntentParContext>(i);
}

tree::TerminalNode* Fortran90Parser::IntentParListContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}


size_t Fortran90Parser::IntentParListContext::getRuleIndex() const {
  return Fortran90Parser::RuleIntentParList;
}

void Fortran90Parser::IntentParListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntentParList(this);
}

void Fortran90Parser::IntentParListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntentParList(this);
}

Fortran90Parser::IntentParListContext* Fortran90Parser::intentParList() {
  IntentParListContext *_localctx = _tracker.createInstance<IntentParListContext>(_ctx, getState());
  enterRule(_localctx, 102, Fortran90Parser::RuleIntentParList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1129);
    intentPar();

    setState(1130);
    match(Fortran90Parser::COMMA);
    setState(1131);
    intentPar();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntentParContext ------------------------------------------------------------------

Fortran90Parser::IntentParContext::IntentParContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::DummyArgNameContext* Fortran90Parser::IntentParContext::dummyArgName() {
  return getRuleContext<Fortran90Parser::DummyArgNameContext>(0);
}


size_t Fortran90Parser::IntentParContext::getRuleIndex() const {
  return Fortran90Parser::RuleIntentPar;
}

void Fortran90Parser::IntentParContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntentPar(this);
}

void Fortran90Parser::IntentParContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntentPar(this);
}

Fortran90Parser::IntentParContext* Fortran90Parser::intentPar() {
  IntentParContext *_localctx = _tracker.createInstance<IntentParContext>(_ctx, getState());
  enterRule(_localctx, 104, Fortran90Parser::RuleIntentPar);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1133);
    dummyArgName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DummyArgNameContext ------------------------------------------------------------------

Fortran90Parser::DummyArgNameContext::DummyArgNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DummyArgNameContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::DummyArgNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleDummyArgName;
}

void Fortran90Parser::DummyArgNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDummyArgName(this);
}

void Fortran90Parser::DummyArgNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDummyArgName(this);
}

Fortran90Parser::DummyArgNameContext* Fortran90Parser::dummyArgName() {
  DummyArgNameContext *_localctx = _tracker.createInstance<DummyArgNameContext>(_ctx, getState());
  enterRule(_localctx, 106, Fortran90Parser::RuleDummyArgName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1135);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntentSpecContext ------------------------------------------------------------------

Fortran90Parser::IntentSpecContext::IntentSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::IntentSpecContext::IN() {
  return getToken(Fortran90Parser::IN, 0);
}

tree::TerminalNode* Fortran90Parser::IntentSpecContext::OUT() {
  return getToken(Fortran90Parser::OUT, 0);
}

tree::TerminalNode* Fortran90Parser::IntentSpecContext::INOUT() {
  return getToken(Fortran90Parser::INOUT, 0);
}


size_t Fortran90Parser::IntentSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleIntentSpec;
}

void Fortran90Parser::IntentSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntentSpec(this);
}

void Fortran90Parser::IntentSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntentSpec(this);
}

Fortran90Parser::IntentSpecContext* Fortran90Parser::intentSpec() {
  IntentSpecContext *_localctx = _tracker.createInstance<IntentSpecContext>(_ctx, getState());
  enterRule(_localctx, 108, Fortran90Parser::RuleIntentSpec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1137);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3670016) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocatableStmtContext ------------------------------------------------------------------

Fortran90Parser::AllocatableStmtContext::AllocatableStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::AllocatableStmtContext::ALLOCATABLE() {
  return getToken(Fortran90Parser::ALLOCATABLE, 0);
}

Fortran90Parser::ArrayAllocationListContext* Fortran90Parser::AllocatableStmtContext::arrayAllocationList() {
  return getRuleContext<Fortran90Parser::ArrayAllocationListContext>(0);
}

tree::TerminalNode* Fortran90Parser::AllocatableStmtContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}


size_t Fortran90Parser::AllocatableStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleAllocatableStmt;
}

void Fortran90Parser::AllocatableStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocatableStmt(this);
}

void Fortran90Parser::AllocatableStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocatableStmt(this);
}

Fortran90Parser::AllocatableStmtContext* Fortran90Parser::allocatableStmt() {
  AllocatableStmtContext *_localctx = _tracker.createInstance<AllocatableStmtContext>(_ctx, getState());
  enterRule(_localctx, 110, Fortran90Parser::RuleAllocatableStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1139);
    match(Fortran90Parser::ALLOCATABLE);
    setState(1141);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::DOUBLECOLON) {
      setState(1140);
      match(Fortran90Parser::DOUBLECOLON);
    }
    setState(1143);
    arrayAllocationList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAllocationListContext ------------------------------------------------------------------

Fortran90Parser::ArrayAllocationListContext::ArrayAllocationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ArrayAllocationContext *> Fortran90Parser::ArrayAllocationListContext::arrayAllocation() {
  return getRuleContexts<Fortran90Parser::ArrayAllocationContext>();
}

Fortran90Parser::ArrayAllocationContext* Fortran90Parser::ArrayAllocationListContext::arrayAllocation(size_t i) {
  return getRuleContext<Fortran90Parser::ArrayAllocationContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::ArrayAllocationListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::ArrayAllocationListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::ArrayAllocationListContext::getRuleIndex() const {
  return Fortran90Parser::RuleArrayAllocationList;
}

void Fortran90Parser::ArrayAllocationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayAllocationList(this);
}

void Fortran90Parser::ArrayAllocationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayAllocationList(this);
}

Fortran90Parser::ArrayAllocationListContext* Fortran90Parser::arrayAllocationList() {
  ArrayAllocationListContext *_localctx = _tracker.createInstance<ArrayAllocationListContext>(_ctx, getState());
  enterRule(_localctx, 112, Fortran90Parser::RuleArrayAllocationList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1145);
    arrayAllocation();
    setState(1150);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1146);
        match(Fortran90Parser::COMMA);
        setState(1147);
        arrayAllocation(); 
      }
      setState(1152);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAllocationContext ------------------------------------------------------------------

Fortran90Parser::ArrayAllocationContext::ArrayAllocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ArrayNameContext* Fortran90Parser::ArrayAllocationContext::arrayName() {
  return getRuleContext<Fortran90Parser::ArrayNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::ArrayAllocationContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::DeferredShapeSpecListContext* Fortran90Parser::ArrayAllocationContext::deferredShapeSpecList() {
  return getRuleContext<Fortran90Parser::DeferredShapeSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::ArrayAllocationContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::ArrayAllocationContext::getRuleIndex() const {
  return Fortran90Parser::RuleArrayAllocation;
}

void Fortran90Parser::ArrayAllocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayAllocation(this);
}

void Fortran90Parser::ArrayAllocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayAllocation(this);
}

Fortran90Parser::ArrayAllocationContext* Fortran90Parser::arrayAllocation() {
  ArrayAllocationContext *_localctx = _tracker.createInstance<ArrayAllocationContext>(_ctx, getState());
  enterRule(_localctx, 114, Fortran90Parser::RuleArrayAllocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1159);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1153);
      arrayName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1154);
      arrayName();
      setState(1155);
      match(Fortran90Parser::LPAREN);
      setState(1156);
      deferredShapeSpecList();
      setState(1157);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayNameContext ------------------------------------------------------------------

Fortran90Parser::ArrayNameContext::ArrayNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::IdentContext* Fortran90Parser::ArrayNameContext::ident() {
  return getRuleContext<Fortran90Parser::IdentContext>(0);
}


size_t Fortran90Parser::ArrayNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleArrayName;
}

void Fortran90Parser::ArrayNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayName(this);
}

void Fortran90Parser::ArrayNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayName(this);
}

Fortran90Parser::ArrayNameContext* Fortran90Parser::arrayName() {
  ArrayNameContext *_localctx = _tracker.createInstance<ArrayNameContext>(_ctx, getState());
  enterRule(_localctx, 116, Fortran90Parser::RuleArrayName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1161);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AccessStmtContext ------------------------------------------------------------------

Fortran90Parser::AccessStmtContext::AccessStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::AccessStmtContext::ACCESSSPEC() {
  return getToken(Fortran90Parser::ACCESSSPEC, 0);
}

Fortran90Parser::AccessIdListContext* Fortran90Parser::AccessStmtContext::accessIdList() {
  return getRuleContext<Fortran90Parser::AccessIdListContext>(0);
}

tree::TerminalNode* Fortran90Parser::AccessStmtContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}


size_t Fortran90Parser::AccessStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleAccessStmt;
}

void Fortran90Parser::AccessStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessStmt(this);
}

void Fortran90Parser::AccessStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessStmt(this);
}

Fortran90Parser::AccessStmtContext* Fortran90Parser::accessStmt() {
  AccessStmtContext *_localctx = _tracker.createInstance<AccessStmtContext>(_ctx, getState());
  enterRule(_localctx, 118, Fortran90Parser::RuleAccessStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1169);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1163);
      match(Fortran90Parser::ACCESSSPEC);
      setState(1165);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::DOUBLECOLON) {
        setState(1164);
        match(Fortran90Parser::DOUBLECOLON);
      }
      setState(1167);
      accessIdList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1168);
      match(Fortran90Parser::ACCESSSPEC);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AccessIdListContext ------------------------------------------------------------------

Fortran90Parser::AccessIdListContext::AccessIdListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::AccessIdContext *> Fortran90Parser::AccessIdListContext::accessId() {
  return getRuleContexts<Fortran90Parser::AccessIdContext>();
}

Fortran90Parser::AccessIdContext* Fortran90Parser::AccessIdListContext::accessId(size_t i) {
  return getRuleContext<Fortran90Parser::AccessIdContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::AccessIdListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::AccessIdListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::AccessIdListContext::getRuleIndex() const {
  return Fortran90Parser::RuleAccessIdList;
}

void Fortran90Parser::AccessIdListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessIdList(this);
}

void Fortran90Parser::AccessIdListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessIdList(this);
}

Fortran90Parser::AccessIdListContext* Fortran90Parser::accessIdList() {
  AccessIdListContext *_localctx = _tracker.createInstance<AccessIdListContext>(_ctx, getState());
  enterRule(_localctx, 120, Fortran90Parser::RuleAccessIdList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1171);
    accessId();
    setState(1176);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1172);
        match(Fortran90Parser::COMMA);
        setState(1173);
        accessId(); 
      }
      setState(1178);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AccessIdContext ------------------------------------------------------------------

Fortran90Parser::AccessIdContext::AccessIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::GenericNameContext* Fortran90Parser::AccessIdContext::genericName() {
  return getRuleContext<Fortran90Parser::GenericNameContext>(0);
}

Fortran90Parser::GenericSpecContext* Fortran90Parser::AccessIdContext::genericSpec() {
  return getRuleContext<Fortran90Parser::GenericSpecContext>(0);
}


size_t Fortran90Parser::AccessIdContext::getRuleIndex() const {
  return Fortran90Parser::RuleAccessId;
}

void Fortran90Parser::AccessIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessId(this);
}

void Fortran90Parser::AccessIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessId(this);
}

Fortran90Parser::AccessIdContext* Fortran90Parser::accessId() {
  AccessIdContext *_localctx = _tracker.createInstance<AccessIdContext>(_ctx, getState());
  enterRule(_localctx, 122, Fortran90Parser::RuleAccessId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1181);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1179);
        genericName();
        break;
      }

      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::ASSIGNMENT: {
        enterOuterAlt(_localctx, 2);
        setState(1180);
        genericSpec();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericNameContext ------------------------------------------------------------------

Fortran90Parser::GenericNameContext::GenericNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::IdentContext* Fortran90Parser::GenericNameContext::ident() {
  return getRuleContext<Fortran90Parser::IdentContext>(0);
}


size_t Fortran90Parser::GenericNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleGenericName;
}

void Fortran90Parser::GenericNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenericName(this);
}

void Fortran90Parser::GenericNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenericName(this);
}

Fortran90Parser::GenericNameContext* Fortran90Parser::genericName() {
  GenericNameContext *_localctx = _tracker.createInstance<GenericNameContext>(_ctx, getState());
  enterRule(_localctx, 124, Fortran90Parser::RuleGenericName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1183);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SaveStmtContext ------------------------------------------------------------------

Fortran90Parser::SaveStmtContext::SaveStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SaveStmtContext::SAVE() {
  return getToken(Fortran90Parser::SAVE, 0);
}

Fortran90Parser::SavedEntityListContext* Fortran90Parser::SaveStmtContext::savedEntityList() {
  return getRuleContext<Fortran90Parser::SavedEntityListContext>(0);
}

tree::TerminalNode* Fortran90Parser::SaveStmtContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}


size_t Fortran90Parser::SaveStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleSaveStmt;
}

void Fortran90Parser::SaveStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSaveStmt(this);
}

void Fortran90Parser::SaveStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSaveStmt(this);
}

Fortran90Parser::SaveStmtContext* Fortran90Parser::saveStmt() {
  SaveStmtContext *_localctx = _tracker.createInstance<SaveStmtContext>(_ctx, getState());
  enterRule(_localctx, 126, Fortran90Parser::RuleSaveStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1191);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1185);
      match(Fortran90Parser::SAVE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1186);
      match(Fortran90Parser::SAVE);
      setState(1187);
      savedEntityList();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1188);
      match(Fortran90Parser::SAVE);
      setState(1189);
      match(Fortran90Parser::DOUBLECOLON);
      setState(1190);
      savedEntityList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SavedEntityListContext ------------------------------------------------------------------

Fortran90Parser::SavedEntityListContext::SavedEntityListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::SavedEntityContext *> Fortran90Parser::SavedEntityListContext::savedEntity() {
  return getRuleContexts<Fortran90Parser::SavedEntityContext>();
}

Fortran90Parser::SavedEntityContext* Fortran90Parser::SavedEntityListContext::savedEntity(size_t i) {
  return getRuleContext<Fortran90Parser::SavedEntityContext>(i);
}


size_t Fortran90Parser::SavedEntityListContext::getRuleIndex() const {
  return Fortran90Parser::RuleSavedEntityList;
}

void Fortran90Parser::SavedEntityListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSavedEntityList(this);
}

void Fortran90Parser::SavedEntityListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSavedEntityList(this);
}

Fortran90Parser::SavedEntityListContext* Fortran90Parser::savedEntityList() {
  SavedEntityListContext *_localctx = _tracker.createInstance<SavedEntityListContext>(_ctx, getState());
  enterRule(_localctx, 128, Fortran90Parser::RuleSavedEntityList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1194); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1193);
              savedEntity();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1196); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SavedEntityContext ------------------------------------------------------------------

Fortran90Parser::SavedEntityContext::SavedEntityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::SavedEntityContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}

Fortran90Parser::SavedCommonBlockContext* Fortran90Parser::SavedEntityContext::savedCommonBlock() {
  return getRuleContext<Fortran90Parser::SavedCommonBlockContext>(0);
}


size_t Fortran90Parser::SavedEntityContext::getRuleIndex() const {
  return Fortran90Parser::RuleSavedEntity;
}

void Fortran90Parser::SavedEntityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSavedEntity(this);
}

void Fortran90Parser::SavedEntityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSavedEntity(this);
}

Fortran90Parser::SavedEntityContext* Fortran90Parser::savedEntity() {
  SavedEntityContext *_localctx = _tracker.createInstance<SavedEntityContext>(_ctx, getState());
  enterRule(_localctx, 130, Fortran90Parser::RuleSavedEntity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1200);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1198);
        variableName();
        break;
      }

      case Fortran90Parser::DIV: {
        enterOuterAlt(_localctx, 2);
        setState(1199);
        savedCommonBlock();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SavedCommonBlockContext ------------------------------------------------------------------

Fortran90Parser::SavedCommonBlockContext::SavedCommonBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Fortran90Parser::SavedCommonBlockContext::DIV() {
  return getTokens(Fortran90Parser::DIV);
}

tree::TerminalNode* Fortran90Parser::SavedCommonBlockContext::DIV(size_t i) {
  return getToken(Fortran90Parser::DIV, i);
}

Fortran90Parser::CommonBlockNameContext* Fortran90Parser::SavedCommonBlockContext::commonBlockName() {
  return getRuleContext<Fortran90Parser::CommonBlockNameContext>(0);
}


size_t Fortran90Parser::SavedCommonBlockContext::getRuleIndex() const {
  return Fortran90Parser::RuleSavedCommonBlock;
}

void Fortran90Parser::SavedCommonBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSavedCommonBlock(this);
}

void Fortran90Parser::SavedCommonBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSavedCommonBlock(this);
}

Fortran90Parser::SavedCommonBlockContext* Fortran90Parser::savedCommonBlock() {
  SavedCommonBlockContext *_localctx = _tracker.createInstance<SavedCommonBlockContext>(_ctx, getState());
  enterRule(_localctx, 132, Fortran90Parser::RuleSavedCommonBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1202);
    match(Fortran90Parser::DIV);
    setState(1203);
    commonBlockName();
    setState(1204);
    match(Fortran90Parser::DIV);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntrinsicStmtContext ------------------------------------------------------------------

Fortran90Parser::IntrinsicStmtContext::IntrinsicStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::IntrinsicStmtContext::INTRINSIC() {
  return getToken(Fortran90Parser::INTRINSIC, 0);
}

Fortran90Parser::IntrinsicListContext* Fortran90Parser::IntrinsicStmtContext::intrinsicList() {
  return getRuleContext<Fortran90Parser::IntrinsicListContext>(0);
}


size_t Fortran90Parser::IntrinsicStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleIntrinsicStmt;
}

void Fortran90Parser::IntrinsicStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntrinsicStmt(this);
}

void Fortran90Parser::IntrinsicStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntrinsicStmt(this);
}

Fortran90Parser::IntrinsicStmtContext* Fortran90Parser::intrinsicStmt() {
  IntrinsicStmtContext *_localctx = _tracker.createInstance<IntrinsicStmtContext>(_ctx, getState());
  enterRule(_localctx, 134, Fortran90Parser::RuleIntrinsicStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1206);
    match(Fortran90Parser::INTRINSIC);
    setState(1207);
    intrinsicList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntrinsicListContext ------------------------------------------------------------------

Fortran90Parser::IntrinsicListContext::IntrinsicListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::IntrinsicProcedureNameContext *> Fortran90Parser::IntrinsicListContext::intrinsicProcedureName() {
  return getRuleContexts<Fortran90Parser::IntrinsicProcedureNameContext>();
}

Fortran90Parser::IntrinsicProcedureNameContext* Fortran90Parser::IntrinsicListContext::intrinsicProcedureName(size_t i) {
  return getRuleContext<Fortran90Parser::IntrinsicProcedureNameContext>(i);
}


size_t Fortran90Parser::IntrinsicListContext::getRuleIndex() const {
  return Fortran90Parser::RuleIntrinsicList;
}

void Fortran90Parser::IntrinsicListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntrinsicList(this);
}

void Fortran90Parser::IntrinsicListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntrinsicList(this);
}

Fortran90Parser::IntrinsicListContext* Fortran90Parser::intrinsicList() {
  IntrinsicListContext *_localctx = _tracker.createInstance<IntrinsicListContext>(_ctx, getState());
  enterRule(_localctx, 136, Fortran90Parser::RuleIntrinsicList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1210); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1209);
              intrinsicProcedureName();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1212); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntrinsicProcedureNameContext ------------------------------------------------------------------

Fortran90Parser::IntrinsicProcedureNameContext::IntrinsicProcedureNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::IntrinsicProcedureNameContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::IntrinsicProcedureNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleIntrinsicProcedureName;
}

void Fortran90Parser::IntrinsicProcedureNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntrinsicProcedureName(this);
}

void Fortran90Parser::IntrinsicProcedureNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntrinsicProcedureName(this);
}

Fortran90Parser::IntrinsicProcedureNameContext* Fortran90Parser::intrinsicProcedureName() {
  IntrinsicProcedureNameContext *_localctx = _tracker.createInstance<IntrinsicProcedureNameContext>(_ctx, getState());
  enterRule(_localctx, 138, Fortran90Parser::RuleIntrinsicProcedureName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1214);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternalStmtContext ------------------------------------------------------------------

Fortran90Parser::ExternalStmtContext::ExternalStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ExternalStmtContext::EXTERNAL() {
  return getToken(Fortran90Parser::EXTERNAL, 0);
}

Fortran90Parser::ExternalNameListContext* Fortran90Parser::ExternalStmtContext::externalNameList() {
  return getRuleContext<Fortran90Parser::ExternalNameListContext>(0);
}


size_t Fortran90Parser::ExternalStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleExternalStmt;
}

void Fortran90Parser::ExternalStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExternalStmt(this);
}

void Fortran90Parser::ExternalStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExternalStmt(this);
}

Fortran90Parser::ExternalStmtContext* Fortran90Parser::externalStmt() {
  ExternalStmtContext *_localctx = _tracker.createInstance<ExternalStmtContext>(_ctx, getState());
  enterRule(_localctx, 140, Fortran90Parser::RuleExternalStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1216);
    match(Fortran90Parser::EXTERNAL);
    setState(1217);
    externalNameList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternalNameListContext ------------------------------------------------------------------

Fortran90Parser::ExternalNameListContext::ExternalNameListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ExternalNameContext *> Fortran90Parser::ExternalNameListContext::externalName() {
  return getRuleContexts<Fortran90Parser::ExternalNameContext>();
}

Fortran90Parser::ExternalNameContext* Fortran90Parser::ExternalNameListContext::externalName(size_t i) {
  return getRuleContext<Fortran90Parser::ExternalNameContext>(i);
}


size_t Fortran90Parser::ExternalNameListContext::getRuleIndex() const {
  return Fortran90Parser::RuleExternalNameList;
}

void Fortran90Parser::ExternalNameListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExternalNameList(this);
}

void Fortran90Parser::ExternalNameListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExternalNameList(this);
}

Fortran90Parser::ExternalNameListContext* Fortran90Parser::externalNameList() {
  ExternalNameListContext *_localctx = _tracker.createInstance<ExternalNameListContext>(_ctx, getState());
  enterRule(_localctx, 142, Fortran90Parser::RuleExternalNameList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1220); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1219);
              externalName();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1222); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternalNameContext ------------------------------------------------------------------

Fortran90Parser::ExternalNameContext::ExternalNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ExternalNameContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::ExternalNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleExternalName;
}

void Fortran90Parser::ExternalNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExternalName(this);
}

void Fortran90Parser::ExternalNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExternalName(this);
}

Fortran90Parser::ExternalNameContext* Fortran90Parser::externalName() {
  ExternalNameContext *_localctx = _tracker.createInstance<ExternalNameContext>(_ctx, getState());
  enterRule(_localctx, 144, Fortran90Parser::RuleExternalName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1224);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EquivalenceStmtContext ------------------------------------------------------------------

Fortran90Parser::EquivalenceStmtContext::EquivalenceStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EquivalenceStmtContext::EQUIVALENCE() {
  return getToken(Fortran90Parser::EQUIVALENCE, 0);
}

Fortran90Parser::EquivalenceSetListContext* Fortran90Parser::EquivalenceStmtContext::equivalenceSetList() {
  return getRuleContext<Fortran90Parser::EquivalenceSetListContext>(0);
}


size_t Fortran90Parser::EquivalenceStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEquivalenceStmt;
}

void Fortran90Parser::EquivalenceStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEquivalenceStmt(this);
}

void Fortran90Parser::EquivalenceStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEquivalenceStmt(this);
}

Fortran90Parser::EquivalenceStmtContext* Fortran90Parser::equivalenceStmt() {
  EquivalenceStmtContext *_localctx = _tracker.createInstance<EquivalenceStmtContext>(_ctx, getState());
  enterRule(_localctx, 146, Fortran90Parser::RuleEquivalenceStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1226);
    match(Fortran90Parser::EQUIVALENCE);
    setState(1227);
    equivalenceSetList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EquivalenceSetListContext ------------------------------------------------------------------

Fortran90Parser::EquivalenceSetListContext::EquivalenceSetListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::EquivalenceSetContext *> Fortran90Parser::EquivalenceSetListContext::equivalenceSet() {
  return getRuleContexts<Fortran90Parser::EquivalenceSetContext>();
}

Fortran90Parser::EquivalenceSetContext* Fortran90Parser::EquivalenceSetListContext::equivalenceSet(size_t i) {
  return getRuleContext<Fortran90Parser::EquivalenceSetContext>(i);
}


size_t Fortran90Parser::EquivalenceSetListContext::getRuleIndex() const {
  return Fortran90Parser::RuleEquivalenceSetList;
}

void Fortran90Parser::EquivalenceSetListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEquivalenceSetList(this);
}

void Fortran90Parser::EquivalenceSetListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEquivalenceSetList(this);
}

Fortran90Parser::EquivalenceSetListContext* Fortran90Parser::equivalenceSetList() {
  EquivalenceSetListContext *_localctx = _tracker.createInstance<EquivalenceSetListContext>(_ctx, getState());
  enterRule(_localctx, 148, Fortran90Parser::RuleEquivalenceSetList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1230); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1229);
              equivalenceSet();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1232); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EquivalenceSetContext ------------------------------------------------------------------

Fortran90Parser::EquivalenceSetContext::EquivalenceSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EquivalenceSetContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::EquivalenceObjectContext* Fortran90Parser::EquivalenceSetContext::equivalenceObject() {
  return getRuleContext<Fortran90Parser::EquivalenceObjectContext>(0);
}

tree::TerminalNode* Fortran90Parser::EquivalenceSetContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::EquivalenceObjectListContext* Fortran90Parser::EquivalenceSetContext::equivalenceObjectList() {
  return getRuleContext<Fortran90Parser::EquivalenceObjectListContext>(0);
}

tree::TerminalNode* Fortran90Parser::EquivalenceSetContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::EquivalenceSetContext::getRuleIndex() const {
  return Fortran90Parser::RuleEquivalenceSet;
}

void Fortran90Parser::EquivalenceSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEquivalenceSet(this);
}

void Fortran90Parser::EquivalenceSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEquivalenceSet(this);
}

Fortran90Parser::EquivalenceSetContext* Fortran90Parser::equivalenceSet() {
  EquivalenceSetContext *_localctx = _tracker.createInstance<EquivalenceSetContext>(_ctx, getState());
  enterRule(_localctx, 150, Fortran90Parser::RuleEquivalenceSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1234);
    match(Fortran90Parser::LPAREN);
    setState(1235);
    equivalenceObject();
    setState(1236);
    match(Fortran90Parser::COMMA);
    setState(1237);
    equivalenceObjectList();
    setState(1238);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EquivalenceObjectContext ------------------------------------------------------------------

Fortran90Parser::EquivalenceObjectContext::EquivalenceObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableContext* Fortran90Parser::EquivalenceObjectContext::variable() {
  return getRuleContext<Fortran90Parser::VariableContext>(0);
}


size_t Fortran90Parser::EquivalenceObjectContext::getRuleIndex() const {
  return Fortran90Parser::RuleEquivalenceObject;
}

void Fortran90Parser::EquivalenceObjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEquivalenceObject(this);
}

void Fortran90Parser::EquivalenceObjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEquivalenceObject(this);
}

Fortran90Parser::EquivalenceObjectContext* Fortran90Parser::equivalenceObject() {
  EquivalenceObjectContext *_localctx = _tracker.createInstance<EquivalenceObjectContext>(_ctx, getState());
  enterRule(_localctx, 152, Fortran90Parser::RuleEquivalenceObject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1240);
    variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EquivalenceObjectListContext ------------------------------------------------------------------

Fortran90Parser::EquivalenceObjectListContext::EquivalenceObjectListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::EquivalenceObjectContext *> Fortran90Parser::EquivalenceObjectListContext::equivalenceObject() {
  return getRuleContexts<Fortran90Parser::EquivalenceObjectContext>();
}

Fortran90Parser::EquivalenceObjectContext* Fortran90Parser::EquivalenceObjectListContext::equivalenceObject(size_t i) {
  return getRuleContext<Fortran90Parser::EquivalenceObjectContext>(i);
}


size_t Fortran90Parser::EquivalenceObjectListContext::getRuleIndex() const {
  return Fortran90Parser::RuleEquivalenceObjectList;
}

void Fortran90Parser::EquivalenceObjectListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEquivalenceObjectList(this);
}

void Fortran90Parser::EquivalenceObjectListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEquivalenceObjectList(this);
}

Fortran90Parser::EquivalenceObjectListContext* Fortran90Parser::equivalenceObjectList() {
  EquivalenceObjectListContext *_localctx = _tracker.createInstance<EquivalenceObjectListContext>(_ctx, getState());
  enterRule(_localctx, 154, Fortran90Parser::RuleEquivalenceObjectList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1243); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1242);
      equivalenceObject();
      setState(1245); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimensionStmtContext ------------------------------------------------------------------

Fortran90Parser::DimensionStmtContext::DimensionStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DimensionStmtContext::DIMENSION() {
  return getToken(Fortran90Parser::DIMENSION, 0);
}

Fortran90Parser::ArrayDeclaratorListContext* Fortran90Parser::DimensionStmtContext::arrayDeclaratorList() {
  return getRuleContext<Fortran90Parser::ArrayDeclaratorListContext>(0);
}

tree::TerminalNode* Fortran90Parser::DimensionStmtContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}


size_t Fortran90Parser::DimensionStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleDimensionStmt;
}

void Fortran90Parser::DimensionStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDimensionStmt(this);
}

void Fortran90Parser::DimensionStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDimensionStmt(this);
}

Fortran90Parser::DimensionStmtContext* Fortran90Parser::dimensionStmt() {
  DimensionStmtContext *_localctx = _tracker.createInstance<DimensionStmtContext>(_ctx, getState());
  enterRule(_localctx, 156, Fortran90Parser::RuleDimensionStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1252);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1247);
      match(Fortran90Parser::DIMENSION);
      setState(1248);
      arrayDeclaratorList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1249);
      match(Fortran90Parser::DIMENSION);
      setState(1250);
      match(Fortran90Parser::DOUBLECOLON);
      setState(1251);
      arrayDeclaratorList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayDeclaratorListContext ------------------------------------------------------------------

Fortran90Parser::ArrayDeclaratorListContext::ArrayDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ArrayDeclaratorContext *> Fortran90Parser::ArrayDeclaratorListContext::arrayDeclarator() {
  return getRuleContexts<Fortran90Parser::ArrayDeclaratorContext>();
}

Fortran90Parser::ArrayDeclaratorContext* Fortran90Parser::ArrayDeclaratorListContext::arrayDeclarator(size_t i) {
  return getRuleContext<Fortran90Parser::ArrayDeclaratorContext>(i);
}


size_t Fortran90Parser::ArrayDeclaratorListContext::getRuleIndex() const {
  return Fortran90Parser::RuleArrayDeclaratorList;
}

void Fortran90Parser::ArrayDeclaratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayDeclaratorList(this);
}

void Fortran90Parser::ArrayDeclaratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayDeclaratorList(this);
}

Fortran90Parser::ArrayDeclaratorListContext* Fortran90Parser::arrayDeclaratorList() {
  ArrayDeclaratorListContext *_localctx = _tracker.createInstance<ArrayDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 158, Fortran90Parser::RuleArrayDeclaratorList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1255); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1254);
              arrayDeclarator();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1257); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommonStmtContext ------------------------------------------------------------------

Fortran90Parser::CommonStmtContext::CommonStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CommonStmtContext::COMMON() {
  return getToken(Fortran90Parser::COMMON, 0);
}

Fortran90Parser::ComlistContext* Fortran90Parser::CommonStmtContext::comlist() {
  return getRuleContext<Fortran90Parser::ComlistContext>(0);
}


size_t Fortran90Parser::CommonStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleCommonStmt;
}

void Fortran90Parser::CommonStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommonStmt(this);
}

void Fortran90Parser::CommonStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommonStmt(this);
}

Fortran90Parser::CommonStmtContext* Fortran90Parser::commonStmt() {
  CommonStmtContext *_localctx = _tracker.createInstance<CommonStmtContext>(_ctx, getState());
  enterRule(_localctx, 160, Fortran90Parser::RuleCommonStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1259);
    match(Fortran90Parser::COMMON);
    setState(1260);
    comlist(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComlistContext ------------------------------------------------------------------

Fortran90Parser::ComlistContext::ComlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::CommonBlockObjectContext* Fortran90Parser::ComlistContext::commonBlockObject() {
  return getRuleContext<Fortran90Parser::CommonBlockObjectContext>(0);
}

Fortran90Parser::ComblockContext* Fortran90Parser::ComlistContext::comblock() {
  return getRuleContext<Fortran90Parser::ComblockContext>(0);
}

Fortran90Parser::ComlistContext* Fortran90Parser::ComlistContext::comlist() {
  return getRuleContext<Fortran90Parser::ComlistContext>(0);
}

tree::TerminalNode* Fortran90Parser::ComlistContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}


size_t Fortran90Parser::ComlistContext::getRuleIndex() const {
  return Fortran90Parser::RuleComlist;
}

void Fortran90Parser::ComlistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComlist(this);
}

void Fortran90Parser::ComlistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComlist(this);
}


Fortran90Parser::ComlistContext* Fortran90Parser::comlist() {
   return comlist(0);
}

Fortran90Parser::ComlistContext* Fortran90Parser::comlist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::ComlistContext *_localctx = _tracker.createInstance<ComlistContext>(_ctx, parentState);
  Fortran90Parser::ComlistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 162;
  enterRecursionRule(_localctx, 162, Fortran90Parser::RuleComlist, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1264);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::DIV) {
      setState(1263);
      comblock();
    }
    setState(1266);
    commonBlockObject();
    _ctx->stop = _input->LT(-1);
    setState(1280);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1278);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ComlistContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleComlist);
          setState(1268);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1269);
          match(Fortran90Parser::COMMA);
          setState(1271);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Fortran90Parser::DIV) {
            setState(1270);
            comblock();
          }
          setState(1273);
          commonBlockObject();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ComlistContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleComlist);
          setState(1274);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1275);
          comblock();
          setState(1276);
          commonBlockObject();
          break;
        }

        default:
          break;
        } 
      }
      setState(1282);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- CommonBlockObjectContext ------------------------------------------------------------------

Fortran90Parser::CommonBlockObjectContext::CommonBlockObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::CommonBlockObjectContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}

Fortran90Parser::ArrayDeclaratorContext* Fortran90Parser::CommonBlockObjectContext::arrayDeclarator() {
  return getRuleContext<Fortran90Parser::ArrayDeclaratorContext>(0);
}


size_t Fortran90Parser::CommonBlockObjectContext::getRuleIndex() const {
  return Fortran90Parser::RuleCommonBlockObject;
}

void Fortran90Parser::CommonBlockObjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommonBlockObject(this);
}

void Fortran90Parser::CommonBlockObjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommonBlockObject(this);
}

Fortran90Parser::CommonBlockObjectContext* Fortran90Parser::commonBlockObject() {
  CommonBlockObjectContext *_localctx = _tracker.createInstance<CommonBlockObjectContext>(_ctx, getState());
  enterRule(_localctx, 164, Fortran90Parser::RuleCommonBlockObject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1285);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1283);
      variableName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1284);
      arrayDeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayDeclaratorContext ------------------------------------------------------------------

Fortran90Parser::ArrayDeclaratorContext::ArrayDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::ArrayDeclaratorContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::ArrayDeclaratorContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ArraySpecContext* Fortran90Parser::ArrayDeclaratorContext::arraySpec() {
  return getRuleContext<Fortran90Parser::ArraySpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::ArrayDeclaratorContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::ArrayDeclaratorContext::getRuleIndex() const {
  return Fortran90Parser::RuleArrayDeclarator;
}

void Fortran90Parser::ArrayDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayDeclarator(this);
}

void Fortran90Parser::ArrayDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayDeclarator(this);
}

Fortran90Parser::ArrayDeclaratorContext* Fortran90Parser::arrayDeclarator() {
  ArrayDeclaratorContext *_localctx = _tracker.createInstance<ArrayDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 166, Fortran90Parser::RuleArrayDeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1287);
    variableName();
    setState(1288);
    match(Fortran90Parser::LPAREN);
    setState(1289);
    arraySpec();
    setState(1290);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComblockContext ------------------------------------------------------------------

Fortran90Parser::ComblockContext::ComblockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Fortran90Parser::ComblockContext::DIV() {
  return getTokens(Fortran90Parser::DIV);
}

tree::TerminalNode* Fortran90Parser::ComblockContext::DIV(size_t i) {
  return getToken(Fortran90Parser::DIV, i);
}

tree::TerminalNode* Fortran90Parser::ComblockContext::SPOFF() {
  return getToken(Fortran90Parser::SPOFF, 0);
}

tree::TerminalNode* Fortran90Parser::ComblockContext::SPON() {
  return getToken(Fortran90Parser::SPON, 0);
}

Fortran90Parser::CommonBlockNameContext* Fortran90Parser::ComblockContext::commonBlockName() {
  return getRuleContext<Fortran90Parser::CommonBlockNameContext>(0);
}


size_t Fortran90Parser::ComblockContext::getRuleIndex() const {
  return Fortran90Parser::RuleComblock;
}

void Fortran90Parser::ComblockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComblock(this);
}

void Fortran90Parser::ComblockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComblock(this);
}

Fortran90Parser::ComblockContext* Fortran90Parser::comblock() {
  ComblockContext *_localctx = _tracker.createInstance<ComblockContext>(_ctx, getState());
  enterRule(_localctx, 168, Fortran90Parser::RuleComblock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1300);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1292);
      match(Fortran90Parser::DIV);
      setState(1293);
      match(Fortran90Parser::SPOFF);
      setState(1294);
      match(Fortran90Parser::DIV);
      setState(1295);
      match(Fortran90Parser::SPON);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1296);
      match(Fortran90Parser::DIV);
      setState(1297);
      commonBlockName();
      setState(1298);
      match(Fortran90Parser::DIV);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommonBlockNameContext ------------------------------------------------------------------

Fortran90Parser::CommonBlockNameContext::CommonBlockNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CommonBlockNameContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::CommonBlockNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleCommonBlockName;
}

void Fortran90Parser::CommonBlockNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommonBlockName(this);
}

void Fortran90Parser::CommonBlockNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommonBlockName(this);
}

Fortran90Parser::CommonBlockNameContext* Fortran90Parser::commonBlockName() {
  CommonBlockNameContext *_localctx = _tracker.createInstance<CommonBlockNameContext>(_ctx, getState());
  enterRule(_localctx, 170, Fortran90Parser::RuleCommonBlockName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1302);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclarationStmtContext ------------------------------------------------------------------

Fortran90Parser::TypeDeclarationStmtContext::TypeDeclarationStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::TypeSpecContext* Fortran90Parser::TypeDeclarationStmtContext::typeSpec() {
  return getRuleContext<Fortran90Parser::TypeSpecContext>(0);
}

Fortran90Parser::EntityDeclListContext* Fortran90Parser::TypeDeclarationStmtContext::entityDeclList() {
  return getRuleContext<Fortran90Parser::EntityDeclListContext>(0);
}

tree::TerminalNode* Fortran90Parser::TypeDeclarationStmtContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}

Fortran90Parser::AttrSpecSeqContext* Fortran90Parser::TypeDeclarationStmtContext::attrSpecSeq() {
  return getRuleContext<Fortran90Parser::AttrSpecSeqContext>(0);
}


size_t Fortran90Parser::TypeDeclarationStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleTypeDeclarationStmt;
}

void Fortran90Parser::TypeDeclarationStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclarationStmt(this);
}

void Fortran90Parser::TypeDeclarationStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclarationStmt(this);
}

Fortran90Parser::TypeDeclarationStmtContext* Fortran90Parser::typeDeclarationStmt() {
  TypeDeclarationStmtContext *_localctx = _tracker.createInstance<TypeDeclarationStmtContext>(_ctx, getState());
  enterRule(_localctx, 172, Fortran90Parser::RuleTypeDeclarationStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1314);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1304);
      typeSpec();
      setState(1305);
      entityDeclList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1307);
      typeSpec();
      setState(1309);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::COMMA) {
        setState(1308);
        attrSpecSeq(0);
      }
      setState(1311);
      match(Fortran90Parser::DOUBLECOLON);
      setState(1312);
      entityDeclList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttrSpecSeqContext ------------------------------------------------------------------

Fortran90Parser::AttrSpecSeqContext::AttrSpecSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::AttrSpecSeqContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::AttrSpecContext* Fortran90Parser::AttrSpecSeqContext::attrSpec() {
  return getRuleContext<Fortran90Parser::AttrSpecContext>(0);
}

Fortran90Parser::AttrSpecSeqContext* Fortran90Parser::AttrSpecSeqContext::attrSpecSeq() {
  return getRuleContext<Fortran90Parser::AttrSpecSeqContext>(0);
}


size_t Fortran90Parser::AttrSpecSeqContext::getRuleIndex() const {
  return Fortran90Parser::RuleAttrSpecSeq;
}

void Fortran90Parser::AttrSpecSeqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttrSpecSeq(this);
}

void Fortran90Parser::AttrSpecSeqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttrSpecSeq(this);
}


Fortran90Parser::AttrSpecSeqContext* Fortran90Parser::attrSpecSeq() {
   return attrSpecSeq(0);
}

Fortran90Parser::AttrSpecSeqContext* Fortran90Parser::attrSpecSeq(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::AttrSpecSeqContext *_localctx = _tracker.createInstance<AttrSpecSeqContext>(_ctx, parentState);
  Fortran90Parser::AttrSpecSeqContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 174;
  enterRecursionRule(_localctx, 174, Fortran90Parser::RuleAttrSpecSeq, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1317);
    match(Fortran90Parser::COMMA);
    setState(1318);
    attrSpec();
    _ctx->stop = _input->LT(-1);
    setState(1325);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<AttrSpecSeqContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleAttrSpecSeq);
        setState(1320);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1321);
        match(Fortran90Parser::COMMA);
        setState(1322);
        attrSpec(); 
      }
      setState(1327);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AttrSpecContext ------------------------------------------------------------------

Fortran90Parser::AttrSpecContext::AttrSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::PARAMETER() {
  return getToken(Fortran90Parser::PARAMETER, 0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::ACCESSSPEC() {
  return getToken(Fortran90Parser::ACCESSSPEC, 0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::ALLOCATABLE() {
  return getToken(Fortran90Parser::ALLOCATABLE, 0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::DIMENSION() {
  return getToken(Fortran90Parser::DIMENSION, 0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ArraySpecContext* Fortran90Parser::AttrSpecContext::arraySpec() {
  return getRuleContext<Fortran90Parser::ArraySpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::EXTERNAL() {
  return getToken(Fortran90Parser::EXTERNAL, 0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::INTENT() {
  return getToken(Fortran90Parser::INTENT, 0);
}

Fortran90Parser::IntentSpecContext* Fortran90Parser::AttrSpecContext::intentSpec() {
  return getRuleContext<Fortran90Parser::IntentSpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::INTRINSIC() {
  return getToken(Fortran90Parser::INTRINSIC, 0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::OPTIONAL() {
  return getToken(Fortran90Parser::OPTIONAL, 0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::POINTER() {
  return getToken(Fortran90Parser::POINTER, 0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::SAVE() {
  return getToken(Fortran90Parser::SAVE, 0);
}

tree::TerminalNode* Fortran90Parser::AttrSpecContext::TARGET() {
  return getToken(Fortran90Parser::TARGET, 0);
}


size_t Fortran90Parser::AttrSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleAttrSpec;
}

void Fortran90Parser::AttrSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttrSpec(this);
}

void Fortran90Parser::AttrSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttrSpec(this);
}

Fortran90Parser::AttrSpecContext* Fortran90Parser::attrSpec() {
  AttrSpecContext *_localctx = _tracker.createInstance<AttrSpecContext>(_ctx, getState());
  enterRule(_localctx, 176, Fortran90Parser::RuleAttrSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1347);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::PARAMETER: {
        enterOuterAlt(_localctx, 1);
        setState(1328);
        match(Fortran90Parser::PARAMETER);
        break;
      }

      case Fortran90Parser::ACCESSSPEC: {
        enterOuterAlt(_localctx, 2);
        setState(1329);
        match(Fortran90Parser::ACCESSSPEC);
        break;
      }

      case Fortran90Parser::ALLOCATABLE: {
        enterOuterAlt(_localctx, 3);
        setState(1330);
        match(Fortran90Parser::ALLOCATABLE);
        break;
      }

      case Fortran90Parser::DIMENSION: {
        enterOuterAlt(_localctx, 4);
        setState(1331);
        match(Fortran90Parser::DIMENSION);
        setState(1332);
        match(Fortran90Parser::LPAREN);
        setState(1333);
        arraySpec();
        setState(1334);
        match(Fortran90Parser::RPAREN);
        break;
      }

      case Fortran90Parser::EXTERNAL: {
        enterOuterAlt(_localctx, 5);
        setState(1336);
        match(Fortran90Parser::EXTERNAL);
        break;
      }

      case Fortran90Parser::INTENT: {
        enterOuterAlt(_localctx, 6);
        setState(1337);
        match(Fortran90Parser::INTENT);
        setState(1338);
        match(Fortran90Parser::LPAREN);
        setState(1339);
        intentSpec();
        setState(1340);
        match(Fortran90Parser::RPAREN);
        break;
      }

      case Fortran90Parser::INTRINSIC: {
        enterOuterAlt(_localctx, 7);
        setState(1342);
        match(Fortran90Parser::INTRINSIC);
        break;
      }

      case Fortran90Parser::OPTIONAL: {
        enterOuterAlt(_localctx, 8);
        setState(1343);
        match(Fortran90Parser::OPTIONAL);
        break;
      }

      case Fortran90Parser::POINTER: {
        enterOuterAlt(_localctx, 9);
        setState(1344);
        match(Fortran90Parser::POINTER);
        break;
      }

      case Fortran90Parser::SAVE: {
        enterOuterAlt(_localctx, 10);
        setState(1345);
        match(Fortran90Parser::SAVE);
        break;
      }

      case Fortran90Parser::TARGET: {
        enterOuterAlt(_localctx, 11);
        setState(1346);
        match(Fortran90Parser::TARGET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EntityDeclListContext ------------------------------------------------------------------

Fortran90Parser::EntityDeclListContext::EntityDeclListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::EntityDeclContext *> Fortran90Parser::EntityDeclListContext::entityDecl() {
  return getRuleContexts<Fortran90Parser::EntityDeclContext>();
}

Fortran90Parser::EntityDeclContext* Fortran90Parser::EntityDeclListContext::entityDecl(size_t i) {
  return getRuleContext<Fortran90Parser::EntityDeclContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::EntityDeclListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::EntityDeclListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::EntityDeclListContext::getRuleIndex() const {
  return Fortran90Parser::RuleEntityDeclList;
}

void Fortran90Parser::EntityDeclListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntityDeclList(this);
}

void Fortran90Parser::EntityDeclListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntityDeclList(this);
}

Fortran90Parser::EntityDeclListContext* Fortran90Parser::entityDeclList() {
  EntityDeclListContext *_localctx = _tracker.createInstance<EntityDeclListContext>(_ctx, getState());
  enterRule(_localctx, 178, Fortran90Parser::RuleEntityDeclList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1349);
    entityDecl();
    setState(1354);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1350);
        match(Fortran90Parser::COMMA);
        setState(1351);
        entityDecl(); 
      }
      setState(1356);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EntityDeclContext ------------------------------------------------------------------

Fortran90Parser::EntityDeclContext::EntityDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ObjectNameContext* Fortran90Parser::EntityDeclContext::objectName() {
  return getRuleContext<Fortran90Parser::ObjectNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::EntityDeclContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ArraySpecContext* Fortran90Parser::EntityDeclContext::arraySpec() {
  return getRuleContext<Fortran90Parser::ArraySpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::EntityDeclContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::EntityDeclContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}

Fortran90Parser::CharLengthContext* Fortran90Parser::EntityDeclContext::charLength() {
  return getRuleContext<Fortran90Parser::CharLengthContext>(0);
}

tree::TerminalNode* Fortran90Parser::EntityDeclContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::EntityDeclContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::EntityDeclContext::getRuleIndex() const {
  return Fortran90Parser::RuleEntityDecl;
}

void Fortran90Parser::EntityDeclContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntityDecl(this);
}

void Fortran90Parser::EntityDeclContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntityDecl(this);
}

Fortran90Parser::EntityDeclContext* Fortran90Parser::entityDecl() {
  EntityDeclContext *_localctx = _tracker.createInstance<EntityDeclContext>(_ctx, getState());
  enterRule(_localctx, 180, Fortran90Parser::RuleEntityDecl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1400);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1357);
      objectName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1358);
      objectName();
      setState(1359);
      match(Fortran90Parser::LPAREN);
      setState(1360);
      arraySpec();
      setState(1361);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1363);
      objectName();
      setState(1364);
      match(Fortran90Parser::STAR);
      setState(1365);
      charLength();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1367);
      objectName();
      setState(1368);
      match(Fortran90Parser::LPAREN);
      setState(1369);
      arraySpec();
      setState(1370);
      match(Fortran90Parser::RPAREN);
      setState(1371);
      match(Fortran90Parser::STAR);
      setState(1372);
      charLength();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1374);
      objectName();
      setState(1375);
      match(Fortran90Parser::ASSIGN);
      setState(1376);
      expression(0);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1378);
      objectName();
      setState(1379);
      match(Fortran90Parser::LPAREN);
      setState(1380);
      arraySpec();
      setState(1381);
      match(Fortran90Parser::RPAREN);
      setState(1382);
      match(Fortran90Parser::ASSIGN);
      setState(1383);
      expression(0);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1385);
      objectName();
      setState(1386);
      match(Fortran90Parser::STAR);
      setState(1387);
      charLength();
      setState(1388);
      match(Fortran90Parser::ASSIGN);
      setState(1389);
      expression(0);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1391);
      objectName();
      setState(1392);
      match(Fortran90Parser::STAR);
      setState(1393);
      charLength();
      setState(1394);
      match(Fortran90Parser::LPAREN);
      setState(1395);
      arraySpec();
      setState(1396);
      match(Fortran90Parser::RPAREN);
      setState(1397);
      match(Fortran90Parser::ASSIGN);
      setState(1398);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectNameContext ------------------------------------------------------------------

Fortran90Parser::ObjectNameContext::ObjectNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::NameContext* Fortran90Parser::ObjectNameContext::name() {
  return getRuleContext<Fortran90Parser::NameContext>(0);
}


size_t Fortran90Parser::ObjectNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleObjectName;
}

void Fortran90Parser::ObjectNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectName(this);
}

void Fortran90Parser::ObjectNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectName(this);
}

Fortran90Parser::ObjectNameContext* Fortran90Parser::objectName() {
  ObjectNameContext *_localctx = _tracker.createInstance<ObjectNameContext>(_ctx, getState());
  enterRule(_localctx, 182, Fortran90Parser::RuleObjectName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1402);
    name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameContext ------------------------------------------------------------------

Fortran90Parser::NameContext::NameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::NameContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ACCESS() {
  return getToken(Fortran90Parser::ACCESS, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ACCESSSPEC() {
  return getToken(Fortran90Parser::ACCESSSPEC, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ACTION() {
  return getToken(Fortran90Parser::ACTION, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ADVANCE() {
  return getToken(Fortran90Parser::ADVANCE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::AIF() {
  return getToken(Fortran90Parser::AIF, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ALLOCATABLE() {
  return getToken(Fortran90Parser::ALLOCATABLE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ALLOCATE() {
  return getToken(Fortran90Parser::ALLOCATE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ASSIGNMENT() {
  return getToken(Fortran90Parser::ASSIGNMENT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ASSIGNSTMT() {
  return getToken(Fortran90Parser::ASSIGNSTMT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::BACKSPACE() {
  return getToken(Fortran90Parser::BACKSPACE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::BLOCK() {
  return getToken(Fortran90Parser::BLOCK, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::BLOCKDATA() {
  return getToken(Fortran90Parser::BLOCKDATA, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CALL() {
  return getToken(Fortran90Parser::CALL, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CASE() {
  return getToken(Fortran90Parser::CASE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CCON() {
  return getToken(Fortran90Parser::CCON, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CHARACTER() {
  return getToken(Fortran90Parser::CHARACTER, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CLOSE() {
  return getToken(Fortran90Parser::CLOSE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CODEROOT() {
  return getToken(Fortran90Parser::CODEROOT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::COMMON() {
  return getToken(Fortran90Parser::COMMON, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::COMPLEX() {
  return getToken(Fortran90Parser::COMPLEX, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CONCATOP() {
  return getToken(Fortran90Parser::CONCATOP, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CONTAINS() {
  return getToken(Fortran90Parser::CONTAINS, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CONTINUE() {
  return getToken(Fortran90Parser::CONTINUE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CTRLDIRECT() {
  return getToken(Fortran90Parser::CTRLDIRECT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CTRLREC() {
  return getToken(Fortran90Parser::CTRLREC, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::CYCLE() {
  return getToken(Fortran90Parser::CYCLE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::DATA() {
  return getToken(Fortran90Parser::DATA, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::DEALLOCATE() {
  return getToken(Fortran90Parser::DEALLOCATE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::DEFAULT() {
  return getToken(Fortran90Parser::DEFAULT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::DELIM() {
  return getToken(Fortran90Parser::DELIM, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::DIMENSION() {
  return getToken(Fortran90Parser::DIMENSION, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::DIRECT() {
  return getToken(Fortran90Parser::DIRECT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::DO() {
  return getToken(Fortran90Parser::DO, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::DOBLOCK() {
  return getToken(Fortran90Parser::DOBLOCK, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::DOUBLE() {
  return getToken(Fortran90Parser::DOUBLE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::DOUBLEPRECISION() {
  return getToken(Fortran90Parser::DOUBLEPRECISION, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ELSE() {
  return getToken(Fortran90Parser::ELSE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ELSEBLOCK() {
  return getToken(Fortran90Parser::ELSEBLOCK, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ELSEIF() {
  return getToken(Fortran90Parser::ELSEIF, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ELSEWHERE() {
  return getToken(Fortran90Parser::ELSEWHERE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ENDBLOCK() {
  return getToken(Fortran90Parser::ENDBLOCK, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ENDBLOCKDATA() {
  return getToken(Fortran90Parser::ENDBLOCKDATA, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ENDDO() {
  return getToken(Fortran90Parser::ENDDO, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ENDFILE() {
  return getToken(Fortran90Parser::ENDFILE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ENDIF() {
  return getToken(Fortran90Parser::ENDIF, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ENDINTERFACE() {
  return getToken(Fortran90Parser::ENDINTERFACE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ENDMODULE() {
  return getToken(Fortran90Parser::ENDMODULE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ENDSELECT() {
  return getToken(Fortran90Parser::ENDSELECT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ENDTYPE() {
  return getToken(Fortran90Parser::ENDTYPE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ENDWHERE() {
  return getToken(Fortran90Parser::ENDWHERE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ENTRY() {
  return getToken(Fortran90Parser::ENTRY, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::EQUIVALENCE() {
  return getToken(Fortran90Parser::EQUIVALENCE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ERR() {
  return getToken(Fortran90Parser::ERR, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::EXIST() {
  return getToken(Fortran90Parser::EXIST, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::EXTERNAL() {
  return getToken(Fortran90Parser::EXTERNAL, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::FILE() {
  return getToken(Fortran90Parser::FILE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::FMT() {
  return getToken(Fortran90Parser::FMT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::FORM() {
  return getToken(Fortran90Parser::FORM, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::FORMAT() {
  return getToken(Fortran90Parser::FORMAT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::FORMATTED() {
  return getToken(Fortran90Parser::FORMATTED, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::FUNCTION() {
  return getToken(Fortran90Parser::FUNCTION, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::GO() {
  return getToken(Fortran90Parser::GO, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::GOTO() {
  return getToken(Fortran90Parser::GOTO, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::HOLLERITH() {
  return getToken(Fortran90Parser::HOLLERITH, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::IF() {
  return getToken(Fortran90Parser::IF, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::IMPLICIT() {
  return getToken(Fortran90Parser::IMPLICIT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::IN() {
  return getToken(Fortran90Parser::IN, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::INCLUDE() {
  return getToken(Fortran90Parser::INCLUDE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::INOUT() {
  return getToken(Fortran90Parser::INOUT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::INQUIRE() {
  return getToken(Fortran90Parser::INQUIRE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::INTEGER() {
  return getToken(Fortran90Parser::INTEGER, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::INTENT() {
  return getToken(Fortran90Parser::INTENT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::INTERFACE() {
  return getToken(Fortran90Parser::INTERFACE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::INTRINSIC() {
  return getToken(Fortran90Parser::INTRINSIC, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::IOLENGTH() {
  return getToken(Fortran90Parser::IOLENGTH, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::IOSTART() {
  return getToken(Fortran90Parser::IOSTART, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::IOSTAT() {
  return getToken(Fortran90Parser::IOSTAT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::KIND() {
  return getToken(Fortran90Parser::KIND, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::LABEL() {
  return getToken(Fortran90Parser::LABEL, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::LEN() {
  return getToken(Fortran90Parser::LEN, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::LET() {
  return getToken(Fortran90Parser::LET, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::LOGICAL() {
  return getToken(Fortran90Parser::LOGICAL, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::MODULE() {
  return getToken(Fortran90Parser::MODULE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::NAME_() {
  return getToken(Fortran90Parser::NAME_, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::NAMED() {
  return getToken(Fortran90Parser::NAMED, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::NAMELIST() {
  return getToken(Fortran90Parser::NAMELIST, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::NEXTREC() {
  return getToken(Fortran90Parser::NEXTREC, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::NML() {
  return getToken(Fortran90Parser::NML, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::NONE() {
  return getToken(Fortran90Parser::NONE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::NULLIFY() {
  return getToken(Fortran90Parser::NULLIFY, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::NUMBER() {
  return getToken(Fortran90Parser::NUMBER, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::ONLY() {
  return getToken(Fortran90Parser::ONLY, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::OPEN() {
  return getToken(Fortran90Parser::OPEN, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::OPENED() {
  return getToken(Fortran90Parser::OPENED, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::OPERATOR() {
  return getToken(Fortran90Parser::OPERATOR, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::OPTIONAL() {
  return getToken(Fortran90Parser::OPTIONAL, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::OUT() {
  return getToken(Fortran90Parser::OUT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::PAD() {
  return getToken(Fortran90Parser::PAD, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::PARAMETER() {
  return getToken(Fortran90Parser::PARAMETER, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::PAUSE() {
  return getToken(Fortran90Parser::PAUSE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::POINTER() {
  return getToken(Fortran90Parser::POINTER, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::POSITION() {
  return getToken(Fortran90Parser::POSITION, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::PRECISION() {
  return getToken(Fortran90Parser::PRECISION, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::PRINT() {
  return getToken(Fortran90Parser::PRINT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::PRIVATE() {
  return getToken(Fortran90Parser::PRIVATE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::PROCEDURE() {
  return getToken(Fortran90Parser::PROCEDURE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::PROGRAM() {
  return getToken(Fortran90Parser::PROGRAM, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::READ() {
  return getToken(Fortran90Parser::READ, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::READWRITE() {
  return getToken(Fortran90Parser::READWRITE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::REAL() {
  return getToken(Fortran90Parser::REAL, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::REC() {
  return getToken(Fortran90Parser::REC, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::RECL() {
  return getToken(Fortran90Parser::RECL, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::RECURSIVE() {
  return getToken(Fortran90Parser::RECURSIVE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::RESULT() {
  return getToken(Fortran90Parser::RESULT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::RETURN() {
  return getToken(Fortran90Parser::RETURN, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::REWIND() {
  return getToken(Fortran90Parser::REWIND, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::SAVE() {
  return getToken(Fortran90Parser::SAVE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::SELECT() {
  return getToken(Fortran90Parser::SELECT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::SELECTCASE() {
  return getToken(Fortran90Parser::SELECTCASE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::SEQUENCE() {
  return getToken(Fortran90Parser::SEQUENCE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::SEQUENTIAL() {
  return getToken(Fortran90Parser::SEQUENTIAL, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::SIZE() {
  return getToken(Fortran90Parser::SIZE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::SPOFF() {
  return getToken(Fortran90Parser::SPOFF, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::SPON() {
  return getToken(Fortran90Parser::SPON, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::STAT() {
  return getToken(Fortran90Parser::STAT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::STATUS() {
  return getToken(Fortran90Parser::STATUS, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::STOP() {
  return getToken(Fortran90Parser::STOP, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::SUBPROGRAMBLOCK() {
  return getToken(Fortran90Parser::SUBPROGRAMBLOCK, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::SUBROUTINE() {
  return getToken(Fortran90Parser::SUBROUTINE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::TARGET() {
  return getToken(Fortran90Parser::TARGET, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::THEN() {
  return getToken(Fortran90Parser::THEN, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::THENBLOCK() {
  return getToken(Fortran90Parser::THENBLOCK, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::TO() {
  return getToken(Fortran90Parser::TO, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::TYPE() {
  return getToken(Fortran90Parser::TYPE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::UNFORMATTED() {
  return getToken(Fortran90Parser::UNFORMATTED, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::UNIT() {
  return getToken(Fortran90Parser::UNIT, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::USE() {
  return getToken(Fortran90Parser::USE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::WHERE() {
  return getToken(Fortran90Parser::WHERE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::WHILE() {
  return getToken(Fortran90Parser::WHILE, 0);
}

tree::TerminalNode* Fortran90Parser::NameContext::WRITE() {
  return getToken(Fortran90Parser::WRITE, 0);
}


size_t Fortran90Parser::NameContext::getRuleIndex() const {
  return Fortran90Parser::RuleName;
}

void Fortran90Parser::NameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterName(this);
}

void Fortran90Parser::NameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitName(this);
}

Fortran90Parser::NameContext* Fortran90Parser::name() {
  NameContext *_localctx = _tracker.createInstance<NameContext>(_ctx, getState());
  enterRule(_localctx, 184, Fortran90Parser::RuleName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1404);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1509949442) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -2269814212194729985) != 0) || ((((_la - 155) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 155)) & 30031282175) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArraySpecContext ------------------------------------------------------------------

Fortran90Parser::ArraySpecContext::ArraySpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExplicitShapeSpecListContext* Fortran90Parser::ArraySpecContext::explicitShapeSpecList() {
  return getRuleContext<Fortran90Parser::ExplicitShapeSpecListContext>(0);
}

Fortran90Parser::AssumedSizeSpecContext* Fortran90Parser::ArraySpecContext::assumedSizeSpec() {
  return getRuleContext<Fortran90Parser::AssumedSizeSpecContext>(0);
}

Fortran90Parser::AssumedShapeSpecListContext* Fortran90Parser::ArraySpecContext::assumedShapeSpecList() {
  return getRuleContext<Fortran90Parser::AssumedShapeSpecListContext>(0);
}

Fortran90Parser::DeferredShapeSpecListContext* Fortran90Parser::ArraySpecContext::deferredShapeSpecList() {
  return getRuleContext<Fortran90Parser::DeferredShapeSpecListContext>(0);
}


size_t Fortran90Parser::ArraySpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleArraySpec;
}

void Fortran90Parser::ArraySpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArraySpec(this);
}

void Fortran90Parser::ArraySpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArraySpec(this);
}

Fortran90Parser::ArraySpecContext* Fortran90Parser::arraySpec() {
  ArraySpecContext *_localctx = _tracker.createInstance<ArraySpecContext>(_ctx, getState());
  enterRule(_localctx, 186, Fortran90Parser::RuleArraySpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1410);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1406);
      explicitShapeSpecList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1407);
      assumedSizeSpec();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1408);
      assumedShapeSpecList(0);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1409);
      deferredShapeSpecList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssumedShapeSpecListContext ------------------------------------------------------------------

Fortran90Parser::AssumedShapeSpecListContext::AssumedShapeSpecListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::LowerBoundContext* Fortran90Parser::AssumedShapeSpecListContext::lowerBound() {
  return getRuleContext<Fortran90Parser::LowerBoundContext>(0);
}

tree::TerminalNode* Fortran90Parser::AssumedShapeSpecListContext::COLON() {
  return getToken(Fortran90Parser::COLON, 0);
}

Fortran90Parser::DeferredShapeSpecListContext* Fortran90Parser::AssumedShapeSpecListContext::deferredShapeSpecList() {
  return getRuleContext<Fortran90Parser::DeferredShapeSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::AssumedShapeSpecListContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::AssumedShapeSpecListContext* Fortran90Parser::AssumedShapeSpecListContext::assumedShapeSpecList() {
  return getRuleContext<Fortran90Parser::AssumedShapeSpecListContext>(0);
}

Fortran90Parser::AssumedShapeSpecContext* Fortran90Parser::AssumedShapeSpecListContext::assumedShapeSpec() {
  return getRuleContext<Fortran90Parser::AssumedShapeSpecContext>(0);
}


size_t Fortran90Parser::AssumedShapeSpecListContext::getRuleIndex() const {
  return Fortran90Parser::RuleAssumedShapeSpecList;
}

void Fortran90Parser::AssumedShapeSpecListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssumedShapeSpecList(this);
}

void Fortran90Parser::AssumedShapeSpecListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssumedShapeSpecList(this);
}


Fortran90Parser::AssumedShapeSpecListContext* Fortran90Parser::assumedShapeSpecList() {
   return assumedShapeSpecList(0);
}

Fortran90Parser::AssumedShapeSpecListContext* Fortran90Parser::assumedShapeSpecList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::AssumedShapeSpecListContext *_localctx = _tracker.createInstance<AssumedShapeSpecListContext>(_ctx, parentState);
  Fortran90Parser::AssumedShapeSpecListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 188;
  enterRecursionRule(_localctx, 188, Fortran90Parser::RuleAssumedShapeSpecList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1421);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::CONTAINS:
      case Fortran90Parser::MODULE:
      case Fortran90Parser::ENDMODULE:
      case Fortran90Parser::PROGRAM:
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::BLOCK:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::ENDINTERFACE:
      case Fortran90Parser::PROCEDURE:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::IN:
      case Fortran90Parser::OUT:
      case Fortran90Parser::INOUT:
      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::USE:
      case Fortran90Parser::ONLY:
      case Fortran90Parser::ASSIGNMENT:
      case Fortran90Parser::DOP:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::ELSEWHERE:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::BLOCKDATA:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::NONE:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::THEN:
      case Fortran90Parser::ELSE:
      case Fortran90Parser::ENDIF:
      case Fortran90Parser::RESULT:
      case Fortran90Parser::ELSEIF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::ENDWHERE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::ENDSELECT:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::CASE:
      case Fortran90Parser::DEFAULT:
      case Fortran90Parser::DIRECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::REC:
      case Fortran90Parser::ENDDO:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::FMT:
      case Fortran90Parser::UNIT:
      case Fortran90Parser::PAD:
      case Fortran90Parser::ACTION:
      case Fortran90Parser::DELIM:
      case Fortran90Parser::IOLENGTH:
      case Fortran90Parser::READWRITE:
      case Fortran90Parser::ERR:
      case Fortran90Parser::SIZE:
      case Fortran90Parser::ADVANCE:
      case Fortran90Parser::NML:
      case Fortran90Parser::IOSTAT:
      case Fortran90Parser::FORMAT:
      case Fortran90Parser::LET:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::IOSTART:
      case Fortran90Parser::SEQUENTIAL:
      case Fortran90Parser::LABEL:
      case Fortran90Parser::FILE:
      case Fortran90Parser::STATUS:
      case Fortran90Parser::ACCESS:
      case Fortran90Parser::POSITION:
      case Fortran90Parser::FORM:
      case Fortran90Parser::RECL:
      case Fortran90Parser::EXIST:
      case Fortran90Parser::OPENED:
      case Fortran90Parser::NUMBER:
      case Fortran90Parser::NAMED:
      case Fortran90Parser::NAME_:
      case Fortran90Parser::FORMATTED:
      case Fortran90Parser::UNFORMATTED:
      case Fortran90Parser::NEXTREC:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ENDBLOCKDATA:
      case Fortran90Parser::ENDBLOCK:
      case Fortran90Parser::KIND:
      case Fortran90Parser::LEN:
      case Fortran90Parser::LPAREN:
      case Fortran90Parser::WHILE:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::STAT:
      case Fortran90Parser::MINUS:
      case Fortran90Parser::PLUS:
      case Fortran90Parser::LNOT:
      case Fortran90Parser::TRUE:
      case Fortran90Parser::FALSE:
      case Fortran90Parser::CCON:
      case Fortran90Parser::HOLLERITH:
      case Fortran90Parser::CONCATOP:
      case Fortran90Parser::CTRLDIRECT:
      case Fortran90Parser::CTRLREC:
      case Fortran90Parser::TO:
      case Fortran90Parser::SUBPROGRAMBLOCK:
      case Fortran90Parser::DOBLOCK:
      case Fortran90Parser::AIF:
      case Fortran90Parser::THENBLOCK:
      case Fortran90Parser::ELSEBLOCK:
      case Fortran90Parser::CODEROOT:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::PRECISION:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::OBRACKETSLASH:
      case Fortran90Parser::SCON:
      case Fortran90Parser::RDCON:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ENDTYPE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::SPOFF:
      case Fortran90Parser::SPON:
      case Fortran90Parser::ICON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME: {
        setState(1413);
        lowerBound();
        setState(1414);
        match(Fortran90Parser::COLON);
        break;
      }

      case Fortran90Parser::COLON: {
        setState(1416);
        deferredShapeSpecList();
        setState(1417);
        match(Fortran90Parser::COMMA);
        setState(1418);
        lowerBound();
        setState(1419);
        match(Fortran90Parser::COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1428);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<AssumedShapeSpecListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleAssumedShapeSpecList);
        setState(1423);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1424);
        match(Fortran90Parser::COMMA);
        setState(1425);
        assumedShapeSpec(); 
      }
      setState(1430);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AssumedShapeSpecContext ------------------------------------------------------------------

Fortran90Parser::AssumedShapeSpecContext::AssumedShapeSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::LowerBoundContext* Fortran90Parser::AssumedShapeSpecContext::lowerBound() {
  return getRuleContext<Fortran90Parser::LowerBoundContext>(0);
}

tree::TerminalNode* Fortran90Parser::AssumedShapeSpecContext::COLON() {
  return getToken(Fortran90Parser::COLON, 0);
}


size_t Fortran90Parser::AssumedShapeSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleAssumedShapeSpec;
}

void Fortran90Parser::AssumedShapeSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssumedShapeSpec(this);
}

void Fortran90Parser::AssumedShapeSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssumedShapeSpec(this);
}

Fortran90Parser::AssumedShapeSpecContext* Fortran90Parser::assumedShapeSpec() {
  AssumedShapeSpecContext *_localctx = _tracker.createInstance<AssumedShapeSpecContext>(_ctx, getState());
  enterRule(_localctx, 190, Fortran90Parser::RuleAssumedShapeSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1435);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::CONTAINS:
      case Fortran90Parser::MODULE:
      case Fortran90Parser::ENDMODULE:
      case Fortran90Parser::PROGRAM:
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::BLOCK:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::ENDINTERFACE:
      case Fortran90Parser::PROCEDURE:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::IN:
      case Fortran90Parser::OUT:
      case Fortran90Parser::INOUT:
      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::USE:
      case Fortran90Parser::ONLY:
      case Fortran90Parser::ASSIGNMENT:
      case Fortran90Parser::DOP:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::ELSEWHERE:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::BLOCKDATA:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::NONE:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::THEN:
      case Fortran90Parser::ELSE:
      case Fortran90Parser::ENDIF:
      case Fortran90Parser::RESULT:
      case Fortran90Parser::ELSEIF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::ENDWHERE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::ENDSELECT:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::CASE:
      case Fortran90Parser::DEFAULT:
      case Fortran90Parser::DIRECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::REC:
      case Fortran90Parser::ENDDO:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::FMT:
      case Fortran90Parser::UNIT:
      case Fortran90Parser::PAD:
      case Fortran90Parser::ACTION:
      case Fortran90Parser::DELIM:
      case Fortran90Parser::IOLENGTH:
      case Fortran90Parser::READWRITE:
      case Fortran90Parser::ERR:
      case Fortran90Parser::SIZE:
      case Fortran90Parser::ADVANCE:
      case Fortran90Parser::NML:
      case Fortran90Parser::IOSTAT:
      case Fortran90Parser::FORMAT:
      case Fortran90Parser::LET:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::IOSTART:
      case Fortran90Parser::SEQUENTIAL:
      case Fortran90Parser::LABEL:
      case Fortran90Parser::FILE:
      case Fortran90Parser::STATUS:
      case Fortran90Parser::ACCESS:
      case Fortran90Parser::POSITION:
      case Fortran90Parser::FORM:
      case Fortran90Parser::RECL:
      case Fortran90Parser::EXIST:
      case Fortran90Parser::OPENED:
      case Fortran90Parser::NUMBER:
      case Fortran90Parser::NAMED:
      case Fortran90Parser::NAME_:
      case Fortran90Parser::FORMATTED:
      case Fortran90Parser::UNFORMATTED:
      case Fortran90Parser::NEXTREC:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ENDBLOCKDATA:
      case Fortran90Parser::ENDBLOCK:
      case Fortran90Parser::KIND:
      case Fortran90Parser::LEN:
      case Fortran90Parser::LPAREN:
      case Fortran90Parser::WHILE:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::STAT:
      case Fortran90Parser::MINUS:
      case Fortran90Parser::PLUS:
      case Fortran90Parser::LNOT:
      case Fortran90Parser::TRUE:
      case Fortran90Parser::FALSE:
      case Fortran90Parser::CCON:
      case Fortran90Parser::HOLLERITH:
      case Fortran90Parser::CONCATOP:
      case Fortran90Parser::CTRLDIRECT:
      case Fortran90Parser::CTRLREC:
      case Fortran90Parser::TO:
      case Fortran90Parser::SUBPROGRAMBLOCK:
      case Fortran90Parser::DOBLOCK:
      case Fortran90Parser::AIF:
      case Fortran90Parser::THENBLOCK:
      case Fortran90Parser::ELSEBLOCK:
      case Fortran90Parser::CODEROOT:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::PRECISION:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::OBRACKETSLASH:
      case Fortran90Parser::SCON:
      case Fortran90Parser::RDCON:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ENDTYPE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::SPOFF:
      case Fortran90Parser::SPON:
      case Fortran90Parser::ICON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1431);
        lowerBound();
        setState(1432);
        match(Fortran90Parser::COLON);
        break;
      }

      case Fortran90Parser::COLON: {
        enterOuterAlt(_localctx, 2);
        setState(1434);
        match(Fortran90Parser::COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssumedSizeSpecContext ------------------------------------------------------------------

Fortran90Parser::AssumedSizeSpecContext::AssumedSizeSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::AssumedSizeSpecContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}

Fortran90Parser::LowerBoundContext* Fortran90Parser::AssumedSizeSpecContext::lowerBound() {
  return getRuleContext<Fortran90Parser::LowerBoundContext>(0);
}

tree::TerminalNode* Fortran90Parser::AssumedSizeSpecContext::COLON() {
  return getToken(Fortran90Parser::COLON, 0);
}

Fortran90Parser::ExplicitShapeSpecListContext* Fortran90Parser::AssumedSizeSpecContext::explicitShapeSpecList() {
  return getRuleContext<Fortran90Parser::ExplicitShapeSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::AssumedSizeSpecContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}


size_t Fortran90Parser::AssumedSizeSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleAssumedSizeSpec;
}

void Fortran90Parser::AssumedSizeSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssumedSizeSpec(this);
}

void Fortran90Parser::AssumedSizeSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssumedSizeSpec(this);
}

Fortran90Parser::AssumedSizeSpecContext* Fortran90Parser::assumedSizeSpec() {
  AssumedSizeSpecContext *_localctx = _tracker.createInstance<AssumedSizeSpecContext>(_ctx, getState());
  enterRule(_localctx, 192, Fortran90Parser::RuleAssumedSizeSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1452);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1437);
      match(Fortran90Parser::STAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1438);
      lowerBound();
      setState(1439);
      match(Fortran90Parser::COLON);
      setState(1440);
      match(Fortran90Parser::STAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1442);
      explicitShapeSpecList();
      setState(1443);
      match(Fortran90Parser::COMMA);
      setState(1444);
      match(Fortran90Parser::STAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1446);
      explicitShapeSpecList();
      setState(1447);
      match(Fortran90Parser::COMMA);
      setState(1448);
      lowerBound();
      setState(1449);
      match(Fortran90Parser::COLON);
      setState(1450);
      match(Fortran90Parser::STAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBlockContext ------------------------------------------------------------------

Fortran90Parser::InterfaceBlockContext::InterfaceBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::InterfaceStmtContext* Fortran90Parser::InterfaceBlockContext::interfaceStmt() {
  return getRuleContext<Fortran90Parser::InterfaceStmtContext>(0);
}

Fortran90Parser::InterfaceBlockBodyContext* Fortran90Parser::InterfaceBlockContext::interfaceBlockBody() {
  return getRuleContext<Fortran90Parser::InterfaceBlockBodyContext>(0);
}

Fortran90Parser::EndInterfaceStmtContext* Fortran90Parser::InterfaceBlockContext::endInterfaceStmt() {
  return getRuleContext<Fortran90Parser::EndInterfaceStmtContext>(0);
}


size_t Fortran90Parser::InterfaceBlockContext::getRuleIndex() const {
  return Fortran90Parser::RuleInterfaceBlock;
}

void Fortran90Parser::InterfaceBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceBlock(this);
}

void Fortran90Parser::InterfaceBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceBlock(this);
}

Fortran90Parser::InterfaceBlockContext* Fortran90Parser::interfaceBlock() {
  InterfaceBlockContext *_localctx = _tracker.createInstance<InterfaceBlockContext>(_ctx, getState());
  enterRule(_localctx, 194, Fortran90Parser::RuleInterfaceBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1454);
    interfaceStmt();
    setState(1455);
    interfaceBlockBody(0);
    setState(1456);
    endInterfaceStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndInterfaceStmtContext ------------------------------------------------------------------

Fortran90Parser::EndInterfaceStmtContext::EndInterfaceStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EndInterfaceStmtContext::ENDINTERFACE() {
  return getToken(Fortran90Parser::ENDINTERFACE, 0);
}

tree::TerminalNode* Fortran90Parser::EndInterfaceStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndInterfaceStmtContext::INTERFACE() {
  return getToken(Fortran90Parser::INTERFACE, 0);
}

tree::TerminalNode* Fortran90Parser::EndInterfaceStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::EndInterfaceStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndInterfaceStmt;
}

void Fortran90Parser::EndInterfaceStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndInterfaceStmt(this);
}

void Fortran90Parser::EndInterfaceStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndInterfaceStmt(this);
}

Fortran90Parser::EndInterfaceStmtContext* Fortran90Parser::endInterfaceStmt() {
  EndInterfaceStmtContext *_localctx = _tracker.createInstance<EndInterfaceStmtContext>(_ctx, getState());
  enterRule(_localctx, 196, Fortran90Parser::RuleEndInterfaceStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1461);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::ENDINTERFACE: {
        setState(1458);
        match(Fortran90Parser::ENDINTERFACE);
        break;
      }

      case Fortran90Parser::END: {
        setState(1459);
        match(Fortran90Parser::END);
        setState(1460);
        match(Fortran90Parser::INTERFACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1464);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      setState(1463);
      match(Fortran90Parser::NAME);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceStmtContext ------------------------------------------------------------------

Fortran90Parser::InterfaceStmtContext::InterfaceStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::InterfaceStmtContext::INTERFACE() {
  return getToken(Fortran90Parser::INTERFACE, 0);
}

tree::TerminalNode* Fortran90Parser::InterfaceStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

Fortran90Parser::GenericSpecContext* Fortran90Parser::InterfaceStmtContext::genericSpec() {
  return getRuleContext<Fortran90Parser::GenericSpecContext>(0);
}


size_t Fortran90Parser::InterfaceStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleInterfaceStmt;
}

void Fortran90Parser::InterfaceStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceStmt(this);
}

void Fortran90Parser::InterfaceStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceStmt(this);
}

Fortran90Parser::InterfaceStmtContext* Fortran90Parser::interfaceStmt() {
  InterfaceStmtContext *_localctx = _tracker.createInstance<InterfaceStmtContext>(_ctx, getState());
  enterRule(_localctx, 198, Fortran90Parser::RuleInterfaceStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1471);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1466);
      match(Fortran90Parser::INTERFACE);
      setState(1467);
      match(Fortran90Parser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1468);
      match(Fortran90Parser::INTERFACE);
      setState(1469);
      genericSpec();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1470);
      match(Fortran90Parser::INTERFACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericSpecContext ------------------------------------------------------------------

Fortran90Parser::GenericSpecContext::GenericSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::GenericSpecContext::OPERATOR() {
  return getToken(Fortran90Parser::OPERATOR, 0);
}

tree::TerminalNode* Fortran90Parser::GenericSpecContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::DefinedOperatorContext* Fortran90Parser::GenericSpecContext::definedOperator() {
  return getRuleContext<Fortran90Parser::DefinedOperatorContext>(0);
}

tree::TerminalNode* Fortran90Parser::GenericSpecContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::GenericSpecContext::ASSIGNMENT() {
  return getToken(Fortran90Parser::ASSIGNMENT, 0);
}

tree::TerminalNode* Fortran90Parser::GenericSpecContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}


size_t Fortran90Parser::GenericSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleGenericSpec;
}

void Fortran90Parser::GenericSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenericSpec(this);
}

void Fortran90Parser::GenericSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenericSpec(this);
}

Fortran90Parser::GenericSpecContext* Fortran90Parser::genericSpec() {
  GenericSpecContext *_localctx = _tracker.createInstance<GenericSpecContext>(_ctx, getState());
  enterRule(_localctx, 200, Fortran90Parser::RuleGenericSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1482);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::OPERATOR: {
        enterOuterAlt(_localctx, 1);
        setState(1473);
        match(Fortran90Parser::OPERATOR);
        setState(1474);
        match(Fortran90Parser::LPAREN);
        setState(1475);
        definedOperator();
        setState(1476);
        match(Fortran90Parser::RPAREN);
        break;
      }

      case Fortran90Parser::ASSIGNMENT: {
        enterOuterAlt(_localctx, 2);
        setState(1478);
        match(Fortran90Parser::ASSIGNMENT);
        setState(1479);
        match(Fortran90Parser::LPAREN);
        setState(1480);
        match(Fortran90Parser::ASSIGN);
        setState(1481);
        match(Fortran90Parser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefinedOperatorContext ------------------------------------------------------------------

Fortran90Parser::DefinedOperatorContext::DefinedOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::DOP() {
  return getToken(Fortran90Parser::DOP, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::POWER() {
  return getToken(Fortran90Parser::POWER, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::PLUS() {
  return getToken(Fortran90Parser::PLUS, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::MINUS() {
  return getToken(Fortran90Parser::MINUS, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::LT() {
  return getToken(Fortran90Parser::LT, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::LE() {
  return getToken(Fortran90Parser::LE, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::EQ() {
  return getToken(Fortran90Parser::EQ, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::NE() {
  return getToken(Fortran90Parser::NE, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::GT() {
  return getToken(Fortran90Parser::GT, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::GE() {
  return getToken(Fortran90Parser::GE, 0);
}

std::vector<tree::TerminalNode *> Fortran90Parser::DefinedOperatorContext::DIV() {
  return getTokens(Fortran90Parser::DIV);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::DIV(size_t i) {
  return getToken(Fortran90Parser::DIV, i);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::SPOFF() {
  return getToken(Fortran90Parser::SPOFF, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::SPON() {
  return getToken(Fortran90Parser::SPON, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::LNOT() {
  return getToken(Fortran90Parser::LNOT, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::LAND() {
  return getToken(Fortran90Parser::LAND, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::LOR() {
  return getToken(Fortran90Parser::LOR, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::NEQV() {
  return getToken(Fortran90Parser::NEQV, 0);
}

tree::TerminalNode* Fortran90Parser::DefinedOperatorContext::EQV() {
  return getToken(Fortran90Parser::EQV, 0);
}


size_t Fortran90Parser::DefinedOperatorContext::getRuleIndex() const {
  return Fortran90Parser::RuleDefinedOperator;
}

void Fortran90Parser::DefinedOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefinedOperator(this);
}

void Fortran90Parser::DefinedOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefinedOperator(this);
}

Fortran90Parser::DefinedOperatorContext* Fortran90Parser::definedOperator() {
  DefinedOperatorContext *_localctx = _tracker.createInstance<DefinedOperatorContext>(_ctx, getState());
  enterRule(_localctx, 202, Fortran90Parser::RuleDefinedOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1497);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::DOP: {
        enterOuterAlt(_localctx, 1);
        setState(1484);
        match(Fortran90Parser::DOP);
        break;
      }

      case Fortran90Parser::POWER: {
        enterOuterAlt(_localctx, 2);
        setState(1485);
        match(Fortran90Parser::POWER);
        break;
      }

      case Fortran90Parser::STAR: {
        enterOuterAlt(_localctx, 3);
        setState(1486);
        match(Fortran90Parser::STAR);
        break;
      }

      case Fortran90Parser::MINUS:
      case Fortran90Parser::PLUS: {
        enterOuterAlt(_localctx, 4);
        setState(1487);
        _la = _input->LA(1);
        if (!(_la == Fortran90Parser::MINUS

        || _la == Fortran90Parser::PLUS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Fortran90Parser::LT:
      case Fortran90Parser::LE:
      case Fortran90Parser::GT:
      case Fortran90Parser::GE:
      case Fortran90Parser::NE:
      case Fortran90Parser::EQ: {
        enterOuterAlt(_localctx, 5);
        setState(1488);
        _la = _input->LA(1);
        if (!(((((_la - 144) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 144)) & 63) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Fortran90Parser::DIV: {
        enterOuterAlt(_localctx, 6);
        setState(1489);
        match(Fortran90Parser::DIV);
        setState(1490);
        match(Fortran90Parser::SPOFF);
        setState(1491);
        match(Fortran90Parser::DIV);
        setState(1492);
        match(Fortran90Parser::SPON);
        break;
      }

      case Fortran90Parser::LNOT: {
        enterOuterAlt(_localctx, 7);
        setState(1493);
        match(Fortran90Parser::LNOT);
        break;
      }

      case Fortran90Parser::LAND: {
        enterOuterAlt(_localctx, 8);
        setState(1494);
        match(Fortran90Parser::LAND);
        break;
      }

      case Fortran90Parser::LOR: {
        enterOuterAlt(_localctx, 9);
        setState(1495);
        match(Fortran90Parser::LOR);
        break;
      }

      case Fortran90Parser::EQV:
      case Fortran90Parser::NEQV: {
        enterOuterAlt(_localctx, 10);
        setState(1496);
        _la = _input->LA(1);
        if (!(_la == Fortran90Parser::EQV

        || _la == Fortran90Parser::NEQV)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBlockBodyContext ------------------------------------------------------------------

Fortran90Parser::InterfaceBlockBodyContext::InterfaceBlockBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::InterfaceBodyPartConstructContext* Fortran90Parser::InterfaceBlockBodyContext::interfaceBodyPartConstruct() {
  return getRuleContext<Fortran90Parser::InterfaceBodyPartConstructContext>(0);
}

Fortran90Parser::InterfaceBlockBodyContext* Fortran90Parser::InterfaceBlockBodyContext::interfaceBlockBody() {
  return getRuleContext<Fortran90Parser::InterfaceBlockBodyContext>(0);
}


size_t Fortran90Parser::InterfaceBlockBodyContext::getRuleIndex() const {
  return Fortran90Parser::RuleInterfaceBlockBody;
}

void Fortran90Parser::InterfaceBlockBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceBlockBody(this);
}

void Fortran90Parser::InterfaceBlockBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceBlockBody(this);
}


Fortran90Parser::InterfaceBlockBodyContext* Fortran90Parser::interfaceBlockBody() {
   return interfaceBlockBody(0);
}

Fortran90Parser::InterfaceBlockBodyContext* Fortran90Parser::interfaceBlockBody(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::InterfaceBlockBodyContext *_localctx = _tracker.createInstance<InterfaceBlockBodyContext>(_ctx, parentState);
  Fortran90Parser::InterfaceBlockBodyContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 204;
  enterRecursionRule(_localctx, 204, Fortran90Parser::RuleInterfaceBlockBody, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1500);
    interfaceBodyPartConstruct();
    _ctx->stop = _input->LT(-1);
    setState(1506);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<InterfaceBlockBodyContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleInterfaceBlockBody);
        setState(1502);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1503);
        interfaceBodyPartConstruct(); 
      }
      setState(1508);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- InterfaceBodyPartConstructContext ------------------------------------------------------------------

Fortran90Parser::InterfaceBodyPartConstructContext::InterfaceBodyPartConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::InterfaceBodyContext* Fortran90Parser::InterfaceBodyPartConstructContext::interfaceBody() {
  return getRuleContext<Fortran90Parser::InterfaceBodyContext>(0);
}

Fortran90Parser::ModuleProcedureStmtContext* Fortran90Parser::InterfaceBodyPartConstructContext::moduleProcedureStmt() {
  return getRuleContext<Fortran90Parser::ModuleProcedureStmtContext>(0);
}


size_t Fortran90Parser::InterfaceBodyPartConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleInterfaceBodyPartConstruct;
}

void Fortran90Parser::InterfaceBodyPartConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceBodyPartConstruct(this);
}

void Fortran90Parser::InterfaceBodyPartConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceBodyPartConstruct(this);
}

Fortran90Parser::InterfaceBodyPartConstructContext* Fortran90Parser::interfaceBodyPartConstruct() {
  InterfaceBodyPartConstructContext *_localctx = _tracker.createInstance<InterfaceBodyPartConstructContext>(_ctx, getState());
  enterRule(_localctx, 206, Fortran90Parser::RuleInterfaceBodyPartConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1511);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::REAL:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::TYPE: {
        enterOuterAlt(_localctx, 1);
        setState(1509);
        interfaceBody();
        break;
      }

      case Fortran90Parser::MODULE: {
        enterOuterAlt(_localctx, 2);
        setState(1510);
        moduleProcedureStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleProcedureStmtContext ------------------------------------------------------------------

Fortran90Parser::ModuleProcedureStmtContext::ModuleProcedureStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ModuleProcedureStmtContext::MODULE() {
  return getToken(Fortran90Parser::MODULE, 0);
}

tree::TerminalNode* Fortran90Parser::ModuleProcedureStmtContext::PROCEDURE() {
  return getToken(Fortran90Parser::PROCEDURE, 0);
}

Fortran90Parser::ProcedureNameListContext* Fortran90Parser::ModuleProcedureStmtContext::procedureNameList() {
  return getRuleContext<Fortran90Parser::ProcedureNameListContext>(0);
}


size_t Fortran90Parser::ModuleProcedureStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleModuleProcedureStmt;
}

void Fortran90Parser::ModuleProcedureStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleProcedureStmt(this);
}

void Fortran90Parser::ModuleProcedureStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleProcedureStmt(this);
}

Fortran90Parser::ModuleProcedureStmtContext* Fortran90Parser::moduleProcedureStmt() {
  ModuleProcedureStmtContext *_localctx = _tracker.createInstance<ModuleProcedureStmtContext>(_ctx, getState());
  enterRule(_localctx, 208, Fortran90Parser::RuleModuleProcedureStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1513);
    match(Fortran90Parser::MODULE);
    setState(1514);
    match(Fortran90Parser::PROCEDURE);
    setState(1515);
    procedureNameList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureNameListContext ------------------------------------------------------------------

Fortran90Parser::ProcedureNameListContext::ProcedureNameListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ProcedureNameContext *> Fortran90Parser::ProcedureNameListContext::procedureName() {
  return getRuleContexts<Fortran90Parser::ProcedureNameContext>();
}

Fortran90Parser::ProcedureNameContext* Fortran90Parser::ProcedureNameListContext::procedureName(size_t i) {
  return getRuleContext<Fortran90Parser::ProcedureNameContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::ProcedureNameListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::ProcedureNameListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::ProcedureNameListContext::getRuleIndex() const {
  return Fortran90Parser::RuleProcedureNameList;
}

void Fortran90Parser::ProcedureNameListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureNameList(this);
}

void Fortran90Parser::ProcedureNameListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureNameList(this);
}

Fortran90Parser::ProcedureNameListContext* Fortran90Parser::procedureNameList() {
  ProcedureNameListContext *_localctx = _tracker.createInstance<ProcedureNameListContext>(_ctx, getState());
  enterRule(_localctx, 210, Fortran90Parser::RuleProcedureNameList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1517);
    procedureName();
    setState(1522);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1518);
        match(Fortran90Parser::COMMA);
        setState(1519);
        procedureName(); 
      }
      setState(1524);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureNameContext ------------------------------------------------------------------

Fortran90Parser::ProcedureNameContext::ProcedureNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::IdentContext* Fortran90Parser::ProcedureNameContext::ident() {
  return getRuleContext<Fortran90Parser::IdentContext>(0);
}


size_t Fortran90Parser::ProcedureNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleProcedureName;
}

void Fortran90Parser::ProcedureNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureName(this);
}

void Fortran90Parser::ProcedureNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureName(this);
}

Fortran90Parser::ProcedureNameContext* Fortran90Parser::procedureName() {
  ProcedureNameContext *_localctx = _tracker.createInstance<ProcedureNameContext>(_ctx, getState());
  enterRule(_localctx, 212, Fortran90Parser::RuleProcedureName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1525);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBodyContext ------------------------------------------------------------------

Fortran90Parser::InterfaceBodyContext::InterfaceBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::FunctionPrefixContext* Fortran90Parser::InterfaceBodyContext::functionPrefix() {
  return getRuleContext<Fortran90Parser::FunctionPrefixContext>(0);
}

tree::TerminalNode* Fortran90Parser::InterfaceBodyContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

Fortran90Parser::FunctionInterfaceRangeContext* Fortran90Parser::InterfaceBodyContext::functionInterfaceRange() {
  return getRuleContext<Fortran90Parser::FunctionInterfaceRangeContext>(0);
}

tree::TerminalNode* Fortran90Parser::InterfaceBodyContext::SUBROUTINE() {
  return getToken(Fortran90Parser::SUBROUTINE, 0);
}

Fortran90Parser::SubroutineInterfaceRangeContext* Fortran90Parser::InterfaceBodyContext::subroutineInterfaceRange() {
  return getRuleContext<Fortran90Parser::SubroutineInterfaceRangeContext>(0);
}


size_t Fortran90Parser::InterfaceBodyContext::getRuleIndex() const {
  return Fortran90Parser::RuleInterfaceBody;
}

void Fortran90Parser::InterfaceBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceBody(this);
}

void Fortran90Parser::InterfaceBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceBody(this);
}

Fortran90Parser::InterfaceBodyContext* Fortran90Parser::interfaceBody() {
  InterfaceBodyContext *_localctx = _tracker.createInstance<InterfaceBodyContext>(_ctx, getState());
  enterRule(_localctx, 214, Fortran90Parser::RuleInterfaceBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1534);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::REAL:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::TYPE: {
        enterOuterAlt(_localctx, 1);
        setState(1527);
        functionPrefix();
        setState(1528);
        match(Fortran90Parser::NAME);
        setState(1529);
        functionInterfaceRange();
        break;
      }

      case Fortran90Parser::SUBROUTINE: {
        enterOuterAlt(_localctx, 2);
        setState(1531);
        match(Fortran90Parser::SUBROUTINE);
        setState(1532);
        match(Fortran90Parser::NAME);
        setState(1533);
        subroutineInterfaceRange();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineInterfaceRangeContext ------------------------------------------------------------------

Fortran90Parser::SubroutineInterfaceRangeContext::SubroutineInterfaceRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::SubroutineParListContext* Fortran90Parser::SubroutineInterfaceRangeContext::subroutineParList() {
  return getRuleContext<Fortran90Parser::SubroutineParListContext>(0);
}

Fortran90Parser::EndSubroutineStmtContext* Fortran90Parser::SubroutineInterfaceRangeContext::endSubroutineStmt() {
  return getRuleContext<Fortran90Parser::EndSubroutineStmtContext>(0);
}

Fortran90Parser::SubprogramInterfaceBodyContext* Fortran90Parser::SubroutineInterfaceRangeContext::subprogramInterfaceBody() {
  return getRuleContext<Fortran90Parser::SubprogramInterfaceBodyContext>(0);
}


size_t Fortran90Parser::SubroutineInterfaceRangeContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubroutineInterfaceRange;
}

void Fortran90Parser::SubroutineInterfaceRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutineInterfaceRange(this);
}

void Fortran90Parser::SubroutineInterfaceRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutineInterfaceRange(this);
}

Fortran90Parser::SubroutineInterfaceRangeContext* Fortran90Parser::subroutineInterfaceRange() {
  SubroutineInterfaceRangeContext *_localctx = _tracker.createInstance<SubroutineInterfaceRangeContext>(_ctx, getState());
  enterRule(_localctx, 216, Fortran90Parser::RuleSubroutineInterfaceRange);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1536);
    subroutineParList();
    setState(1538);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 288788022366298176) != 0) || _la == Fortran90Parser::DOUBLE || ((((_la - 167) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 167)) & 3276813) != 0)) {
      setState(1537);
      subprogramInterfaceBody(0);
    }
    setState(1540);
    endSubroutineStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndSubroutineStmtContext ------------------------------------------------------------------

Fortran90Parser::EndSubroutineStmtContext::EndSubroutineStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EndSubroutineStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndSubroutineStmtContext::SUBROUTINE() {
  return getToken(Fortran90Parser::SUBROUTINE, 0);
}

tree::TerminalNode* Fortran90Parser::EndSubroutineStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::EndSubroutineStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndSubroutineStmt;
}

void Fortran90Parser::EndSubroutineStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndSubroutineStmt(this);
}

void Fortran90Parser::EndSubroutineStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndSubroutineStmt(this);
}

Fortran90Parser::EndSubroutineStmtContext* Fortran90Parser::endSubroutineStmt() {
  EndSubroutineStmtContext *_localctx = _tracker.createInstance<EndSubroutineStmtContext>(_ctx, getState());
  enterRule(_localctx, 218, Fortran90Parser::RuleEndSubroutineStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1548);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1542);
      match(Fortran90Parser::END);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1543);
      match(Fortran90Parser::END);
      setState(1544);
      match(Fortran90Parser::SUBROUTINE);
      setState(1546);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
      case 1: {
        setState(1545);
        match(Fortran90Parser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecursiveContext ------------------------------------------------------------------

Fortran90Parser::RecursiveContext::RecursiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::RecursiveContext::RECURSIVE() {
  return getToken(Fortran90Parser::RECURSIVE, 0);
}


size_t Fortran90Parser::RecursiveContext::getRuleIndex() const {
  return Fortran90Parser::RuleRecursive;
}

void Fortran90Parser::RecursiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecursive(this);
}

void Fortran90Parser::RecursiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecursive(this);
}

Fortran90Parser::RecursiveContext* Fortran90Parser::recursive() {
  RecursiveContext *_localctx = _tracker.createInstance<RecursiveContext>(_ctx, getState());
  enterRule(_localctx, 220, Fortran90Parser::RuleRecursive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1550);
    match(Fortran90Parser::RECURSIVE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionPrefixContext ------------------------------------------------------------------

Fortran90Parser::FunctionPrefixContext::FunctionPrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Fortran90Parser::FunctionPrefixContext::getRuleIndex() const {
  return Fortran90Parser::RuleFunctionPrefix;
}

void Fortran90Parser::FunctionPrefixContext::copyFrom(FunctionPrefixContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FunctionPrefixRecContext ------------------------------------------------------------------

tree::TerminalNode* Fortran90Parser::FunctionPrefixRecContext::FUNCTION() {
  return getToken(Fortran90Parser::FUNCTION, 0);
}

Fortran90Parser::RecursiveContext* Fortran90Parser::FunctionPrefixRecContext::recursive() {
  return getRuleContext<Fortran90Parser::RecursiveContext>(0);
}

Fortran90Parser::TypeSpecContext* Fortran90Parser::FunctionPrefixRecContext::typeSpec() {
  return getRuleContext<Fortran90Parser::TypeSpecContext>(0);
}

Fortran90Parser::FunctionPrefixRecContext::FunctionPrefixRecContext(FunctionPrefixContext *ctx) { copyFrom(ctx); }

void Fortran90Parser::FunctionPrefixRecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionPrefixRec(this);
}
void Fortran90Parser::FunctionPrefixRecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionPrefixRec(this);
}
//----------------- FunctionPrefixTypContext ------------------------------------------------------------------

Fortran90Parser::TypeSpecContext* Fortran90Parser::FunctionPrefixTypContext::typeSpec() {
  return getRuleContext<Fortran90Parser::TypeSpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::FunctionPrefixTypContext::RECURSIVE() {
  return getToken(Fortran90Parser::RECURSIVE, 0);
}

tree::TerminalNode* Fortran90Parser::FunctionPrefixTypContext::FUNCTION() {
  return getToken(Fortran90Parser::FUNCTION, 0);
}

Fortran90Parser::FunctionPrefixTypContext::FunctionPrefixTypContext(FunctionPrefixContext *ctx) { copyFrom(ctx); }

void Fortran90Parser::FunctionPrefixTypContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionPrefixTyp(this);
}
void Fortran90Parser::FunctionPrefixTypContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionPrefixTyp(this);
}
Fortran90Parser::FunctionPrefixContext* Fortran90Parser::functionPrefix() {
  FunctionPrefixContext *_localctx = _tracker.createInstance<FunctionPrefixContext>(_ctx, getState());
  enterRule(_localctx, 222, Fortran90Parser::RuleFunctionPrefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1563);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<Fortran90Parser::FunctionPrefixRecContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1553);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::RECURSIVE) {
        setState(1552);
        recursive();
      }
      setState(1556);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 8813809762304) != 0) || _la == Fortran90Parser::DOUBLE || ((((_la - 167) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 167)) & 2097165) != 0)) {
        setState(1555);
        typeSpec();
      }
      setState(1558);
      match(Fortran90Parser::FUNCTION);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<Fortran90Parser::FunctionPrefixTypContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1559);
      typeSpec();
      setState(1560);
      match(Fortran90Parser::RECURSIVE);
      setState(1561);
      match(Fortran90Parser::FUNCTION);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionInterfaceRangeContext ------------------------------------------------------------------

Fortran90Parser::FunctionInterfaceRangeContext::FunctionInterfaceRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::FunctionParListContext* Fortran90Parser::FunctionInterfaceRangeContext::functionParList() {
  return getRuleContext<Fortran90Parser::FunctionParListContext>(0);
}

Fortran90Parser::EndFunctionStmtContext* Fortran90Parser::FunctionInterfaceRangeContext::endFunctionStmt() {
  return getRuleContext<Fortran90Parser::EndFunctionStmtContext>(0);
}

Fortran90Parser::SubprogramInterfaceBodyContext* Fortran90Parser::FunctionInterfaceRangeContext::subprogramInterfaceBody() {
  return getRuleContext<Fortran90Parser::SubprogramInterfaceBodyContext>(0);
}


size_t Fortran90Parser::FunctionInterfaceRangeContext::getRuleIndex() const {
  return Fortran90Parser::RuleFunctionInterfaceRange;
}

void Fortran90Parser::FunctionInterfaceRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionInterfaceRange(this);
}

void Fortran90Parser::FunctionInterfaceRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionInterfaceRange(this);
}

Fortran90Parser::FunctionInterfaceRangeContext* Fortran90Parser::functionInterfaceRange() {
  FunctionInterfaceRangeContext *_localctx = _tracker.createInstance<FunctionInterfaceRangeContext>(_ctx, getState());
  enterRule(_localctx, 224, Fortran90Parser::RuleFunctionInterfaceRange);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1565);
    functionParList();
    setState(1567);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 288788022366298176) != 0) || _la == Fortran90Parser::DOUBLE || ((((_la - 167) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 167)) & 3276813) != 0)) {
      setState(1566);
      subprogramInterfaceBody(0);
    }
    setState(1569);
    endFunctionStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionParListContext ------------------------------------------------------------------

Fortran90Parser::FunctionParListContext::FunctionParListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::FunctionParListContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::FunctionParListContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::FunctionParsContext* Fortran90Parser::FunctionParListContext::functionPars() {
  return getRuleContext<Fortran90Parser::FunctionParsContext>(0);
}


size_t Fortran90Parser::FunctionParListContext::getRuleIndex() const {
  return Fortran90Parser::RuleFunctionParList;
}

void Fortran90Parser::FunctionParListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionParList(this);
}

void Fortran90Parser::FunctionParListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionParList(this);
}

Fortran90Parser::FunctionParListContext* Fortran90Parser::functionParList() {
  FunctionParListContext *_localctx = _tracker.createInstance<FunctionParListContext>(_ctx, getState());
  enterRule(_localctx, 226, Fortran90Parser::RuleFunctionParList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1571);
    match(Fortran90Parser::LPAREN);
    setState(1573);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::NAME) {
      setState(1572);
      functionPars();
    }
    setState(1575);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionParsContext ------------------------------------------------------------------

Fortran90Parser::FunctionParsContext::FunctionParsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::FunctionParContext *> Fortran90Parser::FunctionParsContext::functionPar() {
  return getRuleContexts<Fortran90Parser::FunctionParContext>();
}

Fortran90Parser::FunctionParContext* Fortran90Parser::FunctionParsContext::functionPar(size_t i) {
  return getRuleContext<Fortran90Parser::FunctionParContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::FunctionParsContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::FunctionParsContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::FunctionParsContext::getRuleIndex() const {
  return Fortran90Parser::RuleFunctionPars;
}

void Fortran90Parser::FunctionParsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionPars(this);
}

void Fortran90Parser::FunctionParsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionPars(this);
}

Fortran90Parser::FunctionParsContext* Fortran90Parser::functionPars() {
  FunctionParsContext *_localctx = _tracker.createInstance<FunctionParsContext>(_ctx, getState());
  enterRule(_localctx, 228, Fortran90Parser::RuleFunctionPars);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1577);
    functionPar();
    setState(1582);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(1578);
      match(Fortran90Parser::COMMA);
      setState(1579);
      functionPar();
      setState(1584);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionParContext ------------------------------------------------------------------

Fortran90Parser::FunctionParContext::FunctionParContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::DummyArgNameContext* Fortran90Parser::FunctionParContext::dummyArgName() {
  return getRuleContext<Fortran90Parser::DummyArgNameContext>(0);
}


size_t Fortran90Parser::FunctionParContext::getRuleIndex() const {
  return Fortran90Parser::RuleFunctionPar;
}

void Fortran90Parser::FunctionParContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionPar(this);
}

void Fortran90Parser::FunctionParContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionPar(this);
}

Fortran90Parser::FunctionParContext* Fortran90Parser::functionPar() {
  FunctionParContext *_localctx = _tracker.createInstance<FunctionParContext>(_ctx, getState());
  enterRule(_localctx, 230, Fortran90Parser::RuleFunctionPar);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1585);
    dummyArgName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubprogramInterfaceBodyContext ------------------------------------------------------------------

Fortran90Parser::SubprogramInterfaceBodyContext::SubprogramInterfaceBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::SpecificationPartConstructContext* Fortran90Parser::SubprogramInterfaceBodyContext::specificationPartConstruct() {
  return getRuleContext<Fortran90Parser::SpecificationPartConstructContext>(0);
}

Fortran90Parser::SubprogramInterfaceBodyContext* Fortran90Parser::SubprogramInterfaceBodyContext::subprogramInterfaceBody() {
  return getRuleContext<Fortran90Parser::SubprogramInterfaceBodyContext>(0);
}


size_t Fortran90Parser::SubprogramInterfaceBodyContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubprogramInterfaceBody;
}

void Fortran90Parser::SubprogramInterfaceBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogramInterfaceBody(this);
}

void Fortran90Parser::SubprogramInterfaceBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogramInterfaceBody(this);
}


Fortran90Parser::SubprogramInterfaceBodyContext* Fortran90Parser::subprogramInterfaceBody() {
   return subprogramInterfaceBody(0);
}

Fortran90Parser::SubprogramInterfaceBodyContext* Fortran90Parser::subprogramInterfaceBody(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::SubprogramInterfaceBodyContext *_localctx = _tracker.createInstance<SubprogramInterfaceBodyContext>(_ctx, parentState);
  Fortran90Parser::SubprogramInterfaceBodyContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 232;
  enterRecursionRule(_localctx, 232, Fortran90Parser::RuleSubprogramInterfaceBody, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1588);
    specificationPartConstruct();
    _ctx->stop = _input->LT(-1);
    setState(1594);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<SubprogramInterfaceBodyContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleSubprogramInterfaceBody);
        setState(1590);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1591);
        specificationPartConstruct(); 
      }
      setState(1596);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- EndFunctionStmtContext ------------------------------------------------------------------

Fortran90Parser::EndFunctionStmtContext::EndFunctionStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EndFunctionStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndFunctionStmtContext::FUNCTION() {
  return getToken(Fortran90Parser::FUNCTION, 0);
}

tree::TerminalNode* Fortran90Parser::EndFunctionStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::EndFunctionStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndFunctionStmt;
}

void Fortran90Parser::EndFunctionStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndFunctionStmt(this);
}

void Fortran90Parser::EndFunctionStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndFunctionStmt(this);
}

Fortran90Parser::EndFunctionStmtContext* Fortran90Parser::endFunctionStmt() {
  EndFunctionStmtContext *_localctx = _tracker.createInstance<EndFunctionStmtContext>(_ctx, getState());
  enterRule(_localctx, 234, Fortran90Parser::RuleEndFunctionStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1603);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1597);
      match(Fortran90Parser::END);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1598);
      match(Fortran90Parser::END);
      setState(1599);
      match(Fortran90Parser::FUNCTION);
      setState(1601);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
      case 1: {
        setState(1600);
        match(Fortran90Parser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DerivedTypeDefContext ------------------------------------------------------------------

Fortran90Parser::DerivedTypeDefContext::DerivedTypeDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::DerivedTypeStmtContext* Fortran90Parser::DerivedTypeDefContext::derivedTypeStmt() {
  return getRuleContext<Fortran90Parser::DerivedTypeStmtContext>(0);
}

Fortran90Parser::DerivedTypeBodyContext* Fortran90Parser::DerivedTypeDefContext::derivedTypeBody() {
  return getRuleContext<Fortran90Parser::DerivedTypeBodyContext>(0);
}

Fortran90Parser::EndTypeStmtContext* Fortran90Parser::DerivedTypeDefContext::endTypeStmt() {
  return getRuleContext<Fortran90Parser::EndTypeStmtContext>(0);
}


size_t Fortran90Parser::DerivedTypeDefContext::getRuleIndex() const {
  return Fortran90Parser::RuleDerivedTypeDef;
}

void Fortran90Parser::DerivedTypeDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDerivedTypeDef(this);
}

void Fortran90Parser::DerivedTypeDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDerivedTypeDef(this);
}

Fortran90Parser::DerivedTypeDefContext* Fortran90Parser::derivedTypeDef() {
  DerivedTypeDefContext *_localctx = _tracker.createInstance<DerivedTypeDefContext>(_ctx, getState());
  enterRule(_localctx, 236, Fortran90Parser::RuleDerivedTypeDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1605);
    derivedTypeStmt();
    setState(1606);
    derivedTypeBody(0);
    setState(1607);
    endTypeStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndTypeStmtContext ------------------------------------------------------------------

Fortran90Parser::EndTypeStmtContext::EndTypeStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EndTypeStmtContext::ENDTYPE() {
  return getToken(Fortran90Parser::ENDTYPE, 0);
}

tree::TerminalNode* Fortran90Parser::EndTypeStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::EndTypeStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndTypeStmtContext::TYPE() {
  return getToken(Fortran90Parser::TYPE, 0);
}


size_t Fortran90Parser::EndTypeStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndTypeStmt;
}

void Fortran90Parser::EndTypeStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndTypeStmt(this);
}

void Fortran90Parser::EndTypeStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndTypeStmt(this);
}

Fortran90Parser::EndTypeStmtContext* Fortran90Parser::endTypeStmt() {
  EndTypeStmtContext *_localctx = _tracker.createInstance<EndTypeStmtContext>(_ctx, getState());
  enterRule(_localctx, 238, Fortran90Parser::RuleEndTypeStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1617);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1609);
      match(Fortran90Parser::ENDTYPE);
      setState(1610);
      match(Fortran90Parser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1611);
      match(Fortran90Parser::ENDTYPE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1612);
      match(Fortran90Parser::END);
      setState(1613);
      match(Fortran90Parser::TYPE);
      setState(1614);
      match(Fortran90Parser::NAME);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1615);
      match(Fortran90Parser::END);
      setState(1616);
      match(Fortran90Parser::TYPE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DerivedTypeStmtContext ------------------------------------------------------------------

Fortran90Parser::DerivedTypeStmtContext::DerivedTypeStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DerivedTypeStmtContext::TYPE() {
  return getToken(Fortran90Parser::TYPE, 0);
}

tree::TerminalNode* Fortran90Parser::DerivedTypeStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::DerivedTypeStmtContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}

tree::TerminalNode* Fortran90Parser::DerivedTypeStmtContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

tree::TerminalNode* Fortran90Parser::DerivedTypeStmtContext::ACCESSSPEC() {
  return getToken(Fortran90Parser::ACCESSSPEC, 0);
}


size_t Fortran90Parser::DerivedTypeStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleDerivedTypeStmt;
}

void Fortran90Parser::DerivedTypeStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDerivedTypeStmt(this);
}

void Fortran90Parser::DerivedTypeStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDerivedTypeStmt(this);
}

Fortran90Parser::DerivedTypeStmtContext* Fortran90Parser::derivedTypeStmt() {
  DerivedTypeStmtContext *_localctx = _tracker.createInstance<DerivedTypeStmtContext>(_ctx, getState());
  enterRule(_localctx, 240, Fortran90Parser::RuleDerivedTypeStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1629);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1619);
      match(Fortran90Parser::TYPE);
      setState(1620);
      match(Fortran90Parser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1621);
      match(Fortran90Parser::TYPE);
      setState(1622);
      match(Fortran90Parser::DOUBLECOLON);
      setState(1623);
      match(Fortran90Parser::NAME);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1624);
      match(Fortran90Parser::TYPE);
      setState(1625);
      match(Fortran90Parser::COMMA);
      setState(1626);
      match(Fortran90Parser::ACCESSSPEC);
      setState(1627);
      match(Fortran90Parser::DOUBLECOLON);
      setState(1628);
      match(Fortran90Parser::NAME);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DerivedTypeBodyContext ------------------------------------------------------------------

Fortran90Parser::DerivedTypeBodyContext::DerivedTypeBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::DerivedTypeBodyConstructContext* Fortran90Parser::DerivedTypeBodyContext::derivedTypeBodyConstruct() {
  return getRuleContext<Fortran90Parser::DerivedTypeBodyConstructContext>(0);
}

Fortran90Parser::DerivedTypeBodyContext* Fortran90Parser::DerivedTypeBodyContext::derivedTypeBody() {
  return getRuleContext<Fortran90Parser::DerivedTypeBodyContext>(0);
}


size_t Fortran90Parser::DerivedTypeBodyContext::getRuleIndex() const {
  return Fortran90Parser::RuleDerivedTypeBody;
}

void Fortran90Parser::DerivedTypeBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDerivedTypeBody(this);
}

void Fortran90Parser::DerivedTypeBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDerivedTypeBody(this);
}


Fortran90Parser::DerivedTypeBodyContext* Fortran90Parser::derivedTypeBody() {
   return derivedTypeBody(0);
}

Fortran90Parser::DerivedTypeBodyContext* Fortran90Parser::derivedTypeBody(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::DerivedTypeBodyContext *_localctx = _tracker.createInstance<DerivedTypeBodyContext>(_ctx, parentState);
  Fortran90Parser::DerivedTypeBodyContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 242;
  enterRecursionRule(_localctx, 242, Fortran90Parser::RuleDerivedTypeBody, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1632);
    derivedTypeBodyConstruct();
    _ctx->stop = _input->LT(-1);
    setState(1638);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DerivedTypeBodyContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDerivedTypeBody);
        setState(1634);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1635);
        derivedTypeBodyConstruct(); 
      }
      setState(1640);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DerivedTypeBodyConstructContext ------------------------------------------------------------------

Fortran90Parser::DerivedTypeBodyConstructContext::DerivedTypeBodyConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::PrivateSequenceStmtContext* Fortran90Parser::DerivedTypeBodyConstructContext::privateSequenceStmt() {
  return getRuleContext<Fortran90Parser::PrivateSequenceStmtContext>(0);
}

Fortran90Parser::ComponentDefStmtContext* Fortran90Parser::DerivedTypeBodyConstructContext::componentDefStmt() {
  return getRuleContext<Fortran90Parser::ComponentDefStmtContext>(0);
}


size_t Fortran90Parser::DerivedTypeBodyConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleDerivedTypeBodyConstruct;
}

void Fortran90Parser::DerivedTypeBodyConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDerivedTypeBodyConstruct(this);
}

void Fortran90Parser::DerivedTypeBodyConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDerivedTypeBodyConstruct(this);
}

Fortran90Parser::DerivedTypeBodyConstructContext* Fortran90Parser::derivedTypeBodyConstruct() {
  DerivedTypeBodyConstructContext *_localctx = _tracker.createInstance<DerivedTypeBodyConstructContext>(_ctx, getState());
  enterRule(_localctx, 244, Fortran90Parser::RuleDerivedTypeBodyConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1643);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE: {
        enterOuterAlt(_localctx, 1);
        setState(1641);
        privateSequenceStmt();
        break;
      }

      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::REAL:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::TYPE: {
        enterOuterAlt(_localctx, 2);
        setState(1642);
        componentDefStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivateSequenceStmtContext ------------------------------------------------------------------

Fortran90Parser::PrivateSequenceStmtContext::PrivateSequenceStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::PrivateSequenceStmtContext::PRIVATE() {
  return getToken(Fortran90Parser::PRIVATE, 0);
}

tree::TerminalNode* Fortran90Parser::PrivateSequenceStmtContext::SEQUENCE() {
  return getToken(Fortran90Parser::SEQUENCE, 0);
}


size_t Fortran90Parser::PrivateSequenceStmtContext::getRuleIndex() const {
  return Fortran90Parser::RulePrivateSequenceStmt;
}

void Fortran90Parser::PrivateSequenceStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivateSequenceStmt(this);
}

void Fortran90Parser::PrivateSequenceStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivateSequenceStmt(this);
}

Fortran90Parser::PrivateSequenceStmtContext* Fortran90Parser::privateSequenceStmt() {
  PrivateSequenceStmtContext *_localctx = _tracker.createInstance<PrivateSequenceStmtContext>(_ctx, getState());
  enterRule(_localctx, 246, Fortran90Parser::RulePrivateSequenceStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1645);
    _la = _input->LA(1);
    if (!(_la == Fortran90Parser::PRIVATE

    || _la == Fortran90Parser::SEQUENCE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComponentDefStmtContext ------------------------------------------------------------------

Fortran90Parser::ComponentDefStmtContext::ComponentDefStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::TypeSpecContext* Fortran90Parser::ComponentDefStmtContext::typeSpec() {
  return getRuleContext<Fortran90Parser::TypeSpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::ComponentDefStmtContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::ComponentAttrSpecListContext* Fortran90Parser::ComponentDefStmtContext::componentAttrSpecList() {
  return getRuleContext<Fortran90Parser::ComponentAttrSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::ComponentDefStmtContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}

Fortran90Parser::ComponentDeclListContext* Fortran90Parser::ComponentDefStmtContext::componentDeclList() {
  return getRuleContext<Fortran90Parser::ComponentDeclListContext>(0);
}


size_t Fortran90Parser::ComponentDefStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleComponentDefStmt;
}

void Fortran90Parser::ComponentDefStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponentDefStmt(this);
}

void Fortran90Parser::ComponentDefStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponentDefStmt(this);
}

Fortran90Parser::ComponentDefStmtContext* Fortran90Parser::componentDefStmt() {
  ComponentDefStmtContext *_localctx = _tracker.createInstance<ComponentDefStmtContext>(_ctx, getState());
  enterRule(_localctx, 248, Fortran90Parser::RuleComponentDefStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1660);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1647);
      typeSpec();
      setState(1648);
      match(Fortran90Parser::COMMA);
      setState(1649);
      componentAttrSpecList();
      setState(1650);
      match(Fortran90Parser::DOUBLECOLON);
      setState(1651);
      componentDeclList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1653);
      typeSpec();
      setState(1654);
      match(Fortran90Parser::DOUBLECOLON);
      setState(1655);
      componentDeclList();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1657);
      typeSpec();
      setState(1658);
      componentDeclList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComponentDeclListContext ------------------------------------------------------------------

Fortran90Parser::ComponentDeclListContext::ComponentDeclListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ComponentDeclContext *> Fortran90Parser::ComponentDeclListContext::componentDecl() {
  return getRuleContexts<Fortran90Parser::ComponentDeclContext>();
}

Fortran90Parser::ComponentDeclContext* Fortran90Parser::ComponentDeclListContext::componentDecl(size_t i) {
  return getRuleContext<Fortran90Parser::ComponentDeclContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::ComponentDeclListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::ComponentDeclListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::ComponentDeclListContext::getRuleIndex() const {
  return Fortran90Parser::RuleComponentDeclList;
}

void Fortran90Parser::ComponentDeclListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponentDeclList(this);
}

void Fortran90Parser::ComponentDeclListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponentDeclList(this);
}

Fortran90Parser::ComponentDeclListContext* Fortran90Parser::componentDeclList() {
  ComponentDeclListContext *_localctx = _tracker.createInstance<ComponentDeclListContext>(_ctx, getState());
  enterRule(_localctx, 250, Fortran90Parser::RuleComponentDeclList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1662);
    componentDecl();
    setState(1667);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1663);
        match(Fortran90Parser::COMMA);
        setState(1664);
        componentDecl(); 
      }
      setState(1669);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComponentDeclContext ------------------------------------------------------------------

Fortran90Parser::ComponentDeclContext::ComponentDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ComponentNameContext* Fortran90Parser::ComponentDeclContext::componentName() {
  return getRuleContext<Fortran90Parser::ComponentNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::ComponentDeclContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ComponentArraySpecContext* Fortran90Parser::ComponentDeclContext::componentArraySpec() {
  return getRuleContext<Fortran90Parser::ComponentArraySpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::ComponentDeclContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::ComponentDeclContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}

Fortran90Parser::CharLengthContext* Fortran90Parser::ComponentDeclContext::charLength() {
  return getRuleContext<Fortran90Parser::CharLengthContext>(0);
}

tree::TerminalNode* Fortran90Parser::ComponentDeclContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::ComponentDeclContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::ComponentDeclContext::getRuleIndex() const {
  return Fortran90Parser::RuleComponentDecl;
}

void Fortran90Parser::ComponentDeclContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponentDecl(this);
}

void Fortran90Parser::ComponentDeclContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponentDecl(this);
}

Fortran90Parser::ComponentDeclContext* Fortran90Parser::componentDecl() {
  ComponentDeclContext *_localctx = _tracker.createInstance<ComponentDeclContext>(_ctx, getState());
  enterRule(_localctx, 252, Fortran90Parser::RuleComponentDecl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1713);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1670);
      componentName();
      setState(1671);
      match(Fortran90Parser::LPAREN);
      setState(1672);
      componentArraySpec();
      setState(1673);
      match(Fortran90Parser::RPAREN);
      setState(1674);
      match(Fortran90Parser::STAR);
      setState(1675);
      charLength();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1677);
      componentName();
      setState(1678);
      match(Fortran90Parser::LPAREN);
      setState(1679);
      componentArraySpec();
      setState(1680);
      match(Fortran90Parser::RPAREN);
      setState(1681);
      match(Fortran90Parser::ASSIGN);
      setState(1682);
      expression(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1684);
      componentName();
      setState(1685);
      match(Fortran90Parser::LPAREN);
      setState(1686);
      componentArraySpec();
      setState(1687);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1689);
      componentName();
      setState(1690);
      match(Fortran90Parser::STAR);
      setState(1691);
      charLength();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1693);
      componentName();
      setState(1694);
      match(Fortran90Parser::ASSIGN);
      setState(1695);
      expression(0);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1697);
      componentName();
      setState(1698);
      match(Fortran90Parser::STAR);
      setState(1699);
      charLength();
      setState(1700);
      match(Fortran90Parser::ASSIGN);
      setState(1701);
      expression(0);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1703);
      componentName();
      setState(1704);
      match(Fortran90Parser::STAR);
      setState(1705);
      charLength();
      setState(1706);
      match(Fortran90Parser::LPAREN);
      setState(1707);
      componentArraySpec();
      setState(1708);
      match(Fortran90Parser::RPAREN);
      setState(1709);
      match(Fortran90Parser::ASSIGN);
      setState(1710);
      expression(0);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1712);
      componentName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComponentNameContext ------------------------------------------------------------------

Fortran90Parser::ComponentNameContext::ComponentNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ComponentNameContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::ComponentNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleComponentName;
}

void Fortran90Parser::ComponentNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponentName(this);
}

void Fortran90Parser::ComponentNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponentName(this);
}

Fortran90Parser::ComponentNameContext* Fortran90Parser::componentName() {
  ComponentNameContext *_localctx = _tracker.createInstance<ComponentNameContext>(_ctx, getState());
  enterRule(_localctx, 254, Fortran90Parser::RuleComponentName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1715);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComponentAttrSpecListContext ------------------------------------------------------------------

Fortran90Parser::ComponentAttrSpecListContext::ComponentAttrSpecListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ComponentAttrSpecContext *> Fortran90Parser::ComponentAttrSpecListContext::componentAttrSpec() {
  return getRuleContexts<Fortran90Parser::ComponentAttrSpecContext>();
}

Fortran90Parser::ComponentAttrSpecContext* Fortran90Parser::ComponentAttrSpecListContext::componentAttrSpec(size_t i) {
  return getRuleContext<Fortran90Parser::ComponentAttrSpecContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::ComponentAttrSpecListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::ComponentAttrSpecListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::ComponentAttrSpecListContext::getRuleIndex() const {
  return Fortran90Parser::RuleComponentAttrSpecList;
}

void Fortran90Parser::ComponentAttrSpecListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponentAttrSpecList(this);
}

void Fortran90Parser::ComponentAttrSpecListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponentAttrSpecList(this);
}

Fortran90Parser::ComponentAttrSpecListContext* Fortran90Parser::componentAttrSpecList() {
  ComponentAttrSpecListContext *_localctx = _tracker.createInstance<ComponentAttrSpecListContext>(_ctx, getState());
  enterRule(_localctx, 256, Fortran90Parser::RuleComponentAttrSpecList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1717);
    componentAttrSpec();
    setState(1722);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(1718);
      match(Fortran90Parser::COMMA);
      setState(1719);
      componentAttrSpec();
      setState(1724);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComponentAttrSpecContext ------------------------------------------------------------------

Fortran90Parser::ComponentAttrSpecContext::ComponentAttrSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ComponentAttrSpecContext::POINTER() {
  return getToken(Fortran90Parser::POINTER, 0);
}

tree::TerminalNode* Fortran90Parser::ComponentAttrSpecContext::DIMENSION() {
  return getToken(Fortran90Parser::DIMENSION, 0);
}

tree::TerminalNode* Fortran90Parser::ComponentAttrSpecContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ComponentArraySpecContext* Fortran90Parser::ComponentAttrSpecContext::componentArraySpec() {
  return getRuleContext<Fortran90Parser::ComponentArraySpecContext>(0);
}

tree::TerminalNode* Fortran90Parser::ComponentAttrSpecContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::ComponentAttrSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleComponentAttrSpec;
}

void Fortran90Parser::ComponentAttrSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponentAttrSpec(this);
}

void Fortran90Parser::ComponentAttrSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponentAttrSpec(this);
}

Fortran90Parser::ComponentAttrSpecContext* Fortran90Parser::componentAttrSpec() {
  ComponentAttrSpecContext *_localctx = _tracker.createInstance<ComponentAttrSpecContext>(_ctx, getState());
  enterRule(_localctx, 258, Fortran90Parser::RuleComponentAttrSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1731);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::POINTER: {
        enterOuterAlt(_localctx, 1);
        setState(1725);
        match(Fortran90Parser::POINTER);
        break;
      }

      case Fortran90Parser::DIMENSION: {
        enterOuterAlt(_localctx, 2);
        setState(1726);
        match(Fortran90Parser::DIMENSION);
        setState(1727);
        match(Fortran90Parser::LPAREN);
        setState(1728);
        componentArraySpec();
        setState(1729);
        match(Fortran90Parser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComponentArraySpecContext ------------------------------------------------------------------

Fortran90Parser::ComponentArraySpecContext::ComponentArraySpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExplicitShapeSpecListContext* Fortran90Parser::ComponentArraySpecContext::explicitShapeSpecList() {
  return getRuleContext<Fortran90Parser::ExplicitShapeSpecListContext>(0);
}

Fortran90Parser::DeferredShapeSpecListContext* Fortran90Parser::ComponentArraySpecContext::deferredShapeSpecList() {
  return getRuleContext<Fortran90Parser::DeferredShapeSpecListContext>(0);
}


size_t Fortran90Parser::ComponentArraySpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleComponentArraySpec;
}

void Fortran90Parser::ComponentArraySpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponentArraySpec(this);
}

void Fortran90Parser::ComponentArraySpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponentArraySpec(this);
}

Fortran90Parser::ComponentArraySpecContext* Fortran90Parser::componentArraySpec() {
  ComponentArraySpecContext *_localctx = _tracker.createInstance<ComponentArraySpecContext>(_ctx, getState());
  enterRule(_localctx, 260, Fortran90Parser::RuleComponentArraySpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1735);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::CONTAINS:
      case Fortran90Parser::MODULE:
      case Fortran90Parser::ENDMODULE:
      case Fortran90Parser::PROGRAM:
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::BLOCK:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::ENDINTERFACE:
      case Fortran90Parser::PROCEDURE:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::IN:
      case Fortran90Parser::OUT:
      case Fortran90Parser::INOUT:
      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::USE:
      case Fortran90Parser::ONLY:
      case Fortran90Parser::ASSIGNMENT:
      case Fortran90Parser::DOP:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::ELSEWHERE:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::BLOCKDATA:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::NONE:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::THEN:
      case Fortran90Parser::ELSE:
      case Fortran90Parser::ENDIF:
      case Fortran90Parser::RESULT:
      case Fortran90Parser::ELSEIF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::ENDWHERE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::ENDSELECT:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::CASE:
      case Fortran90Parser::DEFAULT:
      case Fortran90Parser::DIRECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::REC:
      case Fortran90Parser::ENDDO:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::FMT:
      case Fortran90Parser::UNIT:
      case Fortran90Parser::PAD:
      case Fortran90Parser::ACTION:
      case Fortran90Parser::DELIM:
      case Fortran90Parser::IOLENGTH:
      case Fortran90Parser::READWRITE:
      case Fortran90Parser::ERR:
      case Fortran90Parser::SIZE:
      case Fortran90Parser::ADVANCE:
      case Fortran90Parser::NML:
      case Fortran90Parser::IOSTAT:
      case Fortran90Parser::FORMAT:
      case Fortran90Parser::LET:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::IOSTART:
      case Fortran90Parser::SEQUENTIAL:
      case Fortran90Parser::LABEL:
      case Fortran90Parser::FILE:
      case Fortran90Parser::STATUS:
      case Fortran90Parser::ACCESS:
      case Fortran90Parser::POSITION:
      case Fortran90Parser::FORM:
      case Fortran90Parser::RECL:
      case Fortran90Parser::EXIST:
      case Fortran90Parser::OPENED:
      case Fortran90Parser::NUMBER:
      case Fortran90Parser::NAMED:
      case Fortran90Parser::NAME_:
      case Fortran90Parser::FORMATTED:
      case Fortran90Parser::UNFORMATTED:
      case Fortran90Parser::NEXTREC:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ENDBLOCKDATA:
      case Fortran90Parser::ENDBLOCK:
      case Fortran90Parser::KIND:
      case Fortran90Parser::LEN:
      case Fortran90Parser::LPAREN:
      case Fortran90Parser::WHILE:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::STAT:
      case Fortran90Parser::MINUS:
      case Fortran90Parser::PLUS:
      case Fortran90Parser::LNOT:
      case Fortran90Parser::TRUE:
      case Fortran90Parser::FALSE:
      case Fortran90Parser::CCON:
      case Fortran90Parser::HOLLERITH:
      case Fortran90Parser::CONCATOP:
      case Fortran90Parser::CTRLDIRECT:
      case Fortran90Parser::CTRLREC:
      case Fortran90Parser::TO:
      case Fortran90Parser::SUBPROGRAMBLOCK:
      case Fortran90Parser::DOBLOCK:
      case Fortran90Parser::AIF:
      case Fortran90Parser::THENBLOCK:
      case Fortran90Parser::ELSEBLOCK:
      case Fortran90Parser::CODEROOT:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::PRECISION:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::OBRACKETSLASH:
      case Fortran90Parser::SCON:
      case Fortran90Parser::RDCON:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ENDTYPE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::SPOFF:
      case Fortran90Parser::SPON:
      case Fortran90Parser::ICON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1733);
        explicitShapeSpecList();
        break;
      }

      case Fortran90Parser::COLON: {
        enterOuterAlt(_localctx, 2);
        setState(1734);
        deferredShapeSpecList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitShapeSpecListContext ------------------------------------------------------------------

Fortran90Parser::ExplicitShapeSpecListContext::ExplicitShapeSpecListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ExplicitShapeSpecContext *> Fortran90Parser::ExplicitShapeSpecListContext::explicitShapeSpec() {
  return getRuleContexts<Fortran90Parser::ExplicitShapeSpecContext>();
}

Fortran90Parser::ExplicitShapeSpecContext* Fortran90Parser::ExplicitShapeSpecListContext::explicitShapeSpec(size_t i) {
  return getRuleContext<Fortran90Parser::ExplicitShapeSpecContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::ExplicitShapeSpecListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::ExplicitShapeSpecListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::ExplicitShapeSpecListContext::getRuleIndex() const {
  return Fortran90Parser::RuleExplicitShapeSpecList;
}

void Fortran90Parser::ExplicitShapeSpecListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitShapeSpecList(this);
}

void Fortran90Parser::ExplicitShapeSpecListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitShapeSpecList(this);
}

Fortran90Parser::ExplicitShapeSpecListContext* Fortran90Parser::explicitShapeSpecList() {
  ExplicitShapeSpecListContext *_localctx = _tracker.createInstance<ExplicitShapeSpecListContext>(_ctx, getState());
  enterRule(_localctx, 262, Fortran90Parser::RuleExplicitShapeSpecList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1737);
    explicitShapeSpec();
    setState(1742);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1738);
        match(Fortran90Parser::COMMA);
        setState(1739);
        explicitShapeSpec(); 
      }
      setState(1744);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitShapeSpecContext ------------------------------------------------------------------

Fortran90Parser::ExplicitShapeSpecContext::ExplicitShapeSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::LowerBoundContext* Fortran90Parser::ExplicitShapeSpecContext::lowerBound() {
  return getRuleContext<Fortran90Parser::LowerBoundContext>(0);
}

tree::TerminalNode* Fortran90Parser::ExplicitShapeSpecContext::COLON() {
  return getToken(Fortran90Parser::COLON, 0);
}

Fortran90Parser::UpperBoundContext* Fortran90Parser::ExplicitShapeSpecContext::upperBound() {
  return getRuleContext<Fortran90Parser::UpperBoundContext>(0);
}


size_t Fortran90Parser::ExplicitShapeSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleExplicitShapeSpec;
}

void Fortran90Parser::ExplicitShapeSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitShapeSpec(this);
}

void Fortran90Parser::ExplicitShapeSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitShapeSpec(this);
}

Fortran90Parser::ExplicitShapeSpecContext* Fortran90Parser::explicitShapeSpec() {
  ExplicitShapeSpecContext *_localctx = _tracker.createInstance<ExplicitShapeSpecContext>(_ctx, getState());
  enterRule(_localctx, 264, Fortran90Parser::RuleExplicitShapeSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1750);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1745);
      lowerBound();
      setState(1746);
      match(Fortran90Parser::COLON);
      setState(1747);
      upperBound();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1749);
      upperBound();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LowerBoundContext ------------------------------------------------------------------

Fortran90Parser::LowerBoundContext::LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExpressionContext* Fortran90Parser::LowerBoundContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::LowerBoundContext::getRuleIndex() const {
  return Fortran90Parser::RuleLowerBound;
}

void Fortran90Parser::LowerBoundContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLowerBound(this);
}

void Fortran90Parser::LowerBoundContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLowerBound(this);
}

Fortran90Parser::LowerBoundContext* Fortran90Parser::lowerBound() {
  LowerBoundContext *_localctx = _tracker.createInstance<LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 266, Fortran90Parser::RuleLowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1752);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UpperBoundContext ------------------------------------------------------------------

Fortran90Parser::UpperBoundContext::UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExpressionContext* Fortran90Parser::UpperBoundContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::UpperBoundContext::getRuleIndex() const {
  return Fortran90Parser::RuleUpperBound;
}

void Fortran90Parser::UpperBoundContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpperBound(this);
}

void Fortran90Parser::UpperBoundContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpperBound(this);
}

Fortran90Parser::UpperBoundContext* Fortran90Parser::upperBound() {
  UpperBoundContext *_localctx = _tracker.createInstance<UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 268, Fortran90Parser::RuleUpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1754);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeferredShapeSpecListContext ------------------------------------------------------------------

Fortran90Parser::DeferredShapeSpecListContext::DeferredShapeSpecListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::DeferredShapeSpecContext *> Fortran90Parser::DeferredShapeSpecListContext::deferredShapeSpec() {
  return getRuleContexts<Fortran90Parser::DeferredShapeSpecContext>();
}

Fortran90Parser::DeferredShapeSpecContext* Fortran90Parser::DeferredShapeSpecListContext::deferredShapeSpec(size_t i) {
  return getRuleContext<Fortran90Parser::DeferredShapeSpecContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::DeferredShapeSpecListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::DeferredShapeSpecListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::DeferredShapeSpecListContext::getRuleIndex() const {
  return Fortran90Parser::RuleDeferredShapeSpecList;
}

void Fortran90Parser::DeferredShapeSpecListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeferredShapeSpecList(this);
}

void Fortran90Parser::DeferredShapeSpecListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeferredShapeSpecList(this);
}

Fortran90Parser::DeferredShapeSpecListContext* Fortran90Parser::deferredShapeSpecList() {
  DeferredShapeSpecListContext *_localctx = _tracker.createInstance<DeferredShapeSpecListContext>(_ctx, getState());
  enterRule(_localctx, 270, Fortran90Parser::RuleDeferredShapeSpecList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1756);
    deferredShapeSpec();
    setState(1761);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1757);
        match(Fortran90Parser::COMMA);
        setState(1758);
        deferredShapeSpec(); 
      }
      setState(1763);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeferredShapeSpecContext ------------------------------------------------------------------

Fortran90Parser::DeferredShapeSpecContext::DeferredShapeSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DeferredShapeSpecContext::COLON() {
  return getToken(Fortran90Parser::COLON, 0);
}


size_t Fortran90Parser::DeferredShapeSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleDeferredShapeSpec;
}

void Fortran90Parser::DeferredShapeSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeferredShapeSpec(this);
}

void Fortran90Parser::DeferredShapeSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeferredShapeSpec(this);
}

Fortran90Parser::DeferredShapeSpecContext* Fortran90Parser::deferredShapeSpec() {
  DeferredShapeSpecContext *_localctx = _tracker.createInstance<DeferredShapeSpecContext>(_ctx, getState());
  enterRule(_localctx, 272, Fortran90Parser::RuleDeferredShapeSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1764);
    match(Fortran90Parser::COLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSpecContext ------------------------------------------------------------------

Fortran90Parser::TypeSpecContext::TypeSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::TypeSpecContext::INTEGER() {
  return getToken(Fortran90Parser::INTEGER, 0);
}

tree::TerminalNode* Fortran90Parser::TypeSpecContext::REAL() {
  return getToken(Fortran90Parser::REAL, 0);
}

tree::TerminalNode* Fortran90Parser::TypeSpecContext::DOUBLEPRECISION() {
  return getToken(Fortran90Parser::DOUBLEPRECISION, 0);
}

tree::TerminalNode* Fortran90Parser::TypeSpecContext::COMPLEX() {
  return getToken(Fortran90Parser::COMPLEX, 0);
}

tree::TerminalNode* Fortran90Parser::TypeSpecContext::LOGICAL() {
  return getToken(Fortran90Parser::LOGICAL, 0);
}

tree::TerminalNode* Fortran90Parser::TypeSpecContext::CHARACTER() {
  return getToken(Fortran90Parser::CHARACTER, 0);
}

Fortran90Parser::LengthSelectorContext* Fortran90Parser::TypeSpecContext::lengthSelector() {
  return getRuleContext<Fortran90Parser::LengthSelectorContext>(0);
}

Fortran90Parser::KindSelectorContext* Fortran90Parser::TypeSpecContext::kindSelector() {
  return getRuleContext<Fortran90Parser::KindSelectorContext>(0);
}

tree::TerminalNode* Fortran90Parser::TypeSpecContext::DOUBLE() {
  return getToken(Fortran90Parser::DOUBLE, 0);
}

tree::TerminalNode* Fortran90Parser::TypeSpecContext::PRECISION() {
  return getToken(Fortran90Parser::PRECISION, 0);
}

Fortran90Parser::CharSelectorContext* Fortran90Parser::TypeSpecContext::charSelector() {
  return getRuleContext<Fortran90Parser::CharSelectorContext>(0);
}

tree::TerminalNode* Fortran90Parser::TypeSpecContext::TYPE() {
  return getToken(Fortran90Parser::TYPE, 0);
}

tree::TerminalNode* Fortran90Parser::TypeSpecContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::TypeNameContext* Fortran90Parser::TypeSpecContext::typeName() {
  return getRuleContext<Fortran90Parser::TypeNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::TypeSpecContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::TypeSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleTypeSpec;
}

void Fortran90Parser::TypeSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSpec(this);
}

void Fortran90Parser::TypeSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSpec(this);
}

Fortran90Parser::TypeSpecContext* Fortran90Parser::typeSpec() {
  TypeSpecContext *_localctx = _tracker.createInstance<TypeSpecContext>(_ctx, getState());
  enterRule(_localctx, 274, Fortran90Parser::RuleTypeSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1791);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1766);
      match(Fortran90Parser::INTEGER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1767);
      match(Fortran90Parser::REAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1768);
      match(Fortran90Parser::DOUBLEPRECISION);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1769);
      match(Fortran90Parser::COMPLEX);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1770);
      match(Fortran90Parser::LOGICAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1771);
      match(Fortran90Parser::CHARACTER);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1772);
      match(Fortran90Parser::CHARACTER);
      setState(1773);
      lengthSelector();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1774);
      match(Fortran90Parser::INTEGER);
      setState(1775);
      kindSelector();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1776);
      match(Fortran90Parser::REAL);
      setState(1777);
      kindSelector();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1778);
      match(Fortran90Parser::DOUBLE);
      setState(1779);
      match(Fortran90Parser::PRECISION);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1780);
      match(Fortran90Parser::COMPLEX);
      setState(1781);
      kindSelector();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1782);
      match(Fortran90Parser::CHARACTER);
      setState(1783);
      charSelector();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1784);
      match(Fortran90Parser::LOGICAL);
      setState(1785);
      kindSelector();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1786);
      match(Fortran90Parser::TYPE);
      setState(1787);
      match(Fortran90Parser::LPAREN);
      setState(1788);
      typeName();
      setState(1789);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KindSelectorContext ------------------------------------------------------------------

Fortran90Parser::KindSelectorContext::KindSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::KindSelectorContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::KindSelectorContext::KIND() {
  return getToken(Fortran90Parser::KIND, 0);
}

tree::TerminalNode* Fortran90Parser::KindSelectorContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::KindSelectorContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::KindSelectorContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::KindSelectorContext::getRuleIndex() const {
  return Fortran90Parser::RuleKindSelector;
}

void Fortran90Parser::KindSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKindSelector(this);
}

void Fortran90Parser::KindSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKindSelector(this);
}

Fortran90Parser::KindSelectorContext* Fortran90Parser::kindSelector() {
  KindSelectorContext *_localctx = _tracker.createInstance<KindSelectorContext>(_ctx, getState());
  enterRule(_localctx, 276, Fortran90Parser::RuleKindSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1803);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1793);
      match(Fortran90Parser::LPAREN);
      setState(1794);
      match(Fortran90Parser::KIND);
      setState(1795);
      match(Fortran90Parser::ASSIGN);
      setState(1796);
      expression(0);
      setState(1797);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1799);
      match(Fortran90Parser::LPAREN);
      setState(1800);
      expression(0);
      setState(1801);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNameContext ------------------------------------------------------------------

Fortran90Parser::TypeNameContext::TypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::IdentContext* Fortran90Parser::TypeNameContext::ident() {
  return getRuleContext<Fortran90Parser::IdentContext>(0);
}


size_t Fortran90Parser::TypeNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleTypeName;
}

void Fortran90Parser::TypeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeName(this);
}

void Fortran90Parser::TypeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeName(this);
}

Fortran90Parser::TypeNameContext* Fortran90Parser::typeName() {
  TypeNameContext *_localctx = _tracker.createInstance<TypeNameContext>(_ctx, getState());
  enterRule(_localctx, 278, Fortran90Parser::RuleTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1805);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharSelectorContext ------------------------------------------------------------------

Fortran90Parser::CharSelectorContext::CharSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CharSelectorContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::CharSelectorContext::LEN() {
  return getToken(Fortran90Parser::LEN, 0);
}

std::vector<tree::TerminalNode *> Fortran90Parser::CharSelectorContext::ASSIGN() {
  return getTokens(Fortran90Parser::ASSIGN);
}

tree::TerminalNode* Fortran90Parser::CharSelectorContext::ASSIGN(size_t i) {
  return getToken(Fortran90Parser::ASSIGN, i);
}

Fortran90Parser::TypeParamValueContext* Fortran90Parser::CharSelectorContext::typeParamValue() {
  return getRuleContext<Fortran90Parser::TypeParamValueContext>(0);
}

tree::TerminalNode* Fortran90Parser::CharSelectorContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

tree::TerminalNode* Fortran90Parser::CharSelectorContext::KIND() {
  return getToken(Fortran90Parser::KIND, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::CharSelectorContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::CharSelectorContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::CharSelectorContext::getRuleIndex() const {
  return Fortran90Parser::RuleCharSelector;
}

void Fortran90Parser::CharSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharSelector(this);
}

void Fortran90Parser::CharSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharSelector(this);
}

Fortran90Parser::CharSelectorContext* Fortran90Parser::charSelector() {
  CharSelectorContext *_localctx = _tracker.createInstance<CharSelectorContext>(_ctx, getState());
  enterRule(_localctx, 280, Fortran90Parser::RuleCharSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1841);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1807);
      match(Fortran90Parser::LPAREN);
      setState(1808);
      match(Fortran90Parser::LEN);
      setState(1809);
      match(Fortran90Parser::ASSIGN);
      setState(1810);
      typeParamValue();
      setState(1811);
      match(Fortran90Parser::COMMA);
      setState(1812);
      match(Fortran90Parser::KIND);
      setState(1813);
      match(Fortran90Parser::ASSIGN);
      setState(1814);
      expression(0);
      setState(1815);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1817);
      match(Fortran90Parser::LPAREN);
      setState(1818);
      match(Fortran90Parser::LEN);
      setState(1819);
      match(Fortran90Parser::ASSIGN);
      setState(1820);
      typeParamValue();
      setState(1821);
      match(Fortran90Parser::COMMA);
      setState(1822);
      expression(0);
      setState(1823);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1825);
      match(Fortran90Parser::LPAREN);
      setState(1826);
      match(Fortran90Parser::LEN);
      setState(1827);
      match(Fortran90Parser::ASSIGN);
      setState(1828);
      typeParamValue();
      setState(1829);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1831);
      match(Fortran90Parser::LPAREN);
      setState(1832);
      match(Fortran90Parser::KIND);
      setState(1833);
      match(Fortran90Parser::ASSIGN);
      setState(1834);
      expression(0);
      setState(1835);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1837);
      match(Fortran90Parser::LPAREN);
      setState(1838);
      expression(0);
      setState(1839);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LengthSelectorContext ------------------------------------------------------------------

Fortran90Parser::LengthSelectorContext::LengthSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::LengthSelectorContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}

Fortran90Parser::CharLengthContext* Fortran90Parser::LengthSelectorContext::charLength() {
  return getRuleContext<Fortran90Parser::CharLengthContext>(0);
}

tree::TerminalNode* Fortran90Parser::LengthSelectorContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::TypeParamValueContext* Fortran90Parser::LengthSelectorContext::typeParamValue() {
  return getRuleContext<Fortran90Parser::TypeParamValueContext>(0);
}

tree::TerminalNode* Fortran90Parser::LengthSelectorContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::LengthSelectorContext::getRuleIndex() const {
  return Fortran90Parser::RuleLengthSelector;
}

void Fortran90Parser::LengthSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLengthSelector(this);
}

void Fortran90Parser::LengthSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLengthSelector(this);
}

Fortran90Parser::LengthSelectorContext* Fortran90Parser::lengthSelector() {
  LengthSelectorContext *_localctx = _tracker.createInstance<LengthSelectorContext>(_ctx, getState());
  enterRule(_localctx, 282, Fortran90Parser::RuleLengthSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1849);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1843);
        match(Fortran90Parser::STAR);
        setState(1844);
        charLength();
        break;
      }

      case Fortran90Parser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(1845);
        match(Fortran90Parser::LPAREN);
        setState(1846);
        typeParamValue();
        setState(1847);
        match(Fortran90Parser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharLengthContext ------------------------------------------------------------------

Fortran90Parser::CharLengthContext::CharLengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CharLengthContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::TypeParamValueContext* Fortran90Parser::CharLengthContext::typeParamValue() {
  return getRuleContext<Fortran90Parser::TypeParamValueContext>(0);
}

tree::TerminalNode* Fortran90Parser::CharLengthContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::ConstantContext* Fortran90Parser::CharLengthContext::constant() {
  return getRuleContext<Fortran90Parser::ConstantContext>(0);
}


size_t Fortran90Parser::CharLengthContext::getRuleIndex() const {
  return Fortran90Parser::RuleCharLength;
}

void Fortran90Parser::CharLengthContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharLength(this);
}

void Fortran90Parser::CharLengthContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharLength(this);
}

Fortran90Parser::CharLengthContext* Fortran90Parser::charLength() {
  CharLengthContext *_localctx = _tracker.createInstance<CharLengthContext>(_ctx, getState());
  enterRule(_localctx, 284, Fortran90Parser::RuleCharLength);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1856);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1851);
      match(Fortran90Parser::LPAREN);
      setState(1852);
      typeParamValue();
      setState(1853);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1855);
      constant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantContext ------------------------------------------------------------------

Fortran90Parser::ConstantContext::ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::NamedConstantUseContext* Fortran90Parser::ConstantContext::namedConstantUse() {
  return getRuleContext<Fortran90Parser::NamedConstantUseContext>(0);
}

Fortran90Parser::UnsignedArithmeticConstantContext* Fortran90Parser::ConstantContext::unsignedArithmeticConstant() {
  return getRuleContext<Fortran90Parser::UnsignedArithmeticConstantContext>(0);
}

tree::TerminalNode* Fortran90Parser::ConstantContext::PLUS() {
  return getToken(Fortran90Parser::PLUS, 0);
}

tree::TerminalNode* Fortran90Parser::ConstantContext::MINUS() {
  return getToken(Fortran90Parser::MINUS, 0);
}

tree::TerminalNode* Fortran90Parser::ConstantContext::SCON() {
  return getToken(Fortran90Parser::SCON, 0);
}

tree::TerminalNode* Fortran90Parser::ConstantContext::HOLLERITH() {
  return getToken(Fortran90Parser::HOLLERITH, 0);
}

Fortran90Parser::LogicalConstantContext* Fortran90Parser::ConstantContext::logicalConstant() {
  return getRuleContext<Fortran90Parser::LogicalConstantContext>(0);
}

tree::TerminalNode* Fortran90Parser::ConstantContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}

tree::TerminalNode* Fortran90Parser::ConstantContext::UNDERSCORE() {
  return getToken(Fortran90Parser::UNDERSCORE, 0);
}

Fortran90Parser::StructureConstructorContext* Fortran90Parser::ConstantContext::structureConstructor() {
  return getRuleContext<Fortran90Parser::StructureConstructorContext>(0);
}

Fortran90Parser::BozLiteralConstantContext* Fortran90Parser::ConstantContext::bozLiteralConstant() {
  return getRuleContext<Fortran90Parser::BozLiteralConstantContext>(0);
}


size_t Fortran90Parser::ConstantContext::getRuleIndex() const {
  return Fortran90Parser::RuleConstant;
}

void Fortran90Parser::ConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant(this);
}

void Fortran90Parser::ConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant(this);
}

Fortran90Parser::ConstantContext* Fortran90Parser::constant() {
  ConstantContext *_localctx = _tracker.createInstance<ConstantContext>(_ctx, getState());
  enterRule(_localctx, 286, Fortran90Parser::RuleConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1875);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1858);
      namedConstantUse();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1860);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::MINUS

      || _la == Fortran90Parser::PLUS) {
        setState(1859);
        _la = _input->LA(1);
        if (!(_la == Fortran90Parser::MINUS

        || _la == Fortran90Parser::PLUS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1862);
      unsignedArithmeticConstant();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1863);
      match(Fortran90Parser::SCON);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1864);
      match(Fortran90Parser::HOLLERITH);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1865);
      logicalConstant();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1866);
      match(Fortran90Parser::ICON);
      setState(1867);
      match(Fortran90Parser::UNDERSCORE);
      setState(1868);
      match(Fortran90Parser::SCON);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1869);
      namedConstantUse();
      setState(1870);
      match(Fortran90Parser::UNDERSCORE);
      setState(1871);
      match(Fortran90Parser::SCON);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1873);
      structureConstructor();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1874);
      bozLiteralConstant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BozLiteralConstantContext ------------------------------------------------------------------

Fortran90Parser::BozLiteralConstantContext::BozLiteralConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::BozLiteralConstantContext::BCON() {
  return getToken(Fortran90Parser::BCON, 0);
}

tree::TerminalNode* Fortran90Parser::BozLiteralConstantContext::OCON() {
  return getToken(Fortran90Parser::OCON, 0);
}

tree::TerminalNode* Fortran90Parser::BozLiteralConstantContext::ZCON() {
  return getToken(Fortran90Parser::ZCON, 0);
}


size_t Fortran90Parser::BozLiteralConstantContext::getRuleIndex() const {
  return Fortran90Parser::RuleBozLiteralConstant;
}

void Fortran90Parser::BozLiteralConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBozLiteralConstant(this);
}

void Fortran90Parser::BozLiteralConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBozLiteralConstant(this);
}

Fortran90Parser::BozLiteralConstantContext* Fortran90Parser::bozLiteralConstant() {
  BozLiteralConstantContext *_localctx = _tracker.createInstance<BozLiteralConstantContext>(_ctx, getState());
  enterRule(_localctx, 288, Fortran90Parser::RuleBozLiteralConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1877);
    _la = _input->LA(1);
    if (!(((((_la - 175) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 175)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureConstructorContext ------------------------------------------------------------------

Fortran90Parser::StructureConstructorContext::StructureConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::TypeNameContext* Fortran90Parser::StructureConstructorContext::typeName() {
  return getRuleContext<Fortran90Parser::TypeNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::StructureConstructorContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ExprListContext* Fortran90Parser::StructureConstructorContext::exprList() {
  return getRuleContext<Fortran90Parser::ExprListContext>(0);
}

tree::TerminalNode* Fortran90Parser::StructureConstructorContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::StructureConstructorContext::getRuleIndex() const {
  return Fortran90Parser::RuleStructureConstructor;
}

void Fortran90Parser::StructureConstructorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructureConstructor(this);
}

void Fortran90Parser::StructureConstructorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructureConstructor(this);
}

Fortran90Parser::StructureConstructorContext* Fortran90Parser::structureConstructor() {
  StructureConstructorContext *_localctx = _tracker.createInstance<StructureConstructorContext>(_ctx, getState());
  enterRule(_localctx, 290, Fortran90Parser::RuleStructureConstructor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1879);
    typeName();
    setState(1880);
    match(Fortran90Parser::LPAREN);
    setState(1881);
    exprList();
    setState(1882);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprListContext ------------------------------------------------------------------

Fortran90Parser::ExprListContext::ExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ExpressionContext *> Fortran90Parser::ExprListContext::expression() {
  return getRuleContexts<Fortran90Parser::ExpressionContext>();
}

Fortran90Parser::ExpressionContext* Fortran90Parser::ExprListContext::expression(size_t i) {
  return getRuleContext<Fortran90Parser::ExpressionContext>(i);
}

tree::TerminalNode* Fortran90Parser::ExprListContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}


size_t Fortran90Parser::ExprListContext::getRuleIndex() const {
  return Fortran90Parser::RuleExprList;
}

void Fortran90Parser::ExprListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExprList(this);
}

void Fortran90Parser::ExprListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExprList(this);
}

Fortran90Parser::ExprListContext* Fortran90Parser::exprList() {
  ExprListContext *_localctx = _tracker.createInstance<ExprListContext>(_ctx, getState());
  enterRule(_localctx, 292, Fortran90Parser::RuleExprList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1884);
    expression(0);

    setState(1885);
    match(Fortran90Parser::COMMA);
    setState(1886);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedConstantUseContext ------------------------------------------------------------------

Fortran90Parser::NamedConstantUseContext::NamedConstantUseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::NamedConstantUseContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::NamedConstantUseContext::getRuleIndex() const {
  return Fortran90Parser::RuleNamedConstantUse;
}

void Fortran90Parser::NamedConstantUseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedConstantUse(this);
}

void Fortran90Parser::NamedConstantUseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedConstantUse(this);
}

Fortran90Parser::NamedConstantUseContext* Fortran90Parser::namedConstantUse() {
  NamedConstantUseContext *_localctx = _tracker.createInstance<NamedConstantUseContext>(_ctx, getState());
  enterRule(_localctx, 294, Fortran90Parser::RuleNamedConstantUse);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1888);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParamValueContext ------------------------------------------------------------------

Fortran90Parser::TypeParamValueContext::TypeParamValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExpressionContext* Fortran90Parser::TypeParamValueContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::TypeParamValueContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}


size_t Fortran90Parser::TypeParamValueContext::getRuleIndex() const {
  return Fortran90Parser::RuleTypeParamValue;
}

void Fortran90Parser::TypeParamValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParamValue(this);
}

void Fortran90Parser::TypeParamValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParamValue(this);
}

Fortran90Parser::TypeParamValueContext* Fortran90Parser::typeParamValue() {
  TypeParamValueContext *_localctx = _tracker.createInstance<TypeParamValueContext>(_ctx, getState());
  enterRule(_localctx, 296, Fortran90Parser::RuleTypeParamValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1892);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::CONTAINS:
      case Fortran90Parser::MODULE:
      case Fortran90Parser::ENDMODULE:
      case Fortran90Parser::PROGRAM:
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::BLOCK:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::ENDINTERFACE:
      case Fortran90Parser::PROCEDURE:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::IN:
      case Fortran90Parser::OUT:
      case Fortran90Parser::INOUT:
      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::USE:
      case Fortran90Parser::ONLY:
      case Fortran90Parser::ASSIGNMENT:
      case Fortran90Parser::DOP:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::ELSEWHERE:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::BLOCKDATA:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::NONE:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::THEN:
      case Fortran90Parser::ELSE:
      case Fortran90Parser::ENDIF:
      case Fortran90Parser::RESULT:
      case Fortran90Parser::ELSEIF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::ENDWHERE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::ENDSELECT:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::CASE:
      case Fortran90Parser::DEFAULT:
      case Fortran90Parser::DIRECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::REC:
      case Fortran90Parser::ENDDO:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::FMT:
      case Fortran90Parser::UNIT:
      case Fortran90Parser::PAD:
      case Fortran90Parser::ACTION:
      case Fortran90Parser::DELIM:
      case Fortran90Parser::IOLENGTH:
      case Fortran90Parser::READWRITE:
      case Fortran90Parser::ERR:
      case Fortran90Parser::SIZE:
      case Fortran90Parser::ADVANCE:
      case Fortran90Parser::NML:
      case Fortran90Parser::IOSTAT:
      case Fortran90Parser::FORMAT:
      case Fortran90Parser::LET:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::IOSTART:
      case Fortran90Parser::SEQUENTIAL:
      case Fortran90Parser::LABEL:
      case Fortran90Parser::FILE:
      case Fortran90Parser::STATUS:
      case Fortran90Parser::ACCESS:
      case Fortran90Parser::POSITION:
      case Fortran90Parser::FORM:
      case Fortran90Parser::RECL:
      case Fortran90Parser::EXIST:
      case Fortran90Parser::OPENED:
      case Fortran90Parser::NUMBER:
      case Fortran90Parser::NAMED:
      case Fortran90Parser::NAME_:
      case Fortran90Parser::FORMATTED:
      case Fortran90Parser::UNFORMATTED:
      case Fortran90Parser::NEXTREC:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ENDBLOCKDATA:
      case Fortran90Parser::ENDBLOCK:
      case Fortran90Parser::KIND:
      case Fortran90Parser::LEN:
      case Fortran90Parser::LPAREN:
      case Fortran90Parser::WHILE:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::STAT:
      case Fortran90Parser::MINUS:
      case Fortran90Parser::PLUS:
      case Fortran90Parser::LNOT:
      case Fortran90Parser::TRUE:
      case Fortran90Parser::FALSE:
      case Fortran90Parser::CCON:
      case Fortran90Parser::HOLLERITH:
      case Fortran90Parser::CONCATOP:
      case Fortran90Parser::CTRLDIRECT:
      case Fortran90Parser::CTRLREC:
      case Fortran90Parser::TO:
      case Fortran90Parser::SUBPROGRAMBLOCK:
      case Fortran90Parser::DOBLOCK:
      case Fortran90Parser::AIF:
      case Fortran90Parser::THENBLOCK:
      case Fortran90Parser::ELSEBLOCK:
      case Fortran90Parser::CODEROOT:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::PRECISION:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::OBRACKETSLASH:
      case Fortran90Parser::SCON:
      case Fortran90Parser::RDCON:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ENDTYPE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::SPOFF:
      case Fortran90Parser::SPON:
      case Fortran90Parser::ICON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1890);
        expression(0);
        break;
      }

      case Fortran90Parser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(1891);
        match(Fortran90Parser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleStmtContext ------------------------------------------------------------------

Fortran90Parser::ModuleStmtContext::ModuleStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ModuleStmtContext::MODULE() {
  return getToken(Fortran90Parser::MODULE, 0);
}

Fortran90Parser::ModuleNameContext* Fortran90Parser::ModuleStmtContext::moduleName() {
  return getRuleContext<Fortran90Parser::ModuleNameContext>(0);
}


size_t Fortran90Parser::ModuleStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleModuleStmt;
}

void Fortran90Parser::ModuleStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleStmt(this);
}

void Fortran90Parser::ModuleStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleStmt(this);
}

Fortran90Parser::ModuleStmtContext* Fortran90Parser::moduleStmt() {
  ModuleStmtContext *_localctx = _tracker.createInstance<ModuleStmtContext>(_ctx, getState());
  enterRule(_localctx, 298, Fortran90Parser::RuleModuleStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1894);
    match(Fortran90Parser::MODULE);
    setState(1895);
    moduleName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleNameContext ------------------------------------------------------------------

Fortran90Parser::ModuleNameContext::ModuleNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::IdentContext* Fortran90Parser::ModuleNameContext::ident() {
  return getRuleContext<Fortran90Parser::IdentContext>(0);
}


size_t Fortran90Parser::ModuleNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleModuleName;
}

void Fortran90Parser::ModuleNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleName(this);
}

void Fortran90Parser::ModuleNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleName(this);
}

Fortran90Parser::ModuleNameContext* Fortran90Parser::moduleName() {
  ModuleNameContext *_localctx = _tracker.createInstance<ModuleNameContext>(_ctx, getState());
  enterRule(_localctx, 300, Fortran90Parser::RuleModuleName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1897);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentContext ------------------------------------------------------------------

Fortran90Parser::IdentContext::IdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::IdentContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::IdentContext::getRuleIndex() const {
  return Fortran90Parser::RuleIdent;
}

void Fortran90Parser::IdentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdent(this);
}

void Fortran90Parser::IdentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdent(this);
}

Fortran90Parser::IdentContext* Fortran90Parser::ident() {
  IdentContext *_localctx = _tracker.createInstance<IdentContext>(_ctx, getState());
  enterRule(_localctx, 302, Fortran90Parser::RuleIdent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1899);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleBodyContext ------------------------------------------------------------------

Fortran90Parser::ModuleBodyContext::ModuleBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Fortran90Parser::ModuleBodyContext::getRuleIndex() const {
  return Fortran90Parser::RuleModuleBody;
}

void Fortran90Parser::ModuleBodyContext::copyFrom(ModuleBodyContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ComplexSubmoduleContext ------------------------------------------------------------------

Fortran90Parser::ModuleBodyContext* Fortran90Parser::ComplexSubmoduleContext::moduleBody() {
  return getRuleContext<Fortran90Parser::ModuleBodyContext>(0);
}

Fortran90Parser::ModuleSubprogramPartConstructContext* Fortran90Parser::ComplexSubmoduleContext::moduleSubprogramPartConstruct() {
  return getRuleContext<Fortran90Parser::ModuleSubprogramPartConstructContext>(0);
}

Fortran90Parser::ComplexSubmoduleContext::ComplexSubmoduleContext(ModuleBodyContext *ctx) { copyFrom(ctx); }

void Fortran90Parser::ComplexSubmoduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComplexSubmodule(this);
}
void Fortran90Parser::ComplexSubmoduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComplexSubmodule(this);
}
//----------------- ComplexSpecPartContext ------------------------------------------------------------------

Fortran90Parser::ModuleBodyContext* Fortran90Parser::ComplexSpecPartContext::moduleBody() {
  return getRuleContext<Fortran90Parser::ModuleBodyContext>(0);
}

Fortran90Parser::SpecificationPartConstructContext* Fortran90Parser::ComplexSpecPartContext::specificationPartConstruct() {
  return getRuleContext<Fortran90Parser::SpecificationPartConstructContext>(0);
}

Fortran90Parser::ComplexSpecPartContext::ComplexSpecPartContext(ModuleBodyContext *ctx) { copyFrom(ctx); }

void Fortran90Parser::ComplexSpecPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComplexSpecPart(this);
}
void Fortran90Parser::ComplexSpecPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComplexSpecPart(this);
}
//----------------- SubmoduleStmtContext ------------------------------------------------------------------

Fortran90Parser::ModuleSubprogramPartConstructContext* Fortran90Parser::SubmoduleStmtContext::moduleSubprogramPartConstruct() {
  return getRuleContext<Fortran90Parser::ModuleSubprogramPartConstructContext>(0);
}

Fortran90Parser::SubmoduleStmtContext::SubmoduleStmtContext(ModuleBodyContext *ctx) { copyFrom(ctx); }

void Fortran90Parser::SubmoduleStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubmoduleStmt(this);
}
void Fortran90Parser::SubmoduleStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubmoduleStmt(this);
}
//----------------- SpecPartStmtContext ------------------------------------------------------------------

Fortran90Parser::SpecificationPartConstructContext* Fortran90Parser::SpecPartStmtContext::specificationPartConstruct() {
  return getRuleContext<Fortran90Parser::SpecificationPartConstructContext>(0);
}

Fortran90Parser::SpecPartStmtContext::SpecPartStmtContext(ModuleBodyContext *ctx) { copyFrom(ctx); }

void Fortran90Parser::SpecPartStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecPartStmt(this);
}
void Fortran90Parser::SpecPartStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecPartStmt(this);
}

Fortran90Parser::ModuleBodyContext* Fortran90Parser::moduleBody() {
   return moduleBody(0);
}

Fortran90Parser::ModuleBodyContext* Fortran90Parser::moduleBody(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::ModuleBodyContext *_localctx = _tracker.createInstance<ModuleBodyContext>(_ctx, parentState);
  Fortran90Parser::ModuleBodyContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 304;
  enterRecursionRule(_localctx, 304, Fortran90Parser::RuleModuleBody, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1904);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<SpecPartStmtContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(1902);
      specificationPartConstruct();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<SubmoduleStmtContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1903);
      moduleSubprogramPartConstruct();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1912);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1910);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ComplexSpecPartContext>(_tracker.createInstance<ModuleBodyContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleModuleBody);
          setState(1906);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1907);
          specificationPartConstruct();
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ComplexSubmoduleContext>(_tracker.createInstance<ModuleBodyContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleModuleBody);
          setState(1908);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1909);
          moduleSubprogramPartConstruct();
          break;
        }

        default:
          break;
        } 
      }
      setState(1914);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ModuleSubprogramPartConstructContext ------------------------------------------------------------------

Fortran90Parser::ModuleSubprogramPartConstructContext::ModuleSubprogramPartConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ContainsStmtContext* Fortran90Parser::ModuleSubprogramPartConstructContext::containsStmt() {
  return getRuleContext<Fortran90Parser::ContainsStmtContext>(0);
}

Fortran90Parser::ModuleSubprogramContext* Fortran90Parser::ModuleSubprogramPartConstructContext::moduleSubprogram() {
  return getRuleContext<Fortran90Parser::ModuleSubprogramContext>(0);
}


size_t Fortran90Parser::ModuleSubprogramPartConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleModuleSubprogramPartConstruct;
}

void Fortran90Parser::ModuleSubprogramPartConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleSubprogramPartConstruct(this);
}

void Fortran90Parser::ModuleSubprogramPartConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleSubprogramPartConstruct(this);
}

Fortran90Parser::ModuleSubprogramPartConstructContext* Fortran90Parser::moduleSubprogramPartConstruct() {
  ModuleSubprogramPartConstructContext *_localctx = _tracker.createInstance<ModuleSubprogramPartConstructContext>(_ctx, getState());
  enterRule(_localctx, 306, Fortran90Parser::RuleModuleSubprogramPartConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1917);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::CONTAINS: {
        enterOuterAlt(_localctx, 1);
        setState(1915);
        containsStmt();
        break;
      }

      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::REAL:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::TYPE: {
        enterOuterAlt(_localctx, 2);
        setState(1916);
        moduleSubprogram();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContainsStmtContext ------------------------------------------------------------------

Fortran90Parser::ContainsStmtContext::ContainsStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ContainsStmtContext::CONTAINS() {
  return getToken(Fortran90Parser::CONTAINS, 0);
}


size_t Fortran90Parser::ContainsStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleContainsStmt;
}

void Fortran90Parser::ContainsStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContainsStmt(this);
}

void Fortran90Parser::ContainsStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContainsStmt(this);
}

Fortran90Parser::ContainsStmtContext* Fortran90Parser::containsStmt() {
  ContainsStmtContext *_localctx = _tracker.createInstance<ContainsStmtContext>(_ctx, getState());
  enterRule(_localctx, 308, Fortran90Parser::RuleContainsStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1919);
    match(Fortran90Parser::CONTAINS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleSubprogramContext ------------------------------------------------------------------

Fortran90Parser::ModuleSubprogramContext::ModuleSubprogramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::FunctionSubprogramContext* Fortran90Parser::ModuleSubprogramContext::functionSubprogram() {
  return getRuleContext<Fortran90Parser::FunctionSubprogramContext>(0);
}

Fortran90Parser::SubroutineSubprogramContext* Fortran90Parser::ModuleSubprogramContext::subroutineSubprogram() {
  return getRuleContext<Fortran90Parser::SubroutineSubprogramContext>(0);
}


size_t Fortran90Parser::ModuleSubprogramContext::getRuleIndex() const {
  return Fortran90Parser::RuleModuleSubprogram;
}

void Fortran90Parser::ModuleSubprogramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleSubprogram(this);
}

void Fortran90Parser::ModuleSubprogramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleSubprogram(this);
}

Fortran90Parser::ModuleSubprogramContext* Fortran90Parser::moduleSubprogram() {
  ModuleSubprogramContext *_localctx = _tracker.createInstance<ModuleSubprogramContext>(_ctx, getState());
  enterRule(_localctx, 310, Fortran90Parser::RuleModuleSubprogram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1923);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1921);
      functionSubprogram();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1922);
      subroutineSubprogram();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionSubprogramContext ------------------------------------------------------------------

Fortran90Parser::FunctionSubprogramContext::FunctionSubprogramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::FunctionPrefixContext* Fortran90Parser::FunctionSubprogramContext::functionPrefix() {
  return getRuleContext<Fortran90Parser::FunctionPrefixContext>(0);
}

Fortran90Parser::FunctionNameContext* Fortran90Parser::FunctionSubprogramContext::functionName() {
  return getRuleContext<Fortran90Parser::FunctionNameContext>(0);
}

Fortran90Parser::FunctionRangeContext* Fortran90Parser::FunctionSubprogramContext::functionRange() {
  return getRuleContext<Fortran90Parser::FunctionRangeContext>(0);
}


size_t Fortran90Parser::FunctionSubprogramContext::getRuleIndex() const {
  return Fortran90Parser::RuleFunctionSubprogram;
}

void Fortran90Parser::FunctionSubprogramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionSubprogram(this);
}

void Fortran90Parser::FunctionSubprogramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionSubprogram(this);
}

Fortran90Parser::FunctionSubprogramContext* Fortran90Parser::functionSubprogram() {
  FunctionSubprogramContext *_localctx = _tracker.createInstance<FunctionSubprogramContext>(_ctx, getState());
  enterRule(_localctx, 312, Fortran90Parser::RuleFunctionSubprogram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1925);
    functionPrefix();
    setState(1926);
    functionName();
    setState(1927);
    functionRange();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionNameContext ------------------------------------------------------------------

Fortran90Parser::FunctionNameContext::FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::FunctionNameContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::FunctionNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleFunctionName;
}

void Fortran90Parser::FunctionNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionName(this);
}

void Fortran90Parser::FunctionNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionName(this);
}

Fortran90Parser::FunctionNameContext* Fortran90Parser::functionName() {
  FunctionNameContext *_localctx = _tracker.createInstance<FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 314, Fortran90Parser::RuleFunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1929);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionRangeContext ------------------------------------------------------------------

Fortran90Parser::FunctionRangeContext::FunctionRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::FunctionParListContext* Fortran90Parser::FunctionRangeContext::functionParList() {
  return getRuleContext<Fortran90Parser::FunctionParListContext>(0);
}

Fortran90Parser::EndFunctionStmtContext* Fortran90Parser::FunctionRangeContext::endFunctionStmt() {
  return getRuleContext<Fortran90Parser::EndFunctionStmtContext>(0);
}

Fortran90Parser::BodyContext* Fortran90Parser::FunctionRangeContext::body() {
  return getRuleContext<Fortran90Parser::BodyContext>(0);
}

tree::TerminalNode* Fortran90Parser::FunctionRangeContext::RESULT() {
  return getToken(Fortran90Parser::RESULT, 0);
}

tree::TerminalNode* Fortran90Parser::FunctionRangeContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::FunctionRangeContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::FunctionRangeContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::BodyPlusInternalsContext* Fortran90Parser::FunctionRangeContext::bodyPlusInternals() {
  return getRuleContext<Fortran90Parser::BodyPlusInternalsContext>(0);
}


size_t Fortran90Parser::FunctionRangeContext::getRuleIndex() const {
  return Fortran90Parser::RuleFunctionRange;
}

void Fortran90Parser::FunctionRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionRange(this);
}

void Fortran90Parser::FunctionRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionRange(this);
}

Fortran90Parser::FunctionRangeContext* Fortran90Parser::functionRange() {
  FunctionRangeContext *_localctx = _tracker.createInstance<FunctionRangeContext>(_ctx, getState());
  enterRule(_localctx, 316, Fortran90Parser::RuleFunctionRange);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1959);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1931);
      functionParList();
      setState(1933);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
      case 1: {
        setState(1932);
        body();
        break;
      }

      default:
        break;
      }
      setState(1935);
      endFunctionStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1937);
      functionParList();
      setState(1938);
      match(Fortran90Parser::RESULT);
      setState(1939);
      match(Fortran90Parser::LPAREN);
      setState(1940);
      match(Fortran90Parser::NAME);
      setState(1941);
      match(Fortran90Parser::RPAREN);
      setState(1943);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
      case 1: {
        setState(1942);
        body();
        break;
      }

      default:
        break;
      }
      setState(1945);
      endFunctionStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1947);
      functionParList();
      setState(1948);
      match(Fortran90Parser::RESULT);
      setState(1949);
      match(Fortran90Parser::LPAREN);
      setState(1950);
      match(Fortran90Parser::NAME);
      setState(1951);
      match(Fortran90Parser::RPAREN);
      setState(1952);
      bodyPlusInternals(0);
      setState(1953);
      endFunctionStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1955);
      functionParList();
      setState(1956);
      bodyPlusInternals(0);
      setState(1957);
      endFunctionStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyContext ------------------------------------------------------------------

Fortran90Parser::BodyContext::BodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::BodyConstructContext *> Fortran90Parser::BodyContext::bodyConstruct() {
  return getRuleContexts<Fortran90Parser::BodyConstructContext>();
}

Fortran90Parser::BodyConstructContext* Fortran90Parser::BodyContext::bodyConstruct(size_t i) {
  return getRuleContext<Fortran90Parser::BodyConstructContext>(i);
}


size_t Fortran90Parser::BodyContext::getRuleIndex() const {
  return Fortran90Parser::RuleBody;
}

void Fortran90Parser::BodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody(this);
}

void Fortran90Parser::BodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody(this);
}

Fortran90Parser::BodyContext* Fortran90Parser::body() {
  BodyContext *_localctx = _tracker.createInstance<BodyContext>(_ctx, getState());
  enterRule(_localctx, 318, Fortran90Parser::RuleBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1962); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1961);
              bodyConstruct();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1964); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyConstructContext ------------------------------------------------------------------

Fortran90Parser::BodyConstructContext::BodyConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::SpecificationPartConstructContext* Fortran90Parser::BodyConstructContext::specificationPartConstruct() {
  return getRuleContext<Fortran90Parser::SpecificationPartConstructContext>(0);
}

Fortran90Parser::ExecutableConstructContext* Fortran90Parser::BodyConstructContext::executableConstruct() {
  return getRuleContext<Fortran90Parser::ExecutableConstructContext>(0);
}


size_t Fortran90Parser::BodyConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleBodyConstruct;
}

void Fortran90Parser::BodyConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBodyConstruct(this);
}

void Fortran90Parser::BodyConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBodyConstruct(this);
}

Fortran90Parser::BodyConstructContext* Fortran90Parser::bodyConstruct() {
  BodyConstructContext *_localctx = _tracker.createInstance<BodyConstructContext>(_ctx, getState());
  enterRule(_localctx, 320, Fortran90Parser::RuleBodyConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1968);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1966);
      specificationPartConstruct();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1967);
      executableConstruct();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExecutableConstructContext ------------------------------------------------------------------

Fortran90Parser::ExecutableConstructContext::ExecutableConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ActionStmtContext* Fortran90Parser::ExecutableConstructContext::actionStmt() {
  return getRuleContext<Fortran90Parser::ActionStmtContext>(0);
}

Fortran90Parser::DoConstructContext* Fortran90Parser::ExecutableConstructContext::doConstruct() {
  return getRuleContext<Fortran90Parser::DoConstructContext>(0);
}

Fortran90Parser::IfConstructContext* Fortran90Parser::ExecutableConstructContext::ifConstruct() {
  return getRuleContext<Fortran90Parser::IfConstructContext>(0);
}

Fortran90Parser::CaseConstructContext* Fortran90Parser::ExecutableConstructContext::caseConstruct() {
  return getRuleContext<Fortran90Parser::CaseConstructContext>(0);
}

Fortran90Parser::WhereConstructContext* Fortran90Parser::ExecutableConstructContext::whereConstruct() {
  return getRuleContext<Fortran90Parser::WhereConstructContext>(0);
}


size_t Fortran90Parser::ExecutableConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleExecutableConstruct;
}

void Fortran90Parser::ExecutableConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecutableConstruct(this);
}

void Fortran90Parser::ExecutableConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecutableConstruct(this);
}

Fortran90Parser::ExecutableConstructContext* Fortran90Parser::executableConstruct() {
  ExecutableConstructContext *_localctx = _tracker.createInstance<ExecutableConstructContext>(_ctx, getState());
  enterRule(_localctx, 322, Fortran90Parser::RuleExecutableConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1975);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1970);
      actionStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1971);
      doConstruct();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1972);
      ifConstruct();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1973);
      caseConstruct();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1974);
      whereConstruct();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereConstructContext ------------------------------------------------------------------

Fortran90Parser::WhereConstructContext::WhereConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::WhereContext* Fortran90Parser::WhereConstructContext::where() {
  return getRuleContext<Fortran90Parser::WhereContext>(0);
}

Fortran90Parser::EndWhereStmtContext* Fortran90Parser::WhereConstructContext::endWhereStmt() {
  return getRuleContext<Fortran90Parser::EndWhereStmtContext>(0);
}

Fortran90Parser::ElseWhereContext* Fortran90Parser::WhereConstructContext::elseWhere() {
  return getRuleContext<Fortran90Parser::ElseWhereContext>(0);
}


size_t Fortran90Parser::WhereConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleWhereConstruct;
}

void Fortran90Parser::WhereConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhereConstruct(this);
}

void Fortran90Parser::WhereConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhereConstruct(this);
}

Fortran90Parser::WhereConstructContext* Fortran90Parser::whereConstruct() {
  WhereConstructContext *_localctx = _tracker.createInstance<WhereConstructContext>(_ctx, getState());
  enterRule(_localctx, 324, Fortran90Parser::RuleWhereConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1983);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1977);
      where(0);
      setState(1978);
      endWhereStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1980);
      elseWhere(0);
      setState(1981);
      endWhereStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElseWhereContext ------------------------------------------------------------------

Fortran90Parser::ElseWhereContext::ElseWhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::WhereContext* Fortran90Parser::ElseWhereContext::where() {
  return getRuleContext<Fortran90Parser::WhereContext>(0);
}

Fortran90Parser::ElsewhereStmtContext* Fortran90Parser::ElseWhereContext::elsewhereStmt() {
  return getRuleContext<Fortran90Parser::ElsewhereStmtContext>(0);
}

Fortran90Parser::ElseWhereContext* Fortran90Parser::ElseWhereContext::elseWhere() {
  return getRuleContext<Fortran90Parser::ElseWhereContext>(0);
}

Fortran90Parser::AssignmentStmtContext* Fortran90Parser::ElseWhereContext::assignmentStmt() {
  return getRuleContext<Fortran90Parser::AssignmentStmtContext>(0);
}


size_t Fortran90Parser::ElseWhereContext::getRuleIndex() const {
  return Fortran90Parser::RuleElseWhere;
}

void Fortran90Parser::ElseWhereContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElseWhere(this);
}

void Fortran90Parser::ElseWhereContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElseWhere(this);
}


Fortran90Parser::ElseWhereContext* Fortran90Parser::elseWhere() {
   return elseWhere(0);
}

Fortran90Parser::ElseWhereContext* Fortran90Parser::elseWhere(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::ElseWhereContext *_localctx = _tracker.createInstance<ElseWhereContext>(_ctx, parentState);
  Fortran90Parser::ElseWhereContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 326;
  enterRecursionRule(_localctx, 326, Fortran90Parser::RuleElseWhere, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1986);
    where(0);
    setState(1987);
    elsewhereStmt();
    _ctx->stop = _input->LT(-1);
    setState(1993);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ElseWhereContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleElseWhere);
        setState(1989);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1990);
        assignmentStmt(); 
      }
      setState(1995);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ElsewhereStmtContext ------------------------------------------------------------------

Fortran90Parser::ElsewhereStmtContext::ElsewhereStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ElsewhereStmtContext::ELSEWHERE() {
  return getToken(Fortran90Parser::ELSEWHERE, 0);
}


size_t Fortran90Parser::ElsewhereStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleElsewhereStmt;
}

void Fortran90Parser::ElsewhereStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElsewhereStmt(this);
}

void Fortran90Parser::ElsewhereStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElsewhereStmt(this);
}

Fortran90Parser::ElsewhereStmtContext* Fortran90Parser::elsewhereStmt() {
  ElsewhereStmtContext *_localctx = _tracker.createInstance<ElsewhereStmtContext>(_ctx, getState());
  enterRule(_localctx, 328, Fortran90Parser::RuleElsewhereStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1996);
    match(Fortran90Parser::ELSEWHERE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndWhereStmtContext ------------------------------------------------------------------

Fortran90Parser::EndWhereStmtContext::EndWhereStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EndWhereStmtContext::ENDWHERE() {
  return getToken(Fortran90Parser::ENDWHERE, 0);
}

tree::TerminalNode* Fortran90Parser::EndWhereStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndWhereStmtContext::WHERE() {
  return getToken(Fortran90Parser::WHERE, 0);
}


size_t Fortran90Parser::EndWhereStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndWhereStmt;
}

void Fortran90Parser::EndWhereStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndWhereStmt(this);
}

void Fortran90Parser::EndWhereStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndWhereStmt(this);
}

Fortran90Parser::EndWhereStmtContext* Fortran90Parser::endWhereStmt() {
  EndWhereStmtContext *_localctx = _tracker.createInstance<EndWhereStmtContext>(_ctx, getState());
  enterRule(_localctx, 330, Fortran90Parser::RuleEndWhereStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2001);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::ENDWHERE: {
        enterOuterAlt(_localctx, 1);
        setState(1998);
        match(Fortran90Parser::ENDWHERE);
        break;
      }

      case Fortran90Parser::END: {
        enterOuterAlt(_localctx, 2);
        setState(1999);
        match(Fortran90Parser::END);
        setState(2000);
        match(Fortran90Parser::WHERE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereContext ------------------------------------------------------------------

Fortran90Parser::WhereContext::WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::WhereConstructStmtContext* Fortran90Parser::WhereContext::whereConstructStmt() {
  return getRuleContext<Fortran90Parser::WhereConstructStmtContext>(0);
}

Fortran90Parser::WhereContext* Fortran90Parser::WhereContext::where() {
  return getRuleContext<Fortran90Parser::WhereContext>(0);
}

Fortran90Parser::AssignmentStmtContext* Fortran90Parser::WhereContext::assignmentStmt() {
  return getRuleContext<Fortran90Parser::AssignmentStmtContext>(0);
}


size_t Fortran90Parser::WhereContext::getRuleIndex() const {
  return Fortran90Parser::RuleWhere;
}

void Fortran90Parser::WhereContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhere(this);
}

void Fortran90Parser::WhereContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhere(this);
}


Fortran90Parser::WhereContext* Fortran90Parser::where() {
   return where(0);
}

Fortran90Parser::WhereContext* Fortran90Parser::where(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::WhereContext *_localctx = _tracker.createInstance<WhereContext>(_ctx, parentState);
  Fortran90Parser::WhereContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 332;
  enterRecursionRule(_localctx, 332, Fortran90Parser::RuleWhere, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2004);
    whereConstructStmt();
    _ctx->stop = _input->LT(-1);
    setState(2010);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<WhereContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleWhere);
        setState(2006);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2007);
        assignmentStmt(); 
      }
      setState(2012);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- WhereConstructStmtContext ------------------------------------------------------------------

Fortran90Parser::WhereConstructStmtContext::WhereConstructStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::WhereConstructStmtContext::WHERE() {
  return getToken(Fortran90Parser::WHERE, 0);
}

tree::TerminalNode* Fortran90Parser::WhereConstructStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::MaskExprContext* Fortran90Parser::WhereConstructStmtContext::maskExpr() {
  return getRuleContext<Fortran90Parser::MaskExprContext>(0);
}

tree::TerminalNode* Fortran90Parser::WhereConstructStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::WhereConstructStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleWhereConstructStmt;
}

void Fortran90Parser::WhereConstructStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhereConstructStmt(this);
}

void Fortran90Parser::WhereConstructStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhereConstructStmt(this);
}

Fortran90Parser::WhereConstructStmtContext* Fortran90Parser::whereConstructStmt() {
  WhereConstructStmtContext *_localctx = _tracker.createInstance<WhereConstructStmtContext>(_ctx, getState());
  enterRule(_localctx, 334, Fortran90Parser::RuleWhereConstructStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2013);
    match(Fortran90Parser::WHERE);
    setState(2014);
    match(Fortran90Parser::LPAREN);
    setState(2015);
    maskExpr();
    setState(2016);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MaskExprContext ------------------------------------------------------------------

Fortran90Parser::MaskExprContext::MaskExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExpressionContext* Fortran90Parser::MaskExprContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::MaskExprContext::getRuleIndex() const {
  return Fortran90Parser::RuleMaskExpr;
}

void Fortran90Parser::MaskExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMaskExpr(this);
}

void Fortran90Parser::MaskExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMaskExpr(this);
}

Fortran90Parser::MaskExprContext* Fortran90Parser::maskExpr() {
  MaskExprContext *_localctx = _tracker.createInstance<MaskExprContext>(_ctx, getState());
  enterRule(_localctx, 336, Fortran90Parser::RuleMaskExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2018);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseConstructContext ------------------------------------------------------------------

Fortran90Parser::CaseConstructContext::CaseConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CaseConstructContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::CaseConstructContext::COLON() {
  return getToken(Fortran90Parser::COLON, 0);
}

tree::TerminalNode* Fortran90Parser::CaseConstructContext::SELECTCASE() {
  return getToken(Fortran90Parser::SELECTCASE, 0);
}

tree::TerminalNode* Fortran90Parser::CaseConstructContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::CaseConstructContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::CaseConstructContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::SelectCaseRangeContext* Fortran90Parser::CaseConstructContext::selectCaseRange() {
  return getRuleContext<Fortran90Parser::SelectCaseRangeContext>(0);
}

tree::TerminalNode* Fortran90Parser::CaseConstructContext::SELECT() {
  return getToken(Fortran90Parser::SELECT, 0);
}

tree::TerminalNode* Fortran90Parser::CaseConstructContext::CASE() {
  return getToken(Fortran90Parser::CASE, 0);
}


size_t Fortran90Parser::CaseConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleCaseConstruct;
}

void Fortran90Parser::CaseConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseConstruct(this);
}

void Fortran90Parser::CaseConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseConstruct(this);
}

Fortran90Parser::CaseConstructContext* Fortran90Parser::caseConstruct() {
  CaseConstructContext *_localctx = _tracker.createInstance<CaseConstructContext>(_ctx, getState());
  enterRule(_localctx, 338, Fortran90Parser::RuleCaseConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2050);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2020);
      match(Fortran90Parser::NAME);
      setState(2021);
      match(Fortran90Parser::COLON);
      setState(2022);
      match(Fortran90Parser::SELECTCASE);
      setState(2023);
      match(Fortran90Parser::LPAREN);
      setState(2024);
      expression(0);
      setState(2025);
      match(Fortran90Parser::RPAREN);
      setState(2026);
      selectCaseRange();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2028);
      match(Fortran90Parser::SELECTCASE);
      setState(2029);
      match(Fortran90Parser::LPAREN);
      setState(2030);
      expression(0);
      setState(2031);
      match(Fortran90Parser::RPAREN);
      setState(2032);
      selectCaseRange();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2034);
      match(Fortran90Parser::NAME);
      setState(2035);
      match(Fortran90Parser::COLON);
      setState(2036);
      match(Fortran90Parser::SELECT);
      setState(2037);
      match(Fortran90Parser::CASE);
      setState(2038);
      match(Fortran90Parser::LPAREN);
      setState(2039);
      expression(0);
      setState(2040);
      match(Fortran90Parser::RPAREN);
      setState(2041);
      selectCaseRange();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2043);
      match(Fortran90Parser::SELECT);
      setState(2044);
      match(Fortran90Parser::CASE);
      setState(2045);
      match(Fortran90Parser::LPAREN);
      setState(2046);
      expression(0);
      setState(2047);
      match(Fortran90Parser::RPAREN);
      setState(2048);
      selectCaseRange();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectCaseRangeContext ------------------------------------------------------------------

Fortran90Parser::SelectCaseRangeContext::SelectCaseRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::SelectCaseBodyContext* Fortran90Parser::SelectCaseRangeContext::selectCaseBody() {
  return getRuleContext<Fortran90Parser::SelectCaseBodyContext>(0);
}

Fortran90Parser::EndSelectStmtContext* Fortran90Parser::SelectCaseRangeContext::endSelectStmt() {
  return getRuleContext<Fortran90Parser::EndSelectStmtContext>(0);
}


size_t Fortran90Parser::SelectCaseRangeContext::getRuleIndex() const {
  return Fortran90Parser::RuleSelectCaseRange;
}

void Fortran90Parser::SelectCaseRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectCaseRange(this);
}

void Fortran90Parser::SelectCaseRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectCaseRange(this);
}

Fortran90Parser::SelectCaseRangeContext* Fortran90Parser::selectCaseRange() {
  SelectCaseRangeContext *_localctx = _tracker.createInstance<SelectCaseRangeContext>(_ctx, getState());
  enterRule(_localctx, 340, Fortran90Parser::RuleSelectCaseRange);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2056);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(2052);
        selectCaseBody(0);
        setState(2053);
        endSelectStmt();
        break;
      }

      case Fortran90Parser::END:
      case Fortran90Parser::ENDSELECT: {
        enterOuterAlt(_localctx, 2);
        setState(2055);
        endSelectStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndSelectStmtContext ------------------------------------------------------------------

Fortran90Parser::EndSelectStmtContext::EndSelectStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EndSelectStmtContext::ENDSELECT() {
  return getToken(Fortran90Parser::ENDSELECT, 0);
}

tree::TerminalNode* Fortran90Parser::EndSelectStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::EndSelectStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndSelectStmtContext::SELECT() {
  return getToken(Fortran90Parser::SELECT, 0);
}


size_t Fortran90Parser::EndSelectStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndSelectStmt;
}

void Fortran90Parser::EndSelectStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndSelectStmt(this);
}

void Fortran90Parser::EndSelectStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndSelectStmt(this);
}

Fortran90Parser::EndSelectStmtContext* Fortran90Parser::endSelectStmt() {
  EndSelectStmtContext *_localctx = _tracker.createInstance<EndSelectStmtContext>(_ctx, getState());
  enterRule(_localctx, 342, Fortran90Parser::RuleEndSelectStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2067);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::ENDSELECT: {
        enterOuterAlt(_localctx, 1);
        setState(2058);
        match(Fortran90Parser::ENDSELECT);
        setState(2060);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
        case 1: {
          setState(2059);
          match(Fortran90Parser::NAME);
          break;
        }

        default:
          break;
        }
        break;
      }

      case Fortran90Parser::END: {
        enterOuterAlt(_localctx, 2);
        setState(2062);
        match(Fortran90Parser::END);
        setState(2063);
        match(Fortran90Parser::SELECT);
        setState(2065);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx)) {
        case 1: {
          setState(2064);
          match(Fortran90Parser::NAME);
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectCaseBodyContext ------------------------------------------------------------------

Fortran90Parser::SelectCaseBodyContext::SelectCaseBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::CaseStmtContext* Fortran90Parser::SelectCaseBodyContext::caseStmt() {
  return getRuleContext<Fortran90Parser::CaseStmtContext>(0);
}

Fortran90Parser::SelectCaseBodyContext* Fortran90Parser::SelectCaseBodyContext::selectCaseBody() {
  return getRuleContext<Fortran90Parser::SelectCaseBodyContext>(0);
}

Fortran90Parser::CaseBodyConstructContext* Fortran90Parser::SelectCaseBodyContext::caseBodyConstruct() {
  return getRuleContext<Fortran90Parser::CaseBodyConstructContext>(0);
}


size_t Fortran90Parser::SelectCaseBodyContext::getRuleIndex() const {
  return Fortran90Parser::RuleSelectCaseBody;
}

void Fortran90Parser::SelectCaseBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectCaseBody(this);
}

void Fortran90Parser::SelectCaseBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectCaseBody(this);
}


Fortran90Parser::SelectCaseBodyContext* Fortran90Parser::selectCaseBody() {
   return selectCaseBody(0);
}

Fortran90Parser::SelectCaseBodyContext* Fortran90Parser::selectCaseBody(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::SelectCaseBodyContext *_localctx = _tracker.createInstance<SelectCaseBodyContext>(_ctx, parentState);
  Fortran90Parser::SelectCaseBodyContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 344;
  enterRecursionRule(_localctx, 344, Fortran90Parser::RuleSelectCaseBody, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2070);
    caseStmt();
    _ctx->stop = _input->LT(-1);
    setState(2076);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<SelectCaseBodyContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleSelectCaseBody);
        setState(2072);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2073);
        caseBodyConstruct(); 
      }
      setState(2078);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- CaseBodyConstructContext ------------------------------------------------------------------

Fortran90Parser::CaseBodyConstructContext::CaseBodyConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::CaseStmtContext* Fortran90Parser::CaseBodyConstructContext::caseStmt() {
  return getRuleContext<Fortran90Parser::CaseStmtContext>(0);
}

Fortran90Parser::ExecutionPartConstructContext* Fortran90Parser::CaseBodyConstructContext::executionPartConstruct() {
  return getRuleContext<Fortran90Parser::ExecutionPartConstructContext>(0);
}


size_t Fortran90Parser::CaseBodyConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleCaseBodyConstruct;
}

void Fortran90Parser::CaseBodyConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseBodyConstruct(this);
}

void Fortran90Parser::CaseBodyConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseBodyConstruct(this);
}

Fortran90Parser::CaseBodyConstructContext* Fortran90Parser::caseBodyConstruct() {
  CaseBodyConstructContext *_localctx = _tracker.createInstance<CaseBodyConstructContext>(_ctx, getState());
  enterRule(_localctx, 346, Fortran90Parser::RuleCaseBodyConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2081);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(2079);
        caseStmt();
        break;
      }

      case Fortran90Parser::ENTRY:
      case Fortran90Parser::END:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::DO:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::SEMICOLON:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ICON:
      case Fortran90Parser::NAME:
      case Fortran90Parser::EXIT: {
        enterOuterAlt(_localctx, 2);
        setState(2080);
        executionPartConstruct();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseStmtContext ------------------------------------------------------------------

Fortran90Parser::CaseStmtContext::CaseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CaseStmtContext::CASE() {
  return getToken(Fortran90Parser::CASE, 0);
}

Fortran90Parser::CaseSelectorContext* Fortran90Parser::CaseStmtContext::caseSelector() {
  return getRuleContext<Fortran90Parser::CaseSelectorContext>(0);
}

tree::TerminalNode* Fortran90Parser::CaseStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::CaseStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleCaseStmt;
}

void Fortran90Parser::CaseStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseStmt(this);
}

void Fortran90Parser::CaseStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseStmt(this);
}

Fortran90Parser::CaseStmtContext* Fortran90Parser::caseStmt() {
  CaseStmtContext *_localctx = _tracker.createInstance<CaseStmtContext>(_ctx, getState());
  enterRule(_localctx, 348, Fortran90Parser::RuleCaseStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2089);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2083);
      match(Fortran90Parser::CASE);
      setState(2084);
      caseSelector();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2085);
      match(Fortran90Parser::CASE);
      setState(2086);
      caseSelector();
      setState(2087);
      match(Fortran90Parser::NAME);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseSelectorContext ------------------------------------------------------------------

Fortran90Parser::CaseSelectorContext::CaseSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CaseSelectorContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::CaseValueRangeListContext* Fortran90Parser::CaseSelectorContext::caseValueRangeList() {
  return getRuleContext<Fortran90Parser::CaseValueRangeListContext>(0);
}

tree::TerminalNode* Fortran90Parser::CaseSelectorContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::CaseSelectorContext::DEFAULT() {
  return getToken(Fortran90Parser::DEFAULT, 0);
}


size_t Fortran90Parser::CaseSelectorContext::getRuleIndex() const {
  return Fortran90Parser::RuleCaseSelector;
}

void Fortran90Parser::CaseSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseSelector(this);
}

void Fortran90Parser::CaseSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseSelector(this);
}

Fortran90Parser::CaseSelectorContext* Fortran90Parser::caseSelector() {
  CaseSelectorContext *_localctx = _tracker.createInstance<CaseSelectorContext>(_ctx, getState());
  enterRule(_localctx, 350, Fortran90Parser::RuleCaseSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2096);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::LPAREN: {
        enterOuterAlt(_localctx, 1);
        setState(2091);
        match(Fortran90Parser::LPAREN);
        setState(2092);
        caseValueRangeList();
        setState(2093);
        match(Fortran90Parser::RPAREN);
        break;
      }

      case Fortran90Parser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(2095);
        match(Fortran90Parser::DEFAULT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseValueRangeListContext ------------------------------------------------------------------

Fortran90Parser::CaseValueRangeListContext::CaseValueRangeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::CaseValueRangeContext *> Fortran90Parser::CaseValueRangeListContext::caseValueRange() {
  return getRuleContexts<Fortran90Parser::CaseValueRangeContext>();
}

Fortran90Parser::CaseValueRangeContext* Fortran90Parser::CaseValueRangeListContext::caseValueRange(size_t i) {
  return getRuleContext<Fortran90Parser::CaseValueRangeContext>(i);
}


size_t Fortran90Parser::CaseValueRangeListContext::getRuleIndex() const {
  return Fortran90Parser::RuleCaseValueRangeList;
}

void Fortran90Parser::CaseValueRangeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseValueRangeList(this);
}

void Fortran90Parser::CaseValueRangeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseValueRangeList(this);
}

Fortran90Parser::CaseValueRangeListContext* Fortran90Parser::caseValueRangeList() {
  CaseValueRangeListContext *_localctx = _tracker.createInstance<CaseValueRangeListContext>(_ctx, getState());
  enterRule(_localctx, 352, Fortran90Parser::RuleCaseValueRangeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2099); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2098);
      caseValueRange();
      setState(2101); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1375731714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1693353459891306497) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 2305293253338988825) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseValueRangeContext ------------------------------------------------------------------

Fortran90Parser::CaseValueRangeContext::CaseValueRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Fortran90Parser::CaseValueRangeContext::getRuleIndex() const {
  return Fortran90Parser::RuleCaseValueRange;
}

void Fortran90Parser::CaseValueRangeContext::copyFrom(CaseValueRangeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MidlleColonExpressionContext ------------------------------------------------------------------

std::vector<Fortran90Parser::ExpressionContext *> Fortran90Parser::MidlleColonExpressionContext::expression() {
  return getRuleContexts<Fortran90Parser::ExpressionContext>();
}

Fortran90Parser::ExpressionContext* Fortran90Parser::MidlleColonExpressionContext::expression(size_t i) {
  return getRuleContext<Fortran90Parser::ExpressionContext>(i);
}

tree::TerminalNode* Fortran90Parser::MidlleColonExpressionContext::COLON() {
  return getToken(Fortran90Parser::COLON, 0);
}

Fortran90Parser::MidlleColonExpressionContext::MidlleColonExpressionContext(CaseValueRangeContext *ctx) { copyFrom(ctx); }

void Fortran90Parser::MidlleColonExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMidlleColonExpression(this);
}
void Fortran90Parser::MidlleColonExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMidlleColonExpression(this);
}
//----------------- LitteralExpressionContext ------------------------------------------------------------------

Fortran90Parser::ExpressionContext* Fortran90Parser::LitteralExpressionContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

Fortran90Parser::LitteralExpressionContext::LitteralExpressionContext(CaseValueRangeContext *ctx) { copyFrom(ctx); }

void Fortran90Parser::LitteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLitteralExpression(this);
}
void Fortran90Parser::LitteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLitteralExpression(this);
}
//----------------- AfterColonExpressionContext ------------------------------------------------------------------

Fortran90Parser::ExpressionContext* Fortran90Parser::AfterColonExpressionContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::AfterColonExpressionContext::COLON() {
  return getToken(Fortran90Parser::COLON, 0);
}

Fortran90Parser::AfterColonExpressionContext::AfterColonExpressionContext(CaseValueRangeContext *ctx) { copyFrom(ctx); }

void Fortran90Parser::AfterColonExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAfterColonExpression(this);
}
void Fortran90Parser::AfterColonExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAfterColonExpression(this);
}
//----------------- BeforeColonExpressionContext ------------------------------------------------------------------

tree::TerminalNode* Fortran90Parser::BeforeColonExpressionContext::COLON() {
  return getToken(Fortran90Parser::COLON, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::BeforeColonExpressionContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

Fortran90Parser::BeforeColonExpressionContext::BeforeColonExpressionContext(CaseValueRangeContext *ctx) { copyFrom(ctx); }

void Fortran90Parser::BeforeColonExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBeforeColonExpression(this);
}
void Fortran90Parser::BeforeColonExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBeforeColonExpression(this);
}
Fortran90Parser::CaseValueRangeContext* Fortran90Parser::caseValueRange() {
  CaseValueRangeContext *_localctx = _tracker.createInstance<CaseValueRangeContext>(_ctx, getState());
  enterRule(_localctx, 354, Fortran90Parser::RuleCaseValueRange);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2113);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<Fortran90Parser::LitteralExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2103);
      expression(0);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<Fortran90Parser::AfterColonExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2104);
      expression(0);
      setState(2105);
      match(Fortran90Parser::COLON);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<Fortran90Parser::BeforeColonExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2107);
      match(Fortran90Parser::COLON);
      setState(2108);
      expression(0);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<Fortran90Parser::MidlleColonExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(2109);
      expression(0);
      setState(2110);
      match(Fortran90Parser::COLON);
      setState(2111);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfConstructContext ------------------------------------------------------------------

Fortran90Parser::IfConstructContext::IfConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::IfThenStmtContext* Fortran90Parser::IfConstructContext::ifThenStmt() {
  return getRuleContext<Fortran90Parser::IfThenStmtContext>(0);
}

Fortran90Parser::ConditionalBodyContext* Fortran90Parser::IfConstructContext::conditionalBody() {
  return getRuleContext<Fortran90Parser::ConditionalBodyContext>(0);
}

Fortran90Parser::EndIfStmtContext* Fortran90Parser::IfConstructContext::endIfStmt() {
  return getRuleContext<Fortran90Parser::EndIfStmtContext>(0);
}

std::vector<Fortran90Parser::ElseIfConstructContext *> Fortran90Parser::IfConstructContext::elseIfConstruct() {
  return getRuleContexts<Fortran90Parser::ElseIfConstructContext>();
}

Fortran90Parser::ElseIfConstructContext* Fortran90Parser::IfConstructContext::elseIfConstruct(size_t i) {
  return getRuleContext<Fortran90Parser::ElseIfConstructContext>(i);
}

Fortran90Parser::ElseConstructContext* Fortran90Parser::IfConstructContext::elseConstruct() {
  return getRuleContext<Fortran90Parser::ElseConstructContext>(0);
}


size_t Fortran90Parser::IfConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleIfConstruct;
}

void Fortran90Parser::IfConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfConstruct(this);
}

void Fortran90Parser::IfConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfConstruct(this);
}

Fortran90Parser::IfConstructContext* Fortran90Parser::ifConstruct() {
  IfConstructContext *_localctx = _tracker.createInstance<IfConstructContext>(_ctx, getState());
  enterRule(_localctx, 356, Fortran90Parser::RuleIfConstruct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2115);
    ifThenStmt();
    setState(2116);
    conditionalBody();
    setState(2120);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2117);
        elseIfConstruct(); 
      }
      setState(2122);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx);
    }
    setState(2124);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::ELSE) {
      setState(2123);
      elseConstruct();
    }
    setState(2126);
    endIfStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenStmtContext ------------------------------------------------------------------

Fortran90Parser::IfThenStmtContext::IfThenStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::IfThenStmtContext::IF() {
  return getToken(Fortran90Parser::IF, 0);
}

tree::TerminalNode* Fortran90Parser::IfThenStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::IfThenStmtContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::IfThenStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::IfThenStmtContext::THEN() {
  return getToken(Fortran90Parser::THEN, 0);
}


size_t Fortran90Parser::IfThenStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleIfThenStmt;
}

void Fortran90Parser::IfThenStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfThenStmt(this);
}

void Fortran90Parser::IfThenStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfThenStmt(this);
}

Fortran90Parser::IfThenStmtContext* Fortran90Parser::ifThenStmt() {
  IfThenStmtContext *_localctx = _tracker.createInstance<IfThenStmtContext>(_ctx, getState());
  enterRule(_localctx, 358, Fortran90Parser::RuleIfThenStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2128);
    match(Fortran90Parser::IF);
    setState(2129);
    match(Fortran90Parser::LPAREN);
    setState(2130);
    expression(0);
    setState(2131);
    match(Fortran90Parser::RPAREN);
    setState(2132);
    match(Fortran90Parser::THEN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalBodyContext ------------------------------------------------------------------

Fortran90Parser::ConditionalBodyContext::ConditionalBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ExecutionPartConstructContext *> Fortran90Parser::ConditionalBodyContext::executionPartConstruct() {
  return getRuleContexts<Fortran90Parser::ExecutionPartConstructContext>();
}

Fortran90Parser::ExecutionPartConstructContext* Fortran90Parser::ConditionalBodyContext::executionPartConstruct(size_t i) {
  return getRuleContext<Fortran90Parser::ExecutionPartConstructContext>(i);
}


size_t Fortran90Parser::ConditionalBodyContext::getRuleIndex() const {
  return Fortran90Parser::RuleConditionalBody;
}

void Fortran90Parser::ConditionalBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalBody(this);
}

void Fortran90Parser::ConditionalBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalBody(this);
}

Fortran90Parser::ConditionalBodyContext* Fortran90Parser::conditionalBody() {
  ConditionalBodyContext *_localctx = _tracker.createInstance<ConditionalBodyContext>(_ctx, getState());
  enterRule(_localctx, 360, Fortran90Parser::RuleConditionalBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2137);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2134);
        executionPartConstruct(); 
      }
      setState(2139);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElseIfConstructContext ------------------------------------------------------------------

Fortran90Parser::ElseIfConstructContext::ElseIfConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ElseIfStmtContext* Fortran90Parser::ElseIfConstructContext::elseIfStmt() {
  return getRuleContext<Fortran90Parser::ElseIfStmtContext>(0);
}

Fortran90Parser::ConditionalBodyContext* Fortran90Parser::ElseIfConstructContext::conditionalBody() {
  return getRuleContext<Fortran90Parser::ConditionalBodyContext>(0);
}


size_t Fortran90Parser::ElseIfConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleElseIfConstruct;
}

void Fortran90Parser::ElseIfConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElseIfConstruct(this);
}

void Fortran90Parser::ElseIfConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElseIfConstruct(this);
}

Fortran90Parser::ElseIfConstructContext* Fortran90Parser::elseIfConstruct() {
  ElseIfConstructContext *_localctx = _tracker.createInstance<ElseIfConstructContext>(_ctx, getState());
  enterRule(_localctx, 362, Fortran90Parser::RuleElseIfConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2140);
    elseIfStmt();
    setState(2141);
    conditionalBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElseIfStmtContext ------------------------------------------------------------------

Fortran90Parser::ElseIfStmtContext::ElseIfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ElseIfStmtContext::ELSEIF() {
  return getToken(Fortran90Parser::ELSEIF, 0);
}

tree::TerminalNode* Fortran90Parser::ElseIfStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::ElseIfStmtContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::ElseIfStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::ElseIfStmtContext::THEN() {
  return getToken(Fortran90Parser::THEN, 0);
}

tree::TerminalNode* Fortran90Parser::ElseIfStmtContext::ELSE() {
  return getToken(Fortran90Parser::ELSE, 0);
}

tree::TerminalNode* Fortran90Parser::ElseIfStmtContext::IF() {
  return getToken(Fortran90Parser::IF, 0);
}


size_t Fortran90Parser::ElseIfStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleElseIfStmt;
}

void Fortran90Parser::ElseIfStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElseIfStmt(this);
}

void Fortran90Parser::ElseIfStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElseIfStmt(this);
}

Fortran90Parser::ElseIfStmtContext* Fortran90Parser::elseIfStmt() {
  ElseIfStmtContext *_localctx = _tracker.createInstance<ElseIfStmtContext>(_ctx, getState());
  enterRule(_localctx, 364, Fortran90Parser::RuleElseIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2156);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::ELSEIF: {
        enterOuterAlt(_localctx, 1);
        setState(2143);
        match(Fortran90Parser::ELSEIF);
        setState(2144);
        match(Fortran90Parser::LPAREN);
        setState(2145);
        expression(0);
        setState(2146);
        match(Fortran90Parser::RPAREN);
        setState(2147);
        match(Fortran90Parser::THEN);
        break;
      }

      case Fortran90Parser::ELSE: {
        enterOuterAlt(_localctx, 2);
        setState(2149);
        match(Fortran90Parser::ELSE);
        setState(2150);
        match(Fortran90Parser::IF);
        setState(2151);
        match(Fortran90Parser::LPAREN);
        setState(2152);
        expression(0);
        setState(2153);
        match(Fortran90Parser::RPAREN);
        setState(2154);
        match(Fortran90Parser::THEN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElseConstructContext ------------------------------------------------------------------

Fortran90Parser::ElseConstructContext::ElseConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ElseStmtContext* Fortran90Parser::ElseConstructContext::elseStmt() {
  return getRuleContext<Fortran90Parser::ElseStmtContext>(0);
}

Fortran90Parser::ConditionalBodyContext* Fortran90Parser::ElseConstructContext::conditionalBody() {
  return getRuleContext<Fortran90Parser::ConditionalBodyContext>(0);
}


size_t Fortran90Parser::ElseConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleElseConstruct;
}

void Fortran90Parser::ElseConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElseConstruct(this);
}

void Fortran90Parser::ElseConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElseConstruct(this);
}

Fortran90Parser::ElseConstructContext* Fortran90Parser::elseConstruct() {
  ElseConstructContext *_localctx = _tracker.createInstance<ElseConstructContext>(_ctx, getState());
  enterRule(_localctx, 366, Fortran90Parser::RuleElseConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2158);
    elseStmt();
    setState(2159);
    conditionalBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElseStmtContext ------------------------------------------------------------------

Fortran90Parser::ElseStmtContext::ElseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ElseStmtContext::ELSE() {
  return getToken(Fortran90Parser::ELSE, 0);
}


size_t Fortran90Parser::ElseStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleElseStmt;
}

void Fortran90Parser::ElseStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElseStmt(this);
}

void Fortran90Parser::ElseStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElseStmt(this);
}

Fortran90Parser::ElseStmtContext* Fortran90Parser::elseStmt() {
  ElseStmtContext *_localctx = _tracker.createInstance<ElseStmtContext>(_ctx, getState());
  enterRule(_localctx, 368, Fortran90Parser::RuleElseStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2161);
    match(Fortran90Parser::ELSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndIfStmtContext ------------------------------------------------------------------

Fortran90Parser::EndIfStmtContext::EndIfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EndIfStmtContext::ENDIF() {
  return getToken(Fortran90Parser::ENDIF, 0);
}

tree::TerminalNode* Fortran90Parser::EndIfStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndIfStmtContext::IF() {
  return getToken(Fortran90Parser::IF, 0);
}


size_t Fortran90Parser::EndIfStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndIfStmt;
}

void Fortran90Parser::EndIfStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndIfStmt(this);
}

void Fortran90Parser::EndIfStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndIfStmt(this);
}

Fortran90Parser::EndIfStmtContext* Fortran90Parser::endIfStmt() {
  EndIfStmtContext *_localctx = _tracker.createInstance<EndIfStmtContext>(_ctx, getState());
  enterRule(_localctx, 370, Fortran90Parser::RuleEndIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2166);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::ENDIF: {
        enterOuterAlt(_localctx, 1);
        setState(2163);
        match(Fortran90Parser::ENDIF);
        break;
      }

      case Fortran90Parser::END: {
        enterOuterAlt(_localctx, 2);
        setState(2164);
        match(Fortran90Parser::END);
        setState(2165);
        match(Fortran90Parser::IF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoConstructContext ------------------------------------------------------------------

Fortran90Parser::DoConstructContext::DoConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::LabelDoStmtContext* Fortran90Parser::DoConstructContext::labelDoStmt() {
  return getRuleContext<Fortran90Parser::LabelDoStmtContext>(0);
}

Fortran90Parser::BlockDoConstructContext* Fortran90Parser::DoConstructContext::blockDoConstruct() {
  return getRuleContext<Fortran90Parser::BlockDoConstructContext>(0);
}


size_t Fortran90Parser::DoConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleDoConstruct;
}

void Fortran90Parser::DoConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoConstruct(this);
}

void Fortran90Parser::DoConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoConstruct(this);
}

Fortran90Parser::DoConstructContext* Fortran90Parser::doConstruct() {
  DoConstructContext *_localctx = _tracker.createInstance<DoConstructContext>(_ctx, getState());
  enterRule(_localctx, 372, Fortran90Parser::RuleDoConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2170);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2168);
      labelDoStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2169);
      blockDoConstruct();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockDoConstructContext ------------------------------------------------------------------

Fortran90Parser::BlockDoConstructContext::BlockDoConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::BlockDoConstructContext::DO() {
  return getToken(Fortran90Parser::DO, 0);
}

Fortran90Parser::EndDoStmtContext* Fortran90Parser::BlockDoConstructContext::endDoStmt() {
  return getRuleContext<Fortran90Parser::EndDoStmtContext>(0);
}

Fortran90Parser::NameColonContext* Fortran90Parser::BlockDoConstructContext::nameColon() {
  return getRuleContext<Fortran90Parser::NameColonContext>(0);
}

Fortran90Parser::CommaLoopControlContext* Fortran90Parser::BlockDoConstructContext::commaLoopControl() {
  return getRuleContext<Fortran90Parser::CommaLoopControlContext>(0);
}

std::vector<Fortran90Parser::ExecutionPartConstructContext *> Fortran90Parser::BlockDoConstructContext::executionPartConstruct() {
  return getRuleContexts<Fortran90Parser::ExecutionPartConstructContext>();
}

Fortran90Parser::ExecutionPartConstructContext* Fortran90Parser::BlockDoConstructContext::executionPartConstruct(size_t i) {
  return getRuleContext<Fortran90Parser::ExecutionPartConstructContext>(i);
}


size_t Fortran90Parser::BlockDoConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleBlockDoConstruct;
}

void Fortran90Parser::BlockDoConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockDoConstruct(this);
}

void Fortran90Parser::BlockDoConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockDoConstruct(this);
}

Fortran90Parser::BlockDoConstructContext* Fortran90Parser::blockDoConstruct() {
  BlockDoConstructContext *_localctx = _tracker.createInstance<BlockDoConstructContext>(_ctx, getState());
  enterRule(_localctx, 374, Fortran90Parser::RuleBlockDoConstruct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2173);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::NAME) {
      setState(2172);
      nameColon();
    }
    setState(2175);
    match(Fortran90Parser::DO);
    setState(2177);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
    case 1: {
      setState(2176);
      commaLoopControl();
      break;
    }

    default:
      break;
    }
    setState(2182);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2179);
        executionPartConstruct(); 
      }
      setState(2184);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    }
    setState(2185);
    endDoStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndDoStmtContext ------------------------------------------------------------------

Fortran90Parser::EndDoStmtContext::EndDoStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::EndDoStmtContext::ENDDO() {
  return getToken(Fortran90Parser::ENDDO, 0);
}

Fortran90Parser::EndNameContext* Fortran90Parser::EndDoStmtContext::endName() {
  return getRuleContext<Fortran90Parser::EndNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::EndDoStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndDoStmtContext::DO() {
  return getToken(Fortran90Parser::DO, 0);
}


size_t Fortran90Parser::EndDoStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndDoStmt;
}

void Fortran90Parser::EndDoStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndDoStmt(this);
}

void Fortran90Parser::EndDoStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndDoStmt(this);
}

Fortran90Parser::EndDoStmtContext* Fortran90Parser::endDoStmt() {
  EndDoStmtContext *_localctx = _tracker.createInstance<EndDoStmtContext>(_ctx, getState());
  enterRule(_localctx, 376, Fortran90Parser::RuleEndDoStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2196);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::ENDDO: {
        enterOuterAlt(_localctx, 1);
        setState(2187);
        match(Fortran90Parser::ENDDO);
        setState(2189);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
        case 1: {
          setState(2188);
          endName();
          break;
        }

        default:
          break;
        }
        break;
      }

      case Fortran90Parser::END: {
        enterOuterAlt(_localctx, 2);
        setState(2191);
        match(Fortran90Parser::END);
        setState(2192);
        match(Fortran90Parser::DO);
        setState(2194);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
        case 1: {
          setState(2193);
          endName();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndNameContext ------------------------------------------------------------------

Fortran90Parser::EndNameContext::EndNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::IdentContext* Fortran90Parser::EndNameContext::ident() {
  return getRuleContext<Fortran90Parser::IdentContext>(0);
}


size_t Fortran90Parser::EndNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndName;
}

void Fortran90Parser::EndNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndName(this);
}

void Fortran90Parser::EndNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndName(this);
}

Fortran90Parser::EndNameContext* Fortran90Parser::endName() {
  EndNameContext *_localctx = _tracker.createInstance<EndNameContext>(_ctx, getState());
  enterRule(_localctx, 378, Fortran90Parser::RuleEndName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2198);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameColonContext ------------------------------------------------------------------

Fortran90Parser::NameColonContext::NameColonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::NameColonContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::NameColonContext::COLON() {
  return getToken(Fortran90Parser::COLON, 0);
}


size_t Fortran90Parser::NameColonContext::getRuleIndex() const {
  return Fortran90Parser::RuleNameColon;
}

void Fortran90Parser::NameColonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNameColon(this);
}

void Fortran90Parser::NameColonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNameColon(this);
}

Fortran90Parser::NameColonContext* Fortran90Parser::nameColon() {
  NameColonContext *_localctx = _tracker.createInstance<NameColonContext>(_ctx, getState());
  enterRule(_localctx, 380, Fortran90Parser::RuleNameColon);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2200);
    match(Fortran90Parser::NAME);
    setState(2201);
    match(Fortran90Parser::COLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelDoStmtContext ------------------------------------------------------------------

Fortran90Parser::LabelDoStmtContext::LabelDoStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::LabelDoStmtContext::DO() {
  return getToken(Fortran90Parser::DO, 0);
}

Fortran90Parser::DoLblRefContext* Fortran90Parser::LabelDoStmtContext::doLblRef() {
  return getRuleContext<Fortran90Parser::DoLblRefContext>(0);
}

Fortran90Parser::CommaLoopControlContext* Fortran90Parser::LabelDoStmtContext::commaLoopControl() {
  return getRuleContext<Fortran90Parser::CommaLoopControlContext>(0);
}

Fortran90Parser::DoLblDefContext* Fortran90Parser::LabelDoStmtContext::doLblDef() {
  return getRuleContext<Fortran90Parser::DoLblDefContext>(0);
}

Fortran90Parser::DoLabelStmtContext* Fortran90Parser::LabelDoStmtContext::doLabelStmt() {
  return getRuleContext<Fortran90Parser::DoLabelStmtContext>(0);
}

std::vector<Fortran90Parser::ExecutionPartConstructContext *> Fortran90Parser::LabelDoStmtContext::executionPartConstruct() {
  return getRuleContexts<Fortran90Parser::ExecutionPartConstructContext>();
}

Fortran90Parser::ExecutionPartConstructContext* Fortran90Parser::LabelDoStmtContext::executionPartConstruct(size_t i) {
  return getRuleContext<Fortran90Parser::ExecutionPartConstructContext>(i);
}


size_t Fortran90Parser::LabelDoStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleLabelDoStmt;
}

void Fortran90Parser::LabelDoStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabelDoStmt(this);
}

void Fortran90Parser::LabelDoStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabelDoStmt(this);
}

Fortran90Parser::LabelDoStmtContext* Fortran90Parser::labelDoStmt() {
  LabelDoStmtContext *_localctx = _tracker.createInstance<LabelDoStmtContext>(_ctx, getState());
  enterRule(_localctx, 382, Fortran90Parser::RuleLabelDoStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2203);
    match(Fortran90Parser::DO);
    setState(2204);
    doLblRef();
    setState(2205);
    commaLoopControl();
    setState(2209);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2206);
        executionPartConstruct(); 
      }
      setState(2211);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
    }
    setState(2212);
    doLblDef();
    setState(2213);
    doLabelStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoLblRefContext ------------------------------------------------------------------

Fortran90Parser::DoLblRefContext::DoLblRefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DoLblRefContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}


size_t Fortran90Parser::DoLblRefContext::getRuleIndex() const {
  return Fortran90Parser::RuleDoLblRef;
}

void Fortran90Parser::DoLblRefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoLblRef(this);
}

void Fortran90Parser::DoLblRefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoLblRef(this);
}

Fortran90Parser::DoLblRefContext* Fortran90Parser::doLblRef() {
  DoLblRefContext *_localctx = _tracker.createInstance<DoLblRefContext>(_ctx, getState());
  enterRule(_localctx, 384, Fortran90Parser::RuleDoLblRef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2215);
    match(Fortran90Parser::ICON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoLblDefContext ------------------------------------------------------------------

Fortran90Parser::DoLblDefContext::DoLblDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DoLblDefContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}


size_t Fortran90Parser::DoLblDefContext::getRuleIndex() const {
  return Fortran90Parser::RuleDoLblDef;
}

void Fortran90Parser::DoLblDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoLblDef(this);
}

void Fortran90Parser::DoLblDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoLblDef(this);
}

Fortran90Parser::DoLblDefContext* Fortran90Parser::doLblDef() {
  DoLblDefContext *_localctx = _tracker.createInstance<DoLblDefContext>(_ctx, getState());
  enterRule(_localctx, 386, Fortran90Parser::RuleDoLblDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2217);
    match(Fortran90Parser::ICON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoLabelStmtContext ------------------------------------------------------------------

Fortran90Parser::DoLabelStmtContext::DoLabelStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ActionStmtContext* Fortran90Parser::DoLabelStmtContext::actionStmt() {
  return getRuleContext<Fortran90Parser::ActionStmtContext>(0);
}


size_t Fortran90Parser::DoLabelStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleDoLabelStmt;
}

void Fortran90Parser::DoLabelStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoLabelStmt(this);
}

void Fortran90Parser::DoLabelStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoLabelStmt(this);
}

Fortran90Parser::DoLabelStmtContext* Fortran90Parser::doLabelStmt() {
  DoLabelStmtContext *_localctx = _tracker.createInstance<DoLabelStmtContext>(_ctx, getState());
  enterRule(_localctx, 388, Fortran90Parser::RuleDoLabelStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2219);
    actionStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExecutionPartConstructContext ------------------------------------------------------------------

Fortran90Parser::ExecutionPartConstructContext::ExecutionPartConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExecutableConstructContext* Fortran90Parser::ExecutionPartConstructContext::executableConstruct() {
  return getRuleContext<Fortran90Parser::ExecutableConstructContext>(0);
}

Fortran90Parser::FormatStmtContext* Fortran90Parser::ExecutionPartConstructContext::formatStmt() {
  return getRuleContext<Fortran90Parser::FormatStmtContext>(0);
}

Fortran90Parser::DataStmtContext* Fortran90Parser::ExecutionPartConstructContext::dataStmt() {
  return getRuleContext<Fortran90Parser::DataStmtContext>(0);
}

Fortran90Parser::EntryStmtContext* Fortran90Parser::ExecutionPartConstructContext::entryStmt() {
  return getRuleContext<Fortran90Parser::EntryStmtContext>(0);
}

Fortran90Parser::DoubleDoStmtContext* Fortran90Parser::ExecutionPartConstructContext::doubleDoStmt() {
  return getRuleContext<Fortran90Parser::DoubleDoStmtContext>(0);
}


size_t Fortran90Parser::ExecutionPartConstructContext::getRuleIndex() const {
  return Fortran90Parser::RuleExecutionPartConstruct;
}

void Fortran90Parser::ExecutionPartConstructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecutionPartConstruct(this);
}

void Fortran90Parser::ExecutionPartConstructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecutionPartConstruct(this);
}

Fortran90Parser::ExecutionPartConstructContext* Fortran90Parser::executionPartConstruct() {
  ExecutionPartConstructContext *_localctx = _tracker.createInstance<ExecutionPartConstructContext>(_ctx, getState());
  enterRule(_localctx, 390, Fortran90Parser::RuleExecutionPartConstruct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2226);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2221);
      executableConstruct();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2222);
      formatStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2223);
      dataStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2224);
      entryStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2225);
      doubleDoStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoubleDoStmtContext ------------------------------------------------------------------

Fortran90Parser::DoubleDoStmtContext::DoubleDoStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DoubleDoStmtContext::DO() {
  return getToken(Fortran90Parser::DO, 0);
}

Fortran90Parser::LblRefContext* Fortran90Parser::DoubleDoStmtContext::lblRef() {
  return getRuleContext<Fortran90Parser::LblRefContext>(0);
}

Fortran90Parser::CommaLoopControlContext* Fortran90Parser::DoubleDoStmtContext::commaLoopControl() {
  return getRuleContext<Fortran90Parser::CommaLoopControlContext>(0);
}


size_t Fortran90Parser::DoubleDoStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleDoubleDoStmt;
}

void Fortran90Parser::DoubleDoStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoubleDoStmt(this);
}

void Fortran90Parser::DoubleDoStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoubleDoStmt(this);
}

Fortran90Parser::DoubleDoStmtContext* Fortran90Parser::doubleDoStmt() {
  DoubleDoStmtContext *_localctx = _tracker.createInstance<DoubleDoStmtContext>(_ctx, getState());
  enterRule(_localctx, 392, Fortran90Parser::RuleDoubleDoStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2228);
    match(Fortran90Parser::DO);
    setState(2229);
    lblRef();
    setState(2230);
    commaLoopControl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataStmtContext ------------------------------------------------------------------

Fortran90Parser::DataStmtContext::DataStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DataStmtContext::DATA() {
  return getToken(Fortran90Parser::DATA, 0);
}

std::vector<Fortran90Parser::DataStmtSetContext *> Fortran90Parser::DataStmtContext::dataStmtSet() {
  return getRuleContexts<Fortran90Parser::DataStmtSetContext>();
}

Fortran90Parser::DataStmtSetContext* Fortran90Parser::DataStmtContext::dataStmtSet(size_t i) {
  return getRuleContext<Fortran90Parser::DataStmtSetContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::DataStmtContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::DataStmtContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::DataStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleDataStmt;
}

void Fortran90Parser::DataStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataStmt(this);
}

void Fortran90Parser::DataStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataStmt(this);
}

Fortran90Parser::DataStmtContext* Fortran90Parser::dataStmt() {
  DataStmtContext *_localctx = _tracker.createInstance<DataStmtContext>(_ctx, getState());
  enterRule(_localctx, 394, Fortran90Parser::RuleDataStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2232);
    match(Fortran90Parser::DATA);
    setState(2233);
    dataStmtSet();
    setState(2240);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2235);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Fortran90Parser::COMMA) {
          setState(2234);
          match(Fortran90Parser::COMMA);
        }
        setState(2237);
        dataStmtSet(); 
      }
      setState(2242);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataStmtSetContext ------------------------------------------------------------------

Fortran90Parser::DataStmtSetContext::DataStmtSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::Dse1Context* Fortran90Parser::DataStmtSetContext::dse1() {
  return getRuleContext<Fortran90Parser::Dse1Context>(0);
}

Fortran90Parser::Dse2Context* Fortran90Parser::DataStmtSetContext::dse2() {
  return getRuleContext<Fortran90Parser::Dse2Context>(0);
}


size_t Fortran90Parser::DataStmtSetContext::getRuleIndex() const {
  return Fortran90Parser::RuleDataStmtSet;
}

void Fortran90Parser::DataStmtSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataStmtSet(this);
}

void Fortran90Parser::DataStmtSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataStmtSet(this);
}

Fortran90Parser::DataStmtSetContext* Fortran90Parser::dataStmtSet() {
  DataStmtSetContext *_localctx = _tracker.createInstance<DataStmtSetContext>(_ctx, getState());
  enterRule(_localctx, 396, Fortran90Parser::RuleDataStmtSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2243);
    dse1();
    setState(2244);
    dse2();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dse1Context ------------------------------------------------------------------

Fortran90Parser::Dse1Context::Dse1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::DataStmtObjectContext *> Fortran90Parser::Dse1Context::dataStmtObject() {
  return getRuleContexts<Fortran90Parser::DataStmtObjectContext>();
}

Fortran90Parser::DataStmtObjectContext* Fortran90Parser::Dse1Context::dataStmtObject(size_t i) {
  return getRuleContext<Fortran90Parser::DataStmtObjectContext>(i);
}

tree::TerminalNode* Fortran90Parser::Dse1Context::DIV() {
  return getToken(Fortran90Parser::DIV, 0);
}

std::vector<tree::TerminalNode *> Fortran90Parser::Dse1Context::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::Dse1Context::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::Dse1Context::getRuleIndex() const {
  return Fortran90Parser::RuleDse1;
}

void Fortran90Parser::Dse1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDse1(this);
}

void Fortran90Parser::Dse1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDse1(this);
}

Fortran90Parser::Dse1Context* Fortran90Parser::dse1() {
  Dse1Context *_localctx = _tracker.createInstance<Dse1Context>(_ctx, getState());
  enterRule(_localctx, 398, Fortran90Parser::RuleDse1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2246);
    dataStmtObject();
    setState(2251);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(2247);
      match(Fortran90Parser::COMMA);
      setState(2248);
      dataStmtObject();
      setState(2253);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2254);
    match(Fortran90Parser::DIV);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dse2Context ------------------------------------------------------------------

Fortran90Parser::Dse2Context::Dse2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::DataStmtValueContext *> Fortran90Parser::Dse2Context::dataStmtValue() {
  return getRuleContexts<Fortran90Parser::DataStmtValueContext>();
}

Fortran90Parser::DataStmtValueContext* Fortran90Parser::Dse2Context::dataStmtValue(size_t i) {
  return getRuleContext<Fortran90Parser::DataStmtValueContext>(i);
}

tree::TerminalNode* Fortran90Parser::Dse2Context::DIV() {
  return getToken(Fortran90Parser::DIV, 0);
}

std::vector<tree::TerminalNode *> Fortran90Parser::Dse2Context::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::Dse2Context::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::Dse2Context::getRuleIndex() const {
  return Fortran90Parser::RuleDse2;
}

void Fortran90Parser::Dse2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDse2(this);
}

void Fortran90Parser::Dse2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDse2(this);
}

Fortran90Parser::Dse2Context* Fortran90Parser::dse2() {
  Dse2Context *_localctx = _tracker.createInstance<Dse2Context>(_ctx, getState());
  enterRule(_localctx, 400, Fortran90Parser::RuleDse2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2256);
    dataStmtValue();
    setState(2261);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(2257);
      match(Fortran90Parser::COMMA);
      setState(2258);
      dataStmtValue();
      setState(2263);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2264);
    match(Fortran90Parser::DIV);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataStmtValueContext ------------------------------------------------------------------

Fortran90Parser::DataStmtValueContext::DataStmtValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ConstantContext *> Fortran90Parser::DataStmtValueContext::constant() {
  return getRuleContexts<Fortran90Parser::ConstantContext>();
}

Fortran90Parser::ConstantContext* Fortran90Parser::DataStmtValueContext::constant(size_t i) {
  return getRuleContext<Fortran90Parser::ConstantContext>(i);
}

tree::TerminalNode* Fortran90Parser::DataStmtValueContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}

Fortran90Parser::NamedConstantUseContext* Fortran90Parser::DataStmtValueContext::namedConstantUse() {
  return getRuleContext<Fortran90Parser::NamedConstantUseContext>(0);
}


size_t Fortran90Parser::DataStmtValueContext::getRuleIndex() const {
  return Fortran90Parser::RuleDataStmtValue;
}

void Fortran90Parser::DataStmtValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataStmtValue(this);
}

void Fortran90Parser::DataStmtValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataStmtValue(this);
}

Fortran90Parser::DataStmtValueContext* Fortran90Parser::dataStmtValue() {
  DataStmtValueContext *_localctx = _tracker.createInstance<DataStmtValueContext>(_ctx, getState());
  enterRule(_localctx, 402, Fortran90Parser::RuleDataStmtValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2275);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2266);
      constant();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2267);
      constant();
      setState(2268);
      match(Fortran90Parser::STAR);
      setState(2269);
      constant();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2271);
      namedConstantUse();
      setState(2272);
      match(Fortran90Parser::STAR);
      setState(2273);
      constant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataStmtObjectContext ------------------------------------------------------------------

Fortran90Parser::DataStmtObjectContext::DataStmtObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableContext* Fortran90Parser::DataStmtObjectContext::variable() {
  return getRuleContext<Fortran90Parser::VariableContext>(0);
}

Fortran90Parser::DataImpliedDoContext* Fortran90Parser::DataStmtObjectContext::dataImpliedDo() {
  return getRuleContext<Fortran90Parser::DataImpliedDoContext>(0);
}


size_t Fortran90Parser::DataStmtObjectContext::getRuleIndex() const {
  return Fortran90Parser::RuleDataStmtObject;
}

void Fortran90Parser::DataStmtObjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataStmtObject(this);
}

void Fortran90Parser::DataStmtObjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataStmtObject(this);
}

Fortran90Parser::DataStmtObjectContext* Fortran90Parser::dataStmtObject() {
  DataStmtObjectContext *_localctx = _tracker.createInstance<DataStmtObjectContext>(_ctx, getState());
  enterRule(_localctx, 404, Fortran90Parser::RuleDataStmtObject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2279);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2277);
        variable();
        break;
      }

      case Fortran90Parser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(2278);
        dataImpliedDo();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableContext ------------------------------------------------------------------

Fortran90Parser::VariableContext::VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::VariableContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}

Fortran90Parser::SubscriptListRefContext* Fortran90Parser::VariableContext::subscriptListRef() {
  return getRuleContext<Fortran90Parser::SubscriptListRefContext>(0);
}

Fortran90Parser::SubstringRangeContext* Fortran90Parser::VariableContext::substringRange() {
  return getRuleContext<Fortran90Parser::SubstringRangeContext>(0);
}


size_t Fortran90Parser::VariableContext::getRuleIndex() const {
  return Fortran90Parser::RuleVariable;
}

void Fortran90Parser::VariableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable(this);
}

void Fortran90Parser::VariableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable(this);
}

Fortran90Parser::VariableContext* Fortran90Parser::variable() {
  VariableContext *_localctx = _tracker.createInstance<VariableContext>(_ctx, getState());
  enterRule(_localctx, 406, Fortran90Parser::RuleVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2281);
    variableName();
    setState(2283);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      setState(2282);
      subscriptListRef();
      break;
    }

    default:
      break;
    }
    setState(2286);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      setState(2285);
      substringRange();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubscriptListRefContext ------------------------------------------------------------------

Fortran90Parser::SubscriptListRefContext::SubscriptListRefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SubscriptListRefContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::SubscriptListContext* Fortran90Parser::SubscriptListRefContext::subscriptList() {
  return getRuleContext<Fortran90Parser::SubscriptListContext>(0);
}

tree::TerminalNode* Fortran90Parser::SubscriptListRefContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::SubscriptListRefContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubscriptListRef;
}

void Fortran90Parser::SubscriptListRefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscriptListRef(this);
}

void Fortran90Parser::SubscriptListRefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscriptListRef(this);
}

Fortran90Parser::SubscriptListRefContext* Fortran90Parser::subscriptListRef() {
  SubscriptListRefContext *_localctx = _tracker.createInstance<SubscriptListRefContext>(_ctx, getState());
  enterRule(_localctx, 408, Fortran90Parser::RuleSubscriptListRef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2288);
    match(Fortran90Parser::LPAREN);
    setState(2289);
    subscriptList();
    setState(2290);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubscriptListContext ------------------------------------------------------------------

Fortran90Parser::SubscriptListContext::SubscriptListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::SubscriptContext *> Fortran90Parser::SubscriptListContext::subscript() {
  return getRuleContexts<Fortran90Parser::SubscriptContext>();
}

Fortran90Parser::SubscriptContext* Fortran90Parser::SubscriptListContext::subscript(size_t i) {
  return getRuleContext<Fortran90Parser::SubscriptContext>(i);
}


size_t Fortran90Parser::SubscriptListContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubscriptList;
}

void Fortran90Parser::SubscriptListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscriptList(this);
}

void Fortran90Parser::SubscriptListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscriptList(this);
}

Fortran90Parser::SubscriptListContext* Fortran90Parser::subscriptList() {
  SubscriptListContext *_localctx = _tracker.createInstance<SubscriptListContext>(_ctx, getState());
  enterRule(_localctx, 410, Fortran90Parser::RuleSubscriptList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2293); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2292);
      subscript();
      setState(2295); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1375731714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1693353459891306497) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 288161656667373603) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubscriptContext ------------------------------------------------------------------

Fortran90Parser::SubscriptContext::SubscriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExpressionContext* Fortran90Parser::SubscriptContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::SubscriptContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubscript;
}

void Fortran90Parser::SubscriptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscript(this);
}

void Fortran90Parser::SubscriptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscript(this);
}

Fortran90Parser::SubscriptContext* Fortran90Parser::subscript() {
  SubscriptContext *_localctx = _tracker.createInstance<SubscriptContext>(_ctx, getState());
  enterRule(_localctx, 412, Fortran90Parser::RuleSubscript);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2297);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubstringRangeContext ------------------------------------------------------------------

Fortran90Parser::SubstringRangeContext::SubstringRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SubstringRangeContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::SubscriptTripletTailContext* Fortran90Parser::SubstringRangeContext::subscriptTripletTail() {
  return getRuleContext<Fortran90Parser::SubscriptTripletTailContext>(0);
}

tree::TerminalNode* Fortran90Parser::SubstringRangeContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::SubstringRangeContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::SubstringRangeContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubstringRange;
}

void Fortran90Parser::SubstringRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubstringRange(this);
}

void Fortran90Parser::SubstringRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubstringRange(this);
}

Fortran90Parser::SubstringRangeContext* Fortran90Parser::substringRange() {
  SubstringRangeContext *_localctx = _tracker.createInstance<SubstringRangeContext>(_ctx, getState());
  enterRule(_localctx, 414, Fortran90Parser::RuleSubstringRange);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2299);
    match(Fortran90Parser::LPAREN);
    setState(2301);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1375731714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1693353459891306497) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 288161656667373603) != 0)) {
      setState(2300);
      expression(0);
    }
    setState(2303);
    subscriptTripletTail();
    setState(2304);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataImpliedDoContext ------------------------------------------------------------------

Fortran90Parser::DataImpliedDoContext::DataImpliedDoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DataImpliedDoContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::DataIDoObjectListContext* Fortran90Parser::DataImpliedDoContext::dataIDoObjectList() {
  return getRuleContext<Fortran90Parser::DataIDoObjectListContext>(0);
}

std::vector<tree::TerminalNode *> Fortran90Parser::DataImpliedDoContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::DataImpliedDoContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}

Fortran90Parser::ImpliedDoVariableContext* Fortran90Parser::DataImpliedDoContext::impliedDoVariable() {
  return getRuleContext<Fortran90Parser::ImpliedDoVariableContext>(0);
}

tree::TerminalNode* Fortran90Parser::DataImpliedDoContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

std::vector<Fortran90Parser::ExpressionContext *> Fortran90Parser::DataImpliedDoContext::expression() {
  return getRuleContexts<Fortran90Parser::ExpressionContext>();
}

Fortran90Parser::ExpressionContext* Fortran90Parser::DataImpliedDoContext::expression(size_t i) {
  return getRuleContext<Fortran90Parser::ExpressionContext>(i);
}

tree::TerminalNode* Fortran90Parser::DataImpliedDoContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::DataImpliedDoContext::getRuleIndex() const {
  return Fortran90Parser::RuleDataImpliedDo;
}

void Fortran90Parser::DataImpliedDoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataImpliedDo(this);
}

void Fortran90Parser::DataImpliedDoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataImpliedDo(this);
}

Fortran90Parser::DataImpliedDoContext* Fortran90Parser::dataImpliedDo() {
  DataImpliedDoContext *_localctx = _tracker.createInstance<DataImpliedDoContext>(_ctx, getState());
  enterRule(_localctx, 416, Fortran90Parser::RuleDataImpliedDo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2328);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2306);
      match(Fortran90Parser::LPAREN);
      setState(2307);
      dataIDoObjectList();
      setState(2308);
      match(Fortran90Parser::COMMA);
      setState(2309);
      impliedDoVariable();
      setState(2310);
      match(Fortran90Parser::ASSIGN);
      setState(2311);
      expression(0);
      setState(2312);
      match(Fortran90Parser::COMMA);
      setState(2313);
      expression(0);
      setState(2314);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2316);
      match(Fortran90Parser::LPAREN);
      setState(2317);
      dataIDoObjectList();
      setState(2318);
      match(Fortran90Parser::COMMA);
      setState(2319);
      impliedDoVariable();
      setState(2320);
      match(Fortran90Parser::ASSIGN);
      setState(2321);
      expression(0);
      setState(2322);
      match(Fortran90Parser::COMMA);
      setState(2323);
      expression(0);
      setState(2324);
      match(Fortran90Parser::COMMA);
      setState(2325);
      expression(0);
      setState(2326);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataIDoObjectListContext ------------------------------------------------------------------

Fortran90Parser::DataIDoObjectListContext::DataIDoObjectListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::DataIDoObjectContext *> Fortran90Parser::DataIDoObjectListContext::dataIDoObject() {
  return getRuleContexts<Fortran90Parser::DataIDoObjectContext>();
}

Fortran90Parser::DataIDoObjectContext* Fortran90Parser::DataIDoObjectListContext::dataIDoObject(size_t i) {
  return getRuleContext<Fortran90Parser::DataIDoObjectContext>(i);
}


size_t Fortran90Parser::DataIDoObjectListContext::getRuleIndex() const {
  return Fortran90Parser::RuleDataIDoObjectList;
}

void Fortran90Parser::DataIDoObjectListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataIDoObjectList(this);
}

void Fortran90Parser::DataIDoObjectListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataIDoObjectList(this);
}

Fortran90Parser::DataIDoObjectListContext* Fortran90Parser::dataIDoObjectList() {
  DataIDoObjectListContext *_localctx = _tracker.createInstance<DataIDoObjectListContext>(_ctx, getState());
  enterRule(_localctx, 418, Fortran90Parser::RuleDataIDoObjectList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2331); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2330);
      dataIDoObject();
      setState(2333); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Fortran90Parser::LPAREN || _la == Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataIDoObjectContext ------------------------------------------------------------------

Fortran90Parser::DataIDoObjectContext::DataIDoObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ArrayElementContext* Fortran90Parser::DataIDoObjectContext::arrayElement() {
  return getRuleContext<Fortran90Parser::ArrayElementContext>(0);
}

Fortran90Parser::DataImpliedDoContext* Fortran90Parser::DataIDoObjectContext::dataImpliedDo() {
  return getRuleContext<Fortran90Parser::DataImpliedDoContext>(0);
}

Fortran90Parser::StructureComponentContext* Fortran90Parser::DataIDoObjectContext::structureComponent() {
  return getRuleContext<Fortran90Parser::StructureComponentContext>(0);
}


size_t Fortran90Parser::DataIDoObjectContext::getRuleIndex() const {
  return Fortran90Parser::RuleDataIDoObject;
}

void Fortran90Parser::DataIDoObjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataIDoObject(this);
}

void Fortran90Parser::DataIDoObjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataIDoObject(this);
}

Fortran90Parser::DataIDoObjectContext* Fortran90Parser::dataIDoObject() {
  DataIDoObjectContext *_localctx = _tracker.createInstance<DataIDoObjectContext>(_ctx, getState());
  enterRule(_localctx, 420, Fortran90Parser::RuleDataIDoObject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2338);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2335);
      arrayElement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2336);
      dataImpliedDo();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2337);
      structureComponent(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureComponentContext ------------------------------------------------------------------

Fortran90Parser::StructureComponentContext::StructureComponentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::StructureComponentContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}

Fortran90Parser::FieldSelectorContext* Fortran90Parser::StructureComponentContext::fieldSelector() {
  return getRuleContext<Fortran90Parser::FieldSelectorContext>(0);
}

Fortran90Parser::StructureComponentContext* Fortran90Parser::StructureComponentContext::structureComponent() {
  return getRuleContext<Fortran90Parser::StructureComponentContext>(0);
}


size_t Fortran90Parser::StructureComponentContext::getRuleIndex() const {
  return Fortran90Parser::RuleStructureComponent;
}

void Fortran90Parser::StructureComponentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructureComponent(this);
}

void Fortran90Parser::StructureComponentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructureComponent(this);
}


Fortran90Parser::StructureComponentContext* Fortran90Parser::structureComponent() {
   return structureComponent(0);
}

Fortran90Parser::StructureComponentContext* Fortran90Parser::structureComponent(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::StructureComponentContext *_localctx = _tracker.createInstance<StructureComponentContext>(_ctx, parentState);
  Fortran90Parser::StructureComponentContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 422;
  enterRecursionRule(_localctx, 422, Fortran90Parser::RuleStructureComponent, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2341);
    variableName();
    setState(2342);
    fieldSelector();
    _ctx->stop = _input->LT(-1);
    setState(2348);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<StructureComponentContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleStructureComponent);
        setState(2344);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2345);
        fieldSelector(); 
      }
      setState(2350);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FieldSelectorContext ------------------------------------------------------------------

Fortran90Parser::FieldSelectorContext::FieldSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::FieldSelectorContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::SectionSubscriptListContext* Fortran90Parser::FieldSelectorContext::sectionSubscriptList() {
  return getRuleContext<Fortran90Parser::SectionSubscriptListContext>(0);
}

tree::TerminalNode* Fortran90Parser::FieldSelectorContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::FieldSelectorContext::PCT() {
  return getToken(Fortran90Parser::PCT, 0);
}

tree::TerminalNode* Fortran90Parser::FieldSelectorContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::FieldSelectorContext::getRuleIndex() const {
  return Fortran90Parser::RuleFieldSelector;
}

void Fortran90Parser::FieldSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldSelector(this);
}

void Fortran90Parser::FieldSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldSelector(this);
}

Fortran90Parser::FieldSelectorContext* Fortran90Parser::fieldSelector() {
  FieldSelectorContext *_localctx = _tracker.createInstance<FieldSelectorContext>(_ctx, getState());
  enterRule(_localctx, 424, Fortran90Parser::RuleFieldSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2359);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::LPAREN: {
        enterOuterAlt(_localctx, 1);
        setState(2351);
        match(Fortran90Parser::LPAREN);
        setState(2352);
        sectionSubscriptList();
        setState(2353);
        match(Fortran90Parser::RPAREN);
        setState(2354);
        match(Fortran90Parser::PCT);
        setState(2355);
        match(Fortran90Parser::NAME);
        break;
      }

      case Fortran90Parser::PCT: {
        enterOuterAlt(_localctx, 2);
        setState(2357);
        match(Fortran90Parser::PCT);
        setState(2358);
        match(Fortran90Parser::NAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayElementContext ------------------------------------------------------------------

Fortran90Parser::ArrayElementContext::ArrayElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::ArrayElementContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::ArrayElementContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::SectionSubscriptListContext* Fortran90Parser::ArrayElementContext::sectionSubscriptList() {
  return getRuleContext<Fortran90Parser::SectionSubscriptListContext>(0);
}

tree::TerminalNode* Fortran90Parser::ArrayElementContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::StructureComponentContext* Fortran90Parser::ArrayElementContext::structureComponent() {
  return getRuleContext<Fortran90Parser::StructureComponentContext>(0);
}


size_t Fortran90Parser::ArrayElementContext::getRuleIndex() const {
  return Fortran90Parser::RuleArrayElement;
}

void Fortran90Parser::ArrayElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayElement(this);
}

void Fortran90Parser::ArrayElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayElement(this);
}

Fortran90Parser::ArrayElementContext* Fortran90Parser::arrayElement() {
  ArrayElementContext *_localctx = _tracker.createInstance<ArrayElementContext>(_ctx, getState());
  enterRule(_localctx, 426, Fortran90Parser::RuleArrayElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2371);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2361);
      variableName();
      setState(2362);
      match(Fortran90Parser::LPAREN);
      setState(2363);
      sectionSubscriptList();
      setState(2364);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2366);
      structureComponent(0);
      setState(2367);
      match(Fortran90Parser::LPAREN);
      setState(2368);
      sectionSubscriptList();
      setState(2369);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImpliedDoVariableContext ------------------------------------------------------------------

Fortran90Parser::ImpliedDoVariableContext::ImpliedDoVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ImpliedDoVariableContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::ImpliedDoVariableContext::getRuleIndex() const {
  return Fortran90Parser::RuleImpliedDoVariable;
}

void Fortran90Parser::ImpliedDoVariableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImpliedDoVariable(this);
}

void Fortran90Parser::ImpliedDoVariableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImpliedDoVariable(this);
}

Fortran90Parser::ImpliedDoVariableContext* Fortran90Parser::impliedDoVariable() {
  ImpliedDoVariableContext *_localctx = _tracker.createInstance<ImpliedDoVariableContext>(_ctx, getState());
  enterRule(_localctx, 428, Fortran90Parser::RuleImpliedDoVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2373);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommaLoopControlContext ------------------------------------------------------------------

Fortran90Parser::CommaLoopControlContext::CommaLoopControlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::LoopControlContext* Fortran90Parser::CommaLoopControlContext::loopControl() {
  return getRuleContext<Fortran90Parser::LoopControlContext>(0);
}

tree::TerminalNode* Fortran90Parser::CommaLoopControlContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}


size_t Fortran90Parser::CommaLoopControlContext::getRuleIndex() const {
  return Fortran90Parser::RuleCommaLoopControl;
}

void Fortran90Parser::CommaLoopControlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommaLoopControl(this);
}

void Fortran90Parser::CommaLoopControlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommaLoopControl(this);
}

Fortran90Parser::CommaLoopControlContext* Fortran90Parser::commaLoopControl() {
  CommaLoopControlContext *_localctx = _tracker.createInstance<CommaLoopControlContext>(_ctx, getState());
  enterRule(_localctx, 430, Fortran90Parser::RuleCommaLoopControl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::COMMA) {
      setState(2375);
      match(Fortran90Parser::COMMA);
    }
    setState(2378);
    loopControl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoopControlContext ------------------------------------------------------------------

Fortran90Parser::LoopControlContext::LoopControlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::LoopControlContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::LoopControlContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

std::vector<Fortran90Parser::ExpressionContext *> Fortran90Parser::LoopControlContext::expression() {
  return getRuleContexts<Fortran90Parser::ExpressionContext>();
}

Fortran90Parser::ExpressionContext* Fortran90Parser::LoopControlContext::expression(size_t i) {
  return getRuleContext<Fortran90Parser::ExpressionContext>(i);
}

tree::TerminalNode* Fortran90Parser::LoopControlContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::CommaExprContext* Fortran90Parser::LoopControlContext::commaExpr() {
  return getRuleContext<Fortran90Parser::CommaExprContext>(0);
}

tree::TerminalNode* Fortran90Parser::LoopControlContext::WHILE() {
  return getToken(Fortran90Parser::WHILE, 0);
}

tree::TerminalNode* Fortran90Parser::LoopControlContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::LoopControlContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::LoopControlContext::getRuleIndex() const {
  return Fortran90Parser::RuleLoopControl;
}

void Fortran90Parser::LoopControlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoopControl(this);
}

void Fortran90Parser::LoopControlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoopControl(this);
}

Fortran90Parser::LoopControlContext* Fortran90Parser::loopControl() {
  LoopControlContext *_localctx = _tracker.createInstance<LoopControlContext>(_ctx, getState());
  enterRule(_localctx, 432, Fortran90Parser::RuleLoopControl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2393);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2380);
        variableName();
        setState(2381);
        match(Fortran90Parser::ASSIGN);
        setState(2382);
        expression(0);
        setState(2383);
        match(Fortran90Parser::COMMA);
        setState(2384);
        expression(0);
        setState(2386);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
        case 1: {
          setState(2385);
          commaExpr();
          break;
        }

        default:
          break;
        }
        break;
      }

      case Fortran90Parser::WHILE: {
        enterOuterAlt(_localctx, 2);
        setState(2388);
        match(Fortran90Parser::WHILE);
        setState(2389);
        match(Fortran90Parser::LPAREN);
        setState(2390);
        expression(0);
        setState(2391);
        match(Fortran90Parser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableNameContext ------------------------------------------------------------------

Fortran90Parser::VariableNameContext::VariableNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::VariableNameContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::VariableNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleVariableName;
}

void Fortran90Parser::VariableNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableName(this);
}

void Fortran90Parser::VariableNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableName(this);
}

Fortran90Parser::VariableNameContext* Fortran90Parser::variableName() {
  VariableNameContext *_localctx = _tracker.createInstance<VariableNameContext>(_ctx, getState());
  enterRule(_localctx, 434, Fortran90Parser::RuleVariableName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2395);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommaExprContext ------------------------------------------------------------------

Fortran90Parser::CommaExprContext::CommaExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CommaExprContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::CommaExprContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::CommaExprContext::getRuleIndex() const {
  return Fortran90Parser::RuleCommaExpr;
}

void Fortran90Parser::CommaExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommaExpr(this);
}

void Fortran90Parser::CommaExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommaExpr(this);
}

Fortran90Parser::CommaExprContext* Fortran90Parser::commaExpr() {
  CommaExprContext *_localctx = _tracker.createInstance<CommaExprContext>(_ctx, getState());
  enterRule(_localctx, 436, Fortran90Parser::RuleCommaExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2397);
    match(Fortran90Parser::COMMA);
    setState(2398);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SemicolonStmtContext ------------------------------------------------------------------

Fortran90Parser::SemicolonStmtContext::SemicolonStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SemicolonStmtContext::SEMICOLON() {
  return getToken(Fortran90Parser::SEMICOLON, 0);
}

Fortran90Parser::ActionStmtContext* Fortran90Parser::SemicolonStmtContext::actionStmt() {
  return getRuleContext<Fortran90Parser::ActionStmtContext>(0);
}


size_t Fortran90Parser::SemicolonStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleSemicolonStmt;
}

void Fortran90Parser::SemicolonStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSemicolonStmt(this);
}

void Fortran90Parser::SemicolonStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSemicolonStmt(this);
}

Fortran90Parser::SemicolonStmtContext* Fortran90Parser::semicolonStmt() {
  SemicolonStmtContext *_localctx = _tracker.createInstance<SemicolonStmtContext>(_ctx, getState());
  enterRule(_localctx, 438, Fortran90Parser::RuleSemicolonStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2400);
    match(Fortran90Parser::SEMICOLON);
    setState(2401);
    actionStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ActionStmtContext ------------------------------------------------------------------

Fortran90Parser::ActionStmtContext::ActionStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ArithmeticIfStmtContext* Fortran90Parser::ActionStmtContext::arithmeticIfStmt() {
  return getRuleContext<Fortran90Parser::ArithmeticIfStmtContext>(0);
}

Fortran90Parser::AssignmentStmtContext* Fortran90Parser::ActionStmtContext::assignmentStmt() {
  return getRuleContext<Fortran90Parser::AssignmentStmtContext>(0);
}

Fortran90Parser::AssignStmtContext* Fortran90Parser::ActionStmtContext::assignStmt() {
  return getRuleContext<Fortran90Parser::AssignStmtContext>(0);
}

Fortran90Parser::BackspaceStmtContext* Fortran90Parser::ActionStmtContext::backspaceStmt() {
  return getRuleContext<Fortran90Parser::BackspaceStmtContext>(0);
}

Fortran90Parser::CallStmtContext* Fortran90Parser::ActionStmtContext::callStmt() {
  return getRuleContext<Fortran90Parser::CallStmtContext>(0);
}

Fortran90Parser::CloseStmtContext* Fortran90Parser::ActionStmtContext::closeStmt() {
  return getRuleContext<Fortran90Parser::CloseStmtContext>(0);
}

Fortran90Parser::ContinueStmtContext* Fortran90Parser::ActionStmtContext::continueStmt() {
  return getRuleContext<Fortran90Parser::ContinueStmtContext>(0);
}

Fortran90Parser::EndfileStmtContext* Fortran90Parser::ActionStmtContext::endfileStmt() {
  return getRuleContext<Fortran90Parser::EndfileStmtContext>(0);
}

Fortran90Parser::GotoStmtContext* Fortran90Parser::ActionStmtContext::gotoStmt() {
  return getRuleContext<Fortran90Parser::GotoStmtContext>(0);
}

Fortran90Parser::ComputedGotoStmtContext* Fortran90Parser::ActionStmtContext::computedGotoStmt() {
  return getRuleContext<Fortran90Parser::ComputedGotoStmtContext>(0);
}

Fortran90Parser::AssignedGotoStmtContext* Fortran90Parser::ActionStmtContext::assignedGotoStmt() {
  return getRuleContext<Fortran90Parser::AssignedGotoStmtContext>(0);
}

Fortran90Parser::IfStmtContext* Fortran90Parser::ActionStmtContext::ifStmt() {
  return getRuleContext<Fortran90Parser::IfStmtContext>(0);
}

Fortran90Parser::InquireStmtContext* Fortran90Parser::ActionStmtContext::inquireStmt() {
  return getRuleContext<Fortran90Parser::InquireStmtContext>(0);
}

Fortran90Parser::OpenStmtContext* Fortran90Parser::ActionStmtContext::openStmt() {
  return getRuleContext<Fortran90Parser::OpenStmtContext>(0);
}

Fortran90Parser::PauseStmtContext* Fortran90Parser::ActionStmtContext::pauseStmt() {
  return getRuleContext<Fortran90Parser::PauseStmtContext>(0);
}

Fortran90Parser::PrintStmtContext* Fortran90Parser::ActionStmtContext::printStmt() {
  return getRuleContext<Fortran90Parser::PrintStmtContext>(0);
}

Fortran90Parser::ReadStmtContext* Fortran90Parser::ActionStmtContext::readStmt() {
  return getRuleContext<Fortran90Parser::ReadStmtContext>(0);
}

Fortran90Parser::ReturnStmtContext* Fortran90Parser::ActionStmtContext::returnStmt() {
  return getRuleContext<Fortran90Parser::ReturnStmtContext>(0);
}

Fortran90Parser::RewindStmtContext* Fortran90Parser::ActionStmtContext::rewindStmt() {
  return getRuleContext<Fortran90Parser::RewindStmtContext>(0);
}

Fortran90Parser::StmtFunctionStmtContext* Fortran90Parser::ActionStmtContext::stmtFunctionStmt() {
  return getRuleContext<Fortran90Parser::StmtFunctionStmtContext>(0);
}

Fortran90Parser::StopStmtContext* Fortran90Parser::ActionStmtContext::stopStmt() {
  return getRuleContext<Fortran90Parser::StopStmtContext>(0);
}

Fortran90Parser::WriteStmtContext* Fortran90Parser::ActionStmtContext::writeStmt() {
  return getRuleContext<Fortran90Parser::WriteStmtContext>(0);
}

Fortran90Parser::AllocateStmtContext* Fortran90Parser::ActionStmtContext::allocateStmt() {
  return getRuleContext<Fortran90Parser::AllocateStmtContext>(0);
}

Fortran90Parser::CycleStmtContext* Fortran90Parser::ActionStmtContext::cycleStmt() {
  return getRuleContext<Fortran90Parser::CycleStmtContext>(0);
}

Fortran90Parser::DeallocateStmtContext* Fortran90Parser::ActionStmtContext::deallocateStmt() {
  return getRuleContext<Fortran90Parser::DeallocateStmtContext>(0);
}

Fortran90Parser::ExitStmtContext* Fortran90Parser::ActionStmtContext::exitStmt() {
  return getRuleContext<Fortran90Parser::ExitStmtContext>(0);
}

Fortran90Parser::NullifyStmtContext* Fortran90Parser::ActionStmtContext::nullifyStmt() {
  return getRuleContext<Fortran90Parser::NullifyStmtContext>(0);
}

Fortran90Parser::PointerAssignmentStmtContext* Fortran90Parser::ActionStmtContext::pointerAssignmentStmt() {
  return getRuleContext<Fortran90Parser::PointerAssignmentStmtContext>(0);
}

Fortran90Parser::WhereStmtContext* Fortran90Parser::ActionStmtContext::whereStmt() {
  return getRuleContext<Fortran90Parser::WhereStmtContext>(0);
}

Fortran90Parser::SemicolonStmtContext* Fortran90Parser::ActionStmtContext::semicolonStmt() {
  return getRuleContext<Fortran90Parser::SemicolonStmtContext>(0);
}


size_t Fortran90Parser::ActionStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleActionStmt;
}

void Fortran90Parser::ActionStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterActionStmt(this);
}

void Fortran90Parser::ActionStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitActionStmt(this);
}

Fortran90Parser::ActionStmtContext* Fortran90Parser::actionStmt() {
  ActionStmtContext *_localctx = _tracker.createInstance<ActionStmtContext>(_ctx, getState());
  enterRule(_localctx, 440, Fortran90Parser::RuleActionStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2433);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2403);
      arithmeticIfStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2404);
      assignmentStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2405);
      assignStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2406);
      backspaceStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2407);
      callStmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2408);
      closeStmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2409);
      continueStmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2410);
      endfileStmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2411);
      gotoStmt();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2412);
      computedGotoStmt();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2413);
      assignedGotoStmt();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(2414);
      ifStmt();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(2415);
      inquireStmt();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(2416);
      openStmt();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(2417);
      pauseStmt();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(2418);
      printStmt();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(2419);
      readStmt();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(2420);
      returnStmt();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(2421);
      rewindStmt();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(2422);
      stmtFunctionStmt();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(2423);
      stopStmt();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(2424);
      writeStmt();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(2425);
      allocateStmt();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(2426);
      cycleStmt();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(2427);
      deallocateStmt();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(2428);
      exitStmt();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(2429);
      nullifyStmt();
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(2430);
      pointerAssignmentStmt();
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(2431);
      whereStmt();
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(2432);
      semicolonStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereStmtContext ------------------------------------------------------------------

Fortran90Parser::WhereStmtContext::WhereStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::WhereStmtContext::WHERE() {
  return getToken(Fortran90Parser::WHERE, 0);
}

tree::TerminalNode* Fortran90Parser::WhereStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::MaskExprContext* Fortran90Parser::WhereStmtContext::maskExpr() {
  return getRuleContext<Fortran90Parser::MaskExprContext>(0);
}

tree::TerminalNode* Fortran90Parser::WhereStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::AssignmentStmtContext* Fortran90Parser::WhereStmtContext::assignmentStmt() {
  return getRuleContext<Fortran90Parser::AssignmentStmtContext>(0);
}


size_t Fortran90Parser::WhereStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleWhereStmt;
}

void Fortran90Parser::WhereStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhereStmt(this);
}

void Fortran90Parser::WhereStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhereStmt(this);
}

Fortran90Parser::WhereStmtContext* Fortran90Parser::whereStmt() {
  WhereStmtContext *_localctx = _tracker.createInstance<WhereStmtContext>(_ctx, getState());
  enterRule(_localctx, 442, Fortran90Parser::RuleWhereStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2435);
    match(Fortran90Parser::WHERE);
    setState(2436);
    match(Fortran90Parser::LPAREN);
    setState(2437);
    maskExpr();
    setState(2438);
    match(Fortran90Parser::RPAREN);
    setState(2439);
    assignmentStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerAssignmentStmtContext ------------------------------------------------------------------

Fortran90Parser::PointerAssignmentStmtContext::PointerAssignmentStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::PointerAssignmentStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::PointerAssignmentStmtContext::IMPLIEDT() {
  return getToken(Fortran90Parser::IMPLIEDT, 0);
}

Fortran90Parser::TargetContext* Fortran90Parser::PointerAssignmentStmtContext::target() {
  return getRuleContext<Fortran90Parser::TargetContext>(0);
}

tree::TerminalNode* Fortran90Parser::PointerAssignmentStmtContext::PCT() {
  return getToken(Fortran90Parser::PCT, 0);
}

Fortran90Parser::NameDataRefContext* Fortran90Parser::PointerAssignmentStmtContext::nameDataRef() {
  return getRuleContext<Fortran90Parser::NameDataRefContext>(0);
}

Fortran90Parser::SFExprListRefContext* Fortran90Parser::PointerAssignmentStmtContext::sFExprListRef() {
  return getRuleContext<Fortran90Parser::SFExprListRefContext>(0);
}


size_t Fortran90Parser::PointerAssignmentStmtContext::getRuleIndex() const {
  return Fortran90Parser::RulePointerAssignmentStmt;
}

void Fortran90Parser::PointerAssignmentStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointerAssignmentStmt(this);
}

void Fortran90Parser::PointerAssignmentStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointerAssignmentStmt(this);
}

Fortran90Parser::PointerAssignmentStmtContext* Fortran90Parser::pointerAssignmentStmt() {
  PointerAssignmentStmtContext *_localctx = _tracker.createInstance<PointerAssignmentStmtContext>(_ctx, getState());
  enterRule(_localctx, 444, Fortran90Parser::RulePointerAssignmentStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2453);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2441);
      match(Fortran90Parser::NAME);
      setState(2442);
      match(Fortran90Parser::IMPLIEDT);
      setState(2443);
      target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2444);
      match(Fortran90Parser::NAME);
      setState(2446);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::LPAREN) {
        setState(2445);
        sFExprListRef();
      }
      setState(2448);
      match(Fortran90Parser::PCT);
      setState(2449);
      nameDataRef();
      setState(2450);
      match(Fortran90Parser::IMPLIEDT);
      setState(2451);
      target();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TargetContext ------------------------------------------------------------------

Fortran90Parser::TargetContext::TargetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExpressionContext* Fortran90Parser::TargetContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::TargetContext::getRuleIndex() const {
  return Fortran90Parser::RuleTarget;
}

void Fortran90Parser::TargetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTarget(this);
}

void Fortran90Parser::TargetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTarget(this);
}

Fortran90Parser::TargetContext* Fortran90Parser::target() {
  TargetContext *_localctx = _tracker.createInstance<TargetContext>(_ctx, getState());
  enterRule(_localctx, 446, Fortran90Parser::RuleTarget);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2455);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullifyStmtContext ------------------------------------------------------------------

Fortran90Parser::NullifyStmtContext::NullifyStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::NullifyStmtContext::NULLIFY() {
  return getToken(Fortran90Parser::NULLIFY, 0);
}

tree::TerminalNode* Fortran90Parser::NullifyStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::PointerObjectListContext* Fortran90Parser::NullifyStmtContext::pointerObjectList() {
  return getRuleContext<Fortran90Parser::PointerObjectListContext>(0);
}

tree::TerminalNode* Fortran90Parser::NullifyStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::NullifyStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleNullifyStmt;
}

void Fortran90Parser::NullifyStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNullifyStmt(this);
}

void Fortran90Parser::NullifyStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNullifyStmt(this);
}

Fortran90Parser::NullifyStmtContext* Fortran90Parser::nullifyStmt() {
  NullifyStmtContext *_localctx = _tracker.createInstance<NullifyStmtContext>(_ctx, getState());
  enterRule(_localctx, 448, Fortran90Parser::RuleNullifyStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2457);
    match(Fortran90Parser::NULLIFY);
    setState(2458);
    match(Fortran90Parser::LPAREN);
    setState(2459);
    pointerObjectList();
    setState(2460);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerObjectListContext ------------------------------------------------------------------

Fortran90Parser::PointerObjectListContext::PointerObjectListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::PointerObjectContext *> Fortran90Parser::PointerObjectListContext::pointerObject() {
  return getRuleContexts<Fortran90Parser::PointerObjectContext>();
}

Fortran90Parser::PointerObjectContext* Fortran90Parser::PointerObjectListContext::pointerObject(size_t i) {
  return getRuleContext<Fortran90Parser::PointerObjectContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::PointerObjectListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::PointerObjectListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::PointerObjectListContext::getRuleIndex() const {
  return Fortran90Parser::RulePointerObjectList;
}

void Fortran90Parser::PointerObjectListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointerObjectList(this);
}

void Fortran90Parser::PointerObjectListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointerObjectList(this);
}

Fortran90Parser::PointerObjectListContext* Fortran90Parser::pointerObjectList() {
  PointerObjectListContext *_localctx = _tracker.createInstance<PointerObjectListContext>(_ctx, getState());
  enterRule(_localctx, 450, Fortran90Parser::RulePointerObjectList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2462);
    pointerObject();
    setState(2467);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(2463);
      match(Fortran90Parser::COMMA);
      setState(2464);
      pointerObject();
      setState(2469);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerObjectContext ------------------------------------------------------------------

Fortran90Parser::PointerObjectContext::PointerObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::PointerObjectContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

Fortran90Parser::PointerFieldContext* Fortran90Parser::PointerObjectContext::pointerField() {
  return getRuleContext<Fortran90Parser::PointerFieldContext>(0);
}


size_t Fortran90Parser::PointerObjectContext::getRuleIndex() const {
  return Fortran90Parser::RulePointerObject;
}

void Fortran90Parser::PointerObjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointerObject(this);
}

void Fortran90Parser::PointerObjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointerObject(this);
}

Fortran90Parser::PointerObjectContext* Fortran90Parser::pointerObject() {
  PointerObjectContext *_localctx = _tracker.createInstance<PointerObjectContext>(_ctx, getState());
  enterRule(_localctx, 452, Fortran90Parser::RulePointerObject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2472);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2470);
      match(Fortran90Parser::NAME);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2471);
      pointerField(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerFieldContext ------------------------------------------------------------------

Fortran90Parser::PointerFieldContext::PointerFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Fortran90Parser::PointerFieldContext::NAME() {
  return getTokens(Fortran90Parser::NAME);
}

tree::TerminalNode* Fortran90Parser::PointerFieldContext::NAME(size_t i) {
  return getToken(Fortran90Parser::NAME, i);
}

tree::TerminalNode* Fortran90Parser::PointerFieldContext::PCT() {
  return getToken(Fortran90Parser::PCT, 0);
}

Fortran90Parser::SFExprListRefContext* Fortran90Parser::PointerFieldContext::sFExprListRef() {
  return getRuleContext<Fortran90Parser::SFExprListRefContext>(0);
}

Fortran90Parser::PointerFieldContext* Fortran90Parser::PointerFieldContext::pointerField() {
  return getRuleContext<Fortran90Parser::PointerFieldContext>(0);
}

Fortran90Parser::FieldSelectorContext* Fortran90Parser::PointerFieldContext::fieldSelector() {
  return getRuleContext<Fortran90Parser::FieldSelectorContext>(0);
}


size_t Fortran90Parser::PointerFieldContext::getRuleIndex() const {
  return Fortran90Parser::RulePointerField;
}

void Fortran90Parser::PointerFieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointerField(this);
}

void Fortran90Parser::PointerFieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointerField(this);
}


Fortran90Parser::PointerFieldContext* Fortran90Parser::pointerField() {
   return pointerField(0);
}

Fortran90Parser::PointerFieldContext* Fortran90Parser::pointerField(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::PointerFieldContext *_localctx = _tracker.createInstance<PointerFieldContext>(_ctx, parentState);
  Fortran90Parser::PointerFieldContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 454;
  enterRecursionRule(_localctx, 454, Fortran90Parser::RulePointerField, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2475);
    match(Fortran90Parser::NAME);
    setState(2477);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::LPAREN) {
      setState(2476);
      sFExprListRef();
    }
    setState(2479);
    match(Fortran90Parser::PCT);
    setState(2480);
    match(Fortran90Parser::NAME);
    _ctx->stop = _input->LT(-1);
    setState(2486);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<PointerFieldContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RulePointerField);
        setState(2482);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2483);
        fieldSelector(); 
      }
      setState(2488);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExitStmtContext ------------------------------------------------------------------

Fortran90Parser::ExitStmtContext::ExitStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ExitStmtContext::EXIT() {
  return getToken(Fortran90Parser::EXIT, 0);
}

Fortran90Parser::EndNameContext* Fortran90Parser::ExitStmtContext::endName() {
  return getRuleContext<Fortran90Parser::EndNameContext>(0);
}


size_t Fortran90Parser::ExitStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleExitStmt;
}

void Fortran90Parser::ExitStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExitStmt(this);
}

void Fortran90Parser::ExitStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExitStmt(this);
}

Fortran90Parser::ExitStmtContext* Fortran90Parser::exitStmt() {
  ExitStmtContext *_localctx = _tracker.createInstance<ExitStmtContext>(_ctx, getState());
  enterRule(_localctx, 456, Fortran90Parser::RuleExitStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2489);
    match(Fortran90Parser::EXIT);
    setState(2491);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      setState(2490);
      endName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeallocateStmtContext ------------------------------------------------------------------

Fortran90Parser::DeallocateStmtContext::DeallocateStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DeallocateStmtContext::DEALLOCATE() {
  return getToken(Fortran90Parser::DEALLOCATE, 0);
}

tree::TerminalNode* Fortran90Parser::DeallocateStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::AllocateObjectListContext* Fortran90Parser::DeallocateStmtContext::allocateObjectList() {
  return getRuleContext<Fortran90Parser::AllocateObjectListContext>(0);
}

tree::TerminalNode* Fortran90Parser::DeallocateStmtContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

tree::TerminalNode* Fortran90Parser::DeallocateStmtContext::STAT() {
  return getToken(Fortran90Parser::STAT, 0);
}

tree::TerminalNode* Fortran90Parser::DeallocateStmtContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::VariableContext* Fortran90Parser::DeallocateStmtContext::variable() {
  return getRuleContext<Fortran90Parser::VariableContext>(0);
}

tree::TerminalNode* Fortran90Parser::DeallocateStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::DeallocateStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleDeallocateStmt;
}

void Fortran90Parser::DeallocateStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeallocateStmt(this);
}

void Fortran90Parser::DeallocateStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeallocateStmt(this);
}

Fortran90Parser::DeallocateStmtContext* Fortran90Parser::deallocateStmt() {
  DeallocateStmtContext *_localctx = _tracker.createInstance<DeallocateStmtContext>(_ctx, getState());
  enterRule(_localctx, 458, Fortran90Parser::RuleDeallocateStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2507);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2493);
      match(Fortran90Parser::DEALLOCATE);
      setState(2494);
      match(Fortran90Parser::LPAREN);
      setState(2495);
      allocateObjectList();
      setState(2496);
      match(Fortran90Parser::COMMA);
      setState(2497);
      match(Fortran90Parser::STAT);
      setState(2498);
      match(Fortran90Parser::ASSIGN);
      setState(2499);
      variable();
      setState(2500);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2502);
      match(Fortran90Parser::DEALLOCATE);
      setState(2503);
      match(Fortran90Parser::LPAREN);
      setState(2504);
      allocateObjectList();
      setState(2505);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocateObjectListContext ------------------------------------------------------------------

Fortran90Parser::AllocateObjectListContext::AllocateObjectListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::AllocateObjectContext *> Fortran90Parser::AllocateObjectListContext::allocateObject() {
  return getRuleContexts<Fortran90Parser::AllocateObjectContext>();
}

Fortran90Parser::AllocateObjectContext* Fortran90Parser::AllocateObjectListContext::allocateObject(size_t i) {
  return getRuleContext<Fortran90Parser::AllocateObjectContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::AllocateObjectListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::AllocateObjectListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::AllocateObjectListContext::getRuleIndex() const {
  return Fortran90Parser::RuleAllocateObjectList;
}

void Fortran90Parser::AllocateObjectListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocateObjectList(this);
}

void Fortran90Parser::AllocateObjectListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocateObjectList(this);
}

Fortran90Parser::AllocateObjectListContext* Fortran90Parser::allocateObjectList() {
  AllocateObjectListContext *_localctx = _tracker.createInstance<AllocateObjectListContext>(_ctx, getState());
  enterRule(_localctx, 460, Fortran90Parser::RuleAllocateObjectList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2509);
    allocateObject(0);
    setState(2514);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2510);
        match(Fortran90Parser::COMMA);
        setState(2511);
        allocateObject(0); 
      }
      setState(2516);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CycleStmtContext ------------------------------------------------------------------

Fortran90Parser::CycleStmtContext::CycleStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CycleStmtContext::CYCLE() {
  return getToken(Fortran90Parser::CYCLE, 0);
}

Fortran90Parser::EndNameContext* Fortran90Parser::CycleStmtContext::endName() {
  return getRuleContext<Fortran90Parser::EndNameContext>(0);
}


size_t Fortran90Parser::CycleStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleCycleStmt;
}

void Fortran90Parser::CycleStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCycleStmt(this);
}

void Fortran90Parser::CycleStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCycleStmt(this);
}

Fortran90Parser::CycleStmtContext* Fortran90Parser::cycleStmt() {
  CycleStmtContext *_localctx = _tracker.createInstance<CycleStmtContext>(_ctx, getState());
  enterRule(_localctx, 462, Fortran90Parser::RuleCycleStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2517);
    match(Fortran90Parser::CYCLE);
    setState(2519);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      setState(2518);
      endName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocateStmtContext ------------------------------------------------------------------

Fortran90Parser::AllocateStmtContext::AllocateStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::AllocateStmtContext::ALLOCATE() {
  return getToken(Fortran90Parser::ALLOCATE, 0);
}

tree::TerminalNode* Fortran90Parser::AllocateStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::AllocationListContext* Fortran90Parser::AllocateStmtContext::allocationList() {
  return getRuleContext<Fortran90Parser::AllocationListContext>(0);
}

tree::TerminalNode* Fortran90Parser::AllocateStmtContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

tree::TerminalNode* Fortran90Parser::AllocateStmtContext::STAT() {
  return getToken(Fortran90Parser::STAT, 0);
}

tree::TerminalNode* Fortran90Parser::AllocateStmtContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::VariableContext* Fortran90Parser::AllocateStmtContext::variable() {
  return getRuleContext<Fortran90Parser::VariableContext>(0);
}

tree::TerminalNode* Fortran90Parser::AllocateStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::AllocateStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleAllocateStmt;
}

void Fortran90Parser::AllocateStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocateStmt(this);
}

void Fortran90Parser::AllocateStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocateStmt(this);
}

Fortran90Parser::AllocateStmtContext* Fortran90Parser::allocateStmt() {
  AllocateStmtContext *_localctx = _tracker.createInstance<AllocateStmtContext>(_ctx, getState());
  enterRule(_localctx, 464, Fortran90Parser::RuleAllocateStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2535);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2521);
      match(Fortran90Parser::ALLOCATE);
      setState(2522);
      match(Fortran90Parser::LPAREN);
      setState(2523);
      allocationList();
      setState(2524);
      match(Fortran90Parser::COMMA);
      setState(2525);
      match(Fortran90Parser::STAT);
      setState(2526);
      match(Fortran90Parser::ASSIGN);
      setState(2527);
      variable();
      setState(2528);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2530);
      match(Fortran90Parser::ALLOCATE);
      setState(2531);
      match(Fortran90Parser::LPAREN);
      setState(2532);
      allocationList();
      setState(2533);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocationListContext ------------------------------------------------------------------

Fortran90Parser::AllocationListContext::AllocationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::AllocationContext *> Fortran90Parser::AllocationListContext::allocation() {
  return getRuleContexts<Fortran90Parser::AllocationContext>();
}

Fortran90Parser::AllocationContext* Fortran90Parser::AllocationListContext::allocation(size_t i) {
  return getRuleContext<Fortran90Parser::AllocationContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::AllocationListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::AllocationListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::AllocationListContext::getRuleIndex() const {
  return Fortran90Parser::RuleAllocationList;
}

void Fortran90Parser::AllocationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocationList(this);
}

void Fortran90Parser::AllocationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocationList(this);
}

Fortran90Parser::AllocationListContext* Fortran90Parser::allocationList() {
  AllocationListContext *_localctx = _tracker.createInstance<AllocationListContext>(_ctx, getState());
  enterRule(_localctx, 466, Fortran90Parser::RuleAllocationList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2537);
    allocation();
    setState(2542);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2538);
        match(Fortran90Parser::COMMA);
        setState(2539);
        allocation(); 
      }
      setState(2544);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocationContext ------------------------------------------------------------------

Fortran90Parser::AllocationContext::AllocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::AllocateObjectContext* Fortran90Parser::AllocationContext::allocateObject() {
  return getRuleContext<Fortran90Parser::AllocateObjectContext>(0);
}

Fortran90Parser::AllocatedShapeContext* Fortran90Parser::AllocationContext::allocatedShape() {
  return getRuleContext<Fortran90Parser::AllocatedShapeContext>(0);
}


size_t Fortran90Parser::AllocationContext::getRuleIndex() const {
  return Fortran90Parser::RuleAllocation;
}

void Fortran90Parser::AllocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocation(this);
}

void Fortran90Parser::AllocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocation(this);
}

Fortran90Parser::AllocationContext* Fortran90Parser::allocation() {
  AllocationContext *_localctx = _tracker.createInstance<AllocationContext>(_ctx, getState());
  enterRule(_localctx, 468, Fortran90Parser::RuleAllocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2549);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2545);
      allocateObject(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2546);
      allocateObject(0);
      setState(2547);
      allocatedShape();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocateObjectContext ------------------------------------------------------------------

Fortran90Parser::AllocateObjectContext::AllocateObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::AllocateObjectContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}

Fortran90Parser::AllocateObjectContext* Fortran90Parser::AllocateObjectContext::allocateObject() {
  return getRuleContext<Fortran90Parser::AllocateObjectContext>(0);
}

Fortran90Parser::FieldSelectorContext* Fortran90Parser::AllocateObjectContext::fieldSelector() {
  return getRuleContext<Fortran90Parser::FieldSelectorContext>(0);
}


size_t Fortran90Parser::AllocateObjectContext::getRuleIndex() const {
  return Fortran90Parser::RuleAllocateObject;
}

void Fortran90Parser::AllocateObjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocateObject(this);
}

void Fortran90Parser::AllocateObjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocateObject(this);
}


Fortran90Parser::AllocateObjectContext* Fortran90Parser::allocateObject() {
   return allocateObject(0);
}

Fortran90Parser::AllocateObjectContext* Fortran90Parser::allocateObject(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::AllocateObjectContext *_localctx = _tracker.createInstance<AllocateObjectContext>(_ctx, parentState);
  Fortran90Parser::AllocateObjectContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 470;
  enterRecursionRule(_localctx, 470, Fortran90Parser::RuleAllocateObject, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2552);
    variableName();
    _ctx->stop = _input->LT(-1);
    setState(2558);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<AllocateObjectContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleAllocateObject);
        setState(2554);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2555);
        fieldSelector(); 
      }
      setState(2560);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AllocatedShapeContext ------------------------------------------------------------------

Fortran90Parser::AllocatedShapeContext::AllocatedShapeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::AllocatedShapeContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::SectionSubscriptListContext* Fortran90Parser::AllocatedShapeContext::sectionSubscriptList() {
  return getRuleContext<Fortran90Parser::SectionSubscriptListContext>(0);
}

tree::TerminalNode* Fortran90Parser::AllocatedShapeContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::AllocatedShapeContext::getRuleIndex() const {
  return Fortran90Parser::RuleAllocatedShape;
}

void Fortran90Parser::AllocatedShapeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocatedShape(this);
}

void Fortran90Parser::AllocatedShapeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocatedShape(this);
}

Fortran90Parser::AllocatedShapeContext* Fortran90Parser::allocatedShape() {
  AllocatedShapeContext *_localctx = _tracker.createInstance<AllocatedShapeContext>(_ctx, getState());
  enterRule(_localctx, 472, Fortran90Parser::RuleAllocatedShape);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2561);
    match(Fortran90Parser::LPAREN);
    setState(2562);
    sectionSubscriptList();
    setState(2563);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StopStmtContext ------------------------------------------------------------------

Fortran90Parser::StopStmtContext::StopStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::StopStmtContext::STOP() {
  return getToken(Fortran90Parser::STOP, 0);
}

tree::TerminalNode* Fortran90Parser::StopStmtContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}

tree::TerminalNode* Fortran90Parser::StopStmtContext::SCON() {
  return getToken(Fortran90Parser::SCON, 0);
}


size_t Fortran90Parser::StopStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleStopStmt;
}

void Fortran90Parser::StopStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStopStmt(this);
}

void Fortran90Parser::StopStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStopStmt(this);
}

Fortran90Parser::StopStmtContext* Fortran90Parser::stopStmt() {
  StopStmtContext *_localctx = _tracker.createInstance<StopStmtContext>(_ctx, getState());
  enterRule(_localctx, 474, Fortran90Parser::RuleStopStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2565);
    match(Fortran90Parser::STOP);
    setState(2567);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
    case 1: {
      setState(2566);
      _la = _input->LA(1);
      if (!(_la == Fortran90Parser::SCON

      || _la == Fortran90Parser::ICON)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WriteStmtContext ------------------------------------------------------------------

Fortran90Parser::WriteStmtContext::WriteStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::WriteStmtContext::WRITE() {
  return getToken(Fortran90Parser::WRITE, 0);
}

tree::TerminalNode* Fortran90Parser::WriteStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::IoControlSpecListContext* Fortran90Parser::WriteStmtContext::ioControlSpecList() {
  return getRuleContext<Fortran90Parser::IoControlSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::WriteStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::OutputItemListContext* Fortran90Parser::WriteStmtContext::outputItemList() {
  return getRuleContext<Fortran90Parser::OutputItemListContext>(0);
}


size_t Fortran90Parser::WriteStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleWriteStmt;
}

void Fortran90Parser::WriteStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWriteStmt(this);
}

void Fortran90Parser::WriteStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWriteStmt(this);
}

Fortran90Parser::WriteStmtContext* Fortran90Parser::writeStmt() {
  WriteStmtContext *_localctx = _tracker.createInstance<WriteStmtContext>(_ctx, getState());
  enterRule(_localctx, 476, Fortran90Parser::RuleWriteStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2569);
    match(Fortran90Parser::WRITE);
    setState(2570);
    match(Fortran90Parser::LPAREN);
    setState(2571);
    ioControlSpecList(0);
    setState(2572);
    match(Fortran90Parser::RPAREN);
    setState(2574);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
    case 1: {
      setState(2573);
      outputItemList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IoControlSpecListContext ------------------------------------------------------------------

Fortran90Parser::IoControlSpecListContext::IoControlSpecListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::IoControlSpecListContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecListContext::DOLLAR() {
  return getToken(Fortran90Parser::DOLLAR, 0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecListContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::FormatIdentifierContext* Fortran90Parser::IoControlSpecListContext::formatIdentifier() {
  return getRuleContext<Fortran90Parser::FormatIdentifierContext>(0);
}

Fortran90Parser::IoControlSpecContext* Fortran90Parser::IoControlSpecListContext::ioControlSpec() {
  return getRuleContext<Fortran90Parser::IoControlSpecContext>(0);
}

Fortran90Parser::IoControlSpecListContext* Fortran90Parser::IoControlSpecListContext::ioControlSpecList() {
  return getRuleContext<Fortran90Parser::IoControlSpecListContext>(0);
}


size_t Fortran90Parser::IoControlSpecListContext::getRuleIndex() const {
  return Fortran90Parser::RuleIoControlSpecList;
}

void Fortran90Parser::IoControlSpecListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIoControlSpecList(this);
}

void Fortran90Parser::IoControlSpecListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIoControlSpecList(this);
}


Fortran90Parser::IoControlSpecListContext* Fortran90Parser::ioControlSpecList() {
   return ioControlSpecList(0);
}

Fortran90Parser::IoControlSpecListContext* Fortran90Parser::ioControlSpecList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::IoControlSpecListContext *_localctx = _tracker.createInstance<IoControlSpecListContext>(_ctx, parentState);
  Fortran90Parser::IoControlSpecListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 478;
  enterRecursionRule(_localctx, 478, Fortran90Parser::RuleIoControlSpecList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2590);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      setState(2577);
      unitIdentifier();
      setState(2578);
      match(Fortran90Parser::DOLLAR);
      setState(2579);
      match(Fortran90Parser::COMMA);
      break;
    }

    case 2: {
      setState(2581);
      unitIdentifier();
      setState(2582);
      match(Fortran90Parser::COMMA);
      setState(2583);
      formatIdentifier();
      break;
    }

    case 3: {
      setState(2585);
      unitIdentifier();
      setState(2586);
      match(Fortran90Parser::COMMA);
      setState(2587);
      ioControlSpec();
      break;
    }

    case 4: {
      setState(2589);
      ioControlSpec();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2597);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<IoControlSpecListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleIoControlSpecList);
        setState(2592);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2593);
        match(Fortran90Parser::COMMA);
        setState(2594);
        ioControlSpec(); 
      }
      setState(2599);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- StmtFunctionStmtContext ------------------------------------------------------------------

Fortran90Parser::StmtFunctionStmtContext::StmtFunctionStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::StmtFunctionStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

Fortran90Parser::StmtFunctionRangeContext* Fortran90Parser::StmtFunctionStmtContext::stmtFunctionRange() {
  return getRuleContext<Fortran90Parser::StmtFunctionRangeContext>(0);
}


size_t Fortran90Parser::StmtFunctionStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleStmtFunctionStmt;
}

void Fortran90Parser::StmtFunctionStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmtFunctionStmt(this);
}

void Fortran90Parser::StmtFunctionStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmtFunctionStmt(this);
}

Fortran90Parser::StmtFunctionStmtContext* Fortran90Parser::stmtFunctionStmt() {
  StmtFunctionStmtContext *_localctx = _tracker.createInstance<StmtFunctionStmtContext>(_ctx, getState());
  enterRule(_localctx, 480, Fortran90Parser::RuleStmtFunctionStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2600);
    match(Fortran90Parser::NAME);
    setState(2601);
    stmtFunctionRange();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtFunctionRangeContext ------------------------------------------------------------------

Fortran90Parser::StmtFunctionRangeContext::StmtFunctionRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::StmtFunctionRangeContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::StmtFunctionRangeContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::StmtFunctionRangeContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::StmtFunctionRangeContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

Fortran90Parser::SFDummyArgNameListContext* Fortran90Parser::StmtFunctionRangeContext::sFDummyArgNameList() {
  return getRuleContext<Fortran90Parser::SFDummyArgNameListContext>(0);
}


size_t Fortran90Parser::StmtFunctionRangeContext::getRuleIndex() const {
  return Fortran90Parser::RuleStmtFunctionRange;
}

void Fortran90Parser::StmtFunctionRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmtFunctionRange(this);
}

void Fortran90Parser::StmtFunctionRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmtFunctionRange(this);
}

Fortran90Parser::StmtFunctionRangeContext* Fortran90Parser::stmtFunctionRange() {
  StmtFunctionRangeContext *_localctx = _tracker.createInstance<StmtFunctionRangeContext>(_ctx, getState());
  enterRule(_localctx, 482, Fortran90Parser::RuleStmtFunctionRange);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2603);
    match(Fortran90Parser::LPAREN);
    setState(2605);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::NAME) {
      setState(2604);
      sFDummyArgNameList();
    }
    setState(2607);
    match(Fortran90Parser::RPAREN);
    setState(2608);
    match(Fortran90Parser::ASSIGN);
    setState(2609);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SFDummyArgNameListContext ------------------------------------------------------------------

Fortran90Parser::SFDummyArgNameListContext::SFDummyArgNameListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::SFDummyArgNameContext *> Fortran90Parser::SFDummyArgNameListContext::sFDummyArgName() {
  return getRuleContexts<Fortran90Parser::SFDummyArgNameContext>();
}

Fortran90Parser::SFDummyArgNameContext* Fortran90Parser::SFDummyArgNameListContext::sFDummyArgName(size_t i) {
  return getRuleContext<Fortran90Parser::SFDummyArgNameContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::SFDummyArgNameListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::SFDummyArgNameListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::SFDummyArgNameListContext::getRuleIndex() const {
  return Fortran90Parser::RuleSFDummyArgNameList;
}

void Fortran90Parser::SFDummyArgNameListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSFDummyArgNameList(this);
}

void Fortran90Parser::SFDummyArgNameListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSFDummyArgNameList(this);
}

Fortran90Parser::SFDummyArgNameListContext* Fortran90Parser::sFDummyArgNameList() {
  SFDummyArgNameListContext *_localctx = _tracker.createInstance<SFDummyArgNameListContext>(_ctx, getState());
  enterRule(_localctx, 484, Fortran90Parser::RuleSFDummyArgNameList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2611);
    sFDummyArgName();
    setState(2616);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(2612);
      match(Fortran90Parser::COMMA);
      setState(2613);
      sFDummyArgName();
      setState(2618);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SFDummyArgNameContext ------------------------------------------------------------------

Fortran90Parser::SFDummyArgNameContext::SFDummyArgNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SFDummyArgNameContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::SFDummyArgNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleSFDummyArgName;
}

void Fortran90Parser::SFDummyArgNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSFDummyArgName(this);
}

void Fortran90Parser::SFDummyArgNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSFDummyArgName(this);
}

Fortran90Parser::SFDummyArgNameContext* Fortran90Parser::sFDummyArgName() {
  SFDummyArgNameContext *_localctx = _tracker.createInstance<SFDummyArgNameContext>(_ctx, getState());
  enterRule(_localctx, 486, Fortran90Parser::RuleSFDummyArgName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2619);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStmtContext ------------------------------------------------------------------

Fortran90Parser::ReturnStmtContext::ReturnStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ReturnStmtContext::RETURN() {
  return getToken(Fortran90Parser::RETURN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::ReturnStmtContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::ReturnStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleReturnStmt;
}

void Fortran90Parser::ReturnStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStmt(this);
}

void Fortran90Parser::ReturnStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStmt(this);
}

Fortran90Parser::ReturnStmtContext* Fortran90Parser::returnStmt() {
  ReturnStmtContext *_localctx = _tracker.createInstance<ReturnStmtContext>(_ctx, getState());
  enterRule(_localctx, 488, Fortran90Parser::RuleReturnStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2621);
    match(Fortran90Parser::RETURN);
    setState(2623);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
      setState(2622);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RewindStmtContext ------------------------------------------------------------------

Fortran90Parser::RewindStmtContext::RewindStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::RewindStmtContext::REWIND() {
  return getToken(Fortran90Parser::REWIND, 0);
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::RewindStmtContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::RewindStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::PositionSpecListContext* Fortran90Parser::RewindStmtContext::positionSpecList() {
  return getRuleContext<Fortran90Parser::PositionSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::RewindStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::RewindStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleRewindStmt;
}

void Fortran90Parser::RewindStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRewindStmt(this);
}

void Fortran90Parser::RewindStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRewindStmt(this);
}

Fortran90Parser::RewindStmtContext* Fortran90Parser::rewindStmt() {
  RewindStmtContext *_localctx = _tracker.createInstance<RewindStmtContext>(_ctx, getState());
  enterRule(_localctx, 490, Fortran90Parser::RuleRewindStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2632);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2625);
      match(Fortran90Parser::REWIND);
      setState(2626);
      unitIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2627);
      match(Fortran90Parser::REWIND);
      setState(2628);
      match(Fortran90Parser::LPAREN);
      setState(2629);
      positionSpecList();
      setState(2630);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReadStmtContext ------------------------------------------------------------------

Fortran90Parser::ReadStmtContext::ReadStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ReadStmtContext::READ() {
  return getToken(Fortran90Parser::READ, 0);
}

Fortran90Parser::RdCtlSpecContext* Fortran90Parser::ReadStmtContext::rdCtlSpec() {
  return getRuleContext<Fortran90Parser::RdCtlSpecContext>(0);
}

Fortran90Parser::InputItemListContext* Fortran90Parser::ReadStmtContext::inputItemList() {
  return getRuleContext<Fortran90Parser::InputItemListContext>(0);
}

Fortran90Parser::RdFmtIdContext* Fortran90Parser::ReadStmtContext::rdFmtId() {
  return getRuleContext<Fortran90Parser::RdFmtIdContext>(0);
}

Fortran90Parser::CommaInputItemListContext* Fortran90Parser::ReadStmtContext::commaInputItemList() {
  return getRuleContext<Fortran90Parser::CommaInputItemListContext>(0);
}


size_t Fortran90Parser::ReadStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleReadStmt;
}

void Fortran90Parser::ReadStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReadStmt(this);
}

void Fortran90Parser::ReadStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReadStmt(this);
}

Fortran90Parser::ReadStmtContext* Fortran90Parser::readStmt() {
  ReadStmtContext *_localctx = _tracker.createInstance<ReadStmtContext>(_ctx, getState());
  enterRule(_localctx, 492, Fortran90Parser::RuleReadStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2644);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2634);
      match(Fortran90Parser::READ);
      setState(2635);
      rdCtlSpec();
      setState(2637);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
      case 1: {
        setState(2636);
        inputItemList();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2639);
      match(Fortran90Parser::READ);
      setState(2640);
      rdFmtId();
      setState(2642);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
      case 1: {
        setState(2641);
        commaInputItemList();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommaInputItemListContext ------------------------------------------------------------------

Fortran90Parser::CommaInputItemListContext::CommaInputItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CommaInputItemListContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::InputItemListContext* Fortran90Parser::CommaInputItemListContext::inputItemList() {
  return getRuleContext<Fortran90Parser::InputItemListContext>(0);
}


size_t Fortran90Parser::CommaInputItemListContext::getRuleIndex() const {
  return Fortran90Parser::RuleCommaInputItemList;
}

void Fortran90Parser::CommaInputItemListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommaInputItemList(this);
}

void Fortran90Parser::CommaInputItemListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommaInputItemList(this);
}

Fortran90Parser::CommaInputItemListContext* Fortran90Parser::commaInputItemList() {
  CommaInputItemListContext *_localctx = _tracker.createInstance<CommaInputItemListContext>(_ctx, getState());
  enterRule(_localctx, 494, Fortran90Parser::RuleCommaInputItemList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2646);
    match(Fortran90Parser::COMMA);
    setState(2647);
    inputItemList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RdFmtIdContext ------------------------------------------------------------------

Fortran90Parser::RdFmtIdContext::RdFmtIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::LblRefContext* Fortran90Parser::RdFmtIdContext::lblRef() {
  return getRuleContext<Fortran90Parser::LblRefContext>(0);
}

tree::TerminalNode* Fortran90Parser::RdFmtIdContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}

Fortran90Parser::COperandContext* Fortran90Parser::RdFmtIdContext::cOperand() {
  return getRuleContext<Fortran90Parser::COperandContext>(0);
}

std::vector<tree::TerminalNode *> Fortran90Parser::RdFmtIdContext::DIV() {
  return getTokens(Fortran90Parser::DIV);
}

tree::TerminalNode* Fortran90Parser::RdFmtIdContext::DIV(size_t i) {
  return getToken(Fortran90Parser::DIV, i);
}

tree::TerminalNode* Fortran90Parser::RdFmtIdContext::SPOFF() {
  return getToken(Fortran90Parser::SPOFF, 0);
}

tree::TerminalNode* Fortran90Parser::RdFmtIdContext::SPON() {
  return getToken(Fortran90Parser::SPON, 0);
}

Fortran90Parser::CPrimaryContext* Fortran90Parser::RdFmtIdContext::cPrimary() {
  return getRuleContext<Fortran90Parser::CPrimaryContext>(0);
}

Fortran90Parser::RdFmtIdExprContext* Fortran90Parser::RdFmtIdContext::rdFmtIdExpr() {
  return getRuleContext<Fortran90Parser::RdFmtIdExprContext>(0);
}


size_t Fortran90Parser::RdFmtIdContext::getRuleIndex() const {
  return Fortran90Parser::RuleRdFmtId;
}

void Fortran90Parser::RdFmtIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRdFmtId(this);
}

void Fortran90Parser::RdFmtIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRdFmtId(this);
}

Fortran90Parser::RdFmtIdContext* Fortran90Parser::rdFmtId() {
  RdFmtIdContext *_localctx = _tracker.createInstance<RdFmtIdContext>(_ctx, getState());
  enterRule(_localctx, 496, Fortran90Parser::RuleRdFmtId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2666);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2649);
      lblRef();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2650);
      match(Fortran90Parser::STAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2651);
      cOperand();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2652);
      cOperand();
      setState(2653);
      match(Fortran90Parser::DIV);
      setState(2654);
      match(Fortran90Parser::SPOFF);
      setState(2655);
      match(Fortran90Parser::DIV);
      setState(2656);
      match(Fortran90Parser::SPON);
      setState(2657);
      cPrimary();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2659);
      rdFmtIdExpr();
      setState(2660);
      match(Fortran90Parser::DIV);
      setState(2661);
      match(Fortran90Parser::SPOFF);
      setState(2662);
      match(Fortran90Parser::DIV);
      setState(2663);
      match(Fortran90Parser::SPON);
      setState(2664);
      cPrimary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RdFmtIdExprContext ------------------------------------------------------------------

Fortran90Parser::RdFmtIdExprContext::RdFmtIdExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::RdFmtIdExprContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::UFExprContext* Fortran90Parser::RdFmtIdExprContext::uFExpr() {
  return getRuleContext<Fortran90Parser::UFExprContext>(0);
}

tree::TerminalNode* Fortran90Parser::RdFmtIdExprContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::RdFmtIdExprContext::getRuleIndex() const {
  return Fortran90Parser::RuleRdFmtIdExpr;
}

void Fortran90Parser::RdFmtIdExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRdFmtIdExpr(this);
}

void Fortran90Parser::RdFmtIdExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRdFmtIdExpr(this);
}

Fortran90Parser::RdFmtIdExprContext* Fortran90Parser::rdFmtIdExpr() {
  RdFmtIdExprContext *_localctx = _tracker.createInstance<RdFmtIdExprContext>(_ctx, getState());
  enterRule(_localctx, 498, Fortran90Parser::RuleRdFmtIdExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2668);
    match(Fortran90Parser::LPAREN);
    setState(2669);
    uFExpr(0);
    setState(2670);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InputItemListContext ------------------------------------------------------------------

Fortran90Parser::InputItemListContext::InputItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::InputItemContext *> Fortran90Parser::InputItemListContext::inputItem() {
  return getRuleContexts<Fortran90Parser::InputItemContext>();
}

Fortran90Parser::InputItemContext* Fortran90Parser::InputItemListContext::inputItem(size_t i) {
  return getRuleContext<Fortran90Parser::InputItemContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::InputItemListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::InputItemListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::InputItemListContext::getRuleIndex() const {
  return Fortran90Parser::RuleInputItemList;
}

void Fortran90Parser::InputItemListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInputItemList(this);
}

void Fortran90Parser::InputItemListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInputItemList(this);
}

Fortran90Parser::InputItemListContext* Fortran90Parser::inputItemList() {
  InputItemListContext *_localctx = _tracker.createInstance<InputItemListContext>(_ctx, getState());
  enterRule(_localctx, 500, Fortran90Parser::RuleInputItemList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2672);
    inputItem();
    setState(2677);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2673);
        match(Fortran90Parser::COMMA);
        setState(2674);
        inputItem(); 
      }
      setState(2679);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InputItemContext ------------------------------------------------------------------

Fortran90Parser::InputItemContext::InputItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::NameDataRefContext* Fortran90Parser::InputItemContext::nameDataRef() {
  return getRuleContext<Fortran90Parser::NameDataRefContext>(0);
}

Fortran90Parser::InputImpliedDoContext* Fortran90Parser::InputItemContext::inputImpliedDo() {
  return getRuleContext<Fortran90Parser::InputImpliedDoContext>(0);
}


size_t Fortran90Parser::InputItemContext::getRuleIndex() const {
  return Fortran90Parser::RuleInputItem;
}

void Fortran90Parser::InputItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInputItem(this);
}

void Fortran90Parser::InputItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInputItem(this);
}

Fortran90Parser::InputItemContext* Fortran90Parser::inputItem() {
  InputItemContext *_localctx = _tracker.createInstance<InputItemContext>(_ctx, getState());
  enterRule(_localctx, 502, Fortran90Parser::RuleInputItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2682);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::CONTAINS:
      case Fortran90Parser::MODULE:
      case Fortran90Parser::ENDMODULE:
      case Fortran90Parser::PROGRAM:
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::BLOCK:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::ENDINTERFACE:
      case Fortran90Parser::PROCEDURE:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::IN:
      case Fortran90Parser::OUT:
      case Fortran90Parser::INOUT:
      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::USE:
      case Fortran90Parser::ONLY:
      case Fortran90Parser::ASSIGNMENT:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::ELSEWHERE:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::BLOCKDATA:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::NONE:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::THEN:
      case Fortran90Parser::ELSE:
      case Fortran90Parser::ENDIF:
      case Fortran90Parser::RESULT:
      case Fortran90Parser::ELSEIF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::ENDWHERE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::ENDSELECT:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::CASE:
      case Fortran90Parser::DEFAULT:
      case Fortran90Parser::DIRECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::REC:
      case Fortran90Parser::ENDDO:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::FMT:
      case Fortran90Parser::UNIT:
      case Fortran90Parser::PAD:
      case Fortran90Parser::ACTION:
      case Fortran90Parser::DELIM:
      case Fortran90Parser::IOLENGTH:
      case Fortran90Parser::READWRITE:
      case Fortran90Parser::ERR:
      case Fortran90Parser::SIZE:
      case Fortran90Parser::ADVANCE:
      case Fortran90Parser::NML:
      case Fortran90Parser::IOSTAT:
      case Fortran90Parser::FORMAT:
      case Fortran90Parser::LET:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::IOSTART:
      case Fortran90Parser::SEQUENTIAL:
      case Fortran90Parser::LABEL:
      case Fortran90Parser::FILE:
      case Fortran90Parser::STATUS:
      case Fortran90Parser::ACCESS:
      case Fortran90Parser::POSITION:
      case Fortran90Parser::FORM:
      case Fortran90Parser::RECL:
      case Fortran90Parser::EXIST:
      case Fortran90Parser::OPENED:
      case Fortran90Parser::NUMBER:
      case Fortran90Parser::NAMED:
      case Fortran90Parser::NAME_:
      case Fortran90Parser::FORMATTED:
      case Fortran90Parser::UNFORMATTED:
      case Fortran90Parser::NEXTREC:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ENDBLOCKDATA:
      case Fortran90Parser::ENDBLOCK:
      case Fortran90Parser::KIND:
      case Fortran90Parser::LEN:
      case Fortran90Parser::WHILE:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::STAT:
      case Fortran90Parser::CCON:
      case Fortran90Parser::HOLLERITH:
      case Fortran90Parser::CONCATOP:
      case Fortran90Parser::CTRLDIRECT:
      case Fortran90Parser::CTRLREC:
      case Fortran90Parser::TO:
      case Fortran90Parser::SUBPROGRAMBLOCK:
      case Fortran90Parser::DOBLOCK:
      case Fortran90Parser::AIF:
      case Fortran90Parser::THENBLOCK:
      case Fortran90Parser::ELSEBLOCK:
      case Fortran90Parser::CODEROOT:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::PRECISION:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ENDTYPE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::SPOFF:
      case Fortran90Parser::SPON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2680);
        nameDataRef();
        break;
      }

      case Fortran90Parser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(2681);
        inputImpliedDo();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InputImpliedDoContext ------------------------------------------------------------------

Fortran90Parser::InputImpliedDoContext::InputImpliedDoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::InputImpliedDoContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::InputItemListContext* Fortran90Parser::InputImpliedDoContext::inputItemList() {
  return getRuleContext<Fortran90Parser::InputItemListContext>(0);
}

std::vector<tree::TerminalNode *> Fortran90Parser::InputImpliedDoContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::InputImpliedDoContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}

Fortran90Parser::ImpliedDoVariableContext* Fortran90Parser::InputImpliedDoContext::impliedDoVariable() {
  return getRuleContext<Fortran90Parser::ImpliedDoVariableContext>(0);
}

tree::TerminalNode* Fortran90Parser::InputImpliedDoContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

std::vector<Fortran90Parser::ExpressionContext *> Fortran90Parser::InputImpliedDoContext::expression() {
  return getRuleContexts<Fortran90Parser::ExpressionContext>();
}

Fortran90Parser::ExpressionContext* Fortran90Parser::InputImpliedDoContext::expression(size_t i) {
  return getRuleContext<Fortran90Parser::ExpressionContext>(i);
}

tree::TerminalNode* Fortran90Parser::InputImpliedDoContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::CommaExprContext* Fortran90Parser::InputImpliedDoContext::commaExpr() {
  return getRuleContext<Fortran90Parser::CommaExprContext>(0);
}


size_t Fortran90Parser::InputImpliedDoContext::getRuleIndex() const {
  return Fortran90Parser::RuleInputImpliedDo;
}

void Fortran90Parser::InputImpliedDoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInputImpliedDo(this);
}

void Fortran90Parser::InputImpliedDoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInputImpliedDo(this);
}

Fortran90Parser::InputImpliedDoContext* Fortran90Parser::inputImpliedDo() {
  InputImpliedDoContext *_localctx = _tracker.createInstance<InputImpliedDoContext>(_ctx, getState());
  enterRule(_localctx, 504, Fortran90Parser::RuleInputImpliedDo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2684);
    match(Fortran90Parser::LPAREN);
    setState(2685);
    inputItemList();
    setState(2686);
    match(Fortran90Parser::COMMA);
    setState(2687);
    impliedDoVariable();
    setState(2688);
    match(Fortran90Parser::ASSIGN);
    setState(2689);
    expression(0);
    setState(2690);
    match(Fortran90Parser::COMMA);
    setState(2691);
    expression(0);
    setState(2693);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::COMMA) {
      setState(2692);
      commaExpr();
    }
    setState(2695);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RdCtlSpecContext ------------------------------------------------------------------

Fortran90Parser::RdCtlSpecContext::RdCtlSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::RdUnitIdContext* Fortran90Parser::RdCtlSpecContext::rdUnitId() {
  return getRuleContext<Fortran90Parser::RdUnitIdContext>(0);
}

tree::TerminalNode* Fortran90Parser::RdCtlSpecContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::RdIoCtlSpecListContext* Fortran90Parser::RdCtlSpecContext::rdIoCtlSpecList() {
  return getRuleContext<Fortran90Parser::RdIoCtlSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::RdCtlSpecContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::RdCtlSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleRdCtlSpec;
}

void Fortran90Parser::RdCtlSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRdCtlSpec(this);
}

void Fortran90Parser::RdCtlSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRdCtlSpec(this);
}

Fortran90Parser::RdCtlSpecContext* Fortran90Parser::rdCtlSpec() {
  RdCtlSpecContext *_localctx = _tracker.createInstance<RdCtlSpecContext>(_ctx, getState());
  enterRule(_localctx, 506, Fortran90Parser::RuleRdCtlSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2702);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2697);
      rdUnitId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2698);
      match(Fortran90Parser::LPAREN);
      setState(2699);
      rdIoCtlSpecList(0);
      setState(2700);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RdUnitIdContext ------------------------------------------------------------------

Fortran90Parser::RdUnitIdContext::RdUnitIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::RdUnitIdContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::UFExprContext* Fortran90Parser::RdUnitIdContext::uFExpr() {
  return getRuleContext<Fortran90Parser::UFExprContext>(0);
}

tree::TerminalNode* Fortran90Parser::RdUnitIdContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::RdUnitIdContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}


size_t Fortran90Parser::RdUnitIdContext::getRuleIndex() const {
  return Fortran90Parser::RuleRdUnitId;
}

void Fortran90Parser::RdUnitIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRdUnitId(this);
}

void Fortran90Parser::RdUnitIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRdUnitId(this);
}

Fortran90Parser::RdUnitIdContext* Fortran90Parser::rdUnitId() {
  RdUnitIdContext *_localctx = _tracker.createInstance<RdUnitIdContext>(_ctx, getState());
  enterRule(_localctx, 508, Fortran90Parser::RuleRdUnitId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2711);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2704);
      match(Fortran90Parser::LPAREN);
      setState(2705);
      uFExpr(0);
      setState(2706);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2708);
      match(Fortran90Parser::LPAREN);
      setState(2709);
      match(Fortran90Parser::STAR);
      setState(2710);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RdIoCtlSpecListContext ------------------------------------------------------------------

Fortran90Parser::RdIoCtlSpecListContext::RdIoCtlSpecListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::RdIoCtlSpecListContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::RdIoCtlSpecListContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::IoControlSpecContext* Fortran90Parser::RdIoCtlSpecListContext::ioControlSpec() {
  return getRuleContext<Fortran90Parser::IoControlSpecContext>(0);
}

Fortran90Parser::FormatIdentifierContext* Fortran90Parser::RdIoCtlSpecListContext::formatIdentifier() {
  return getRuleContext<Fortran90Parser::FormatIdentifierContext>(0);
}

Fortran90Parser::RdIoCtlSpecListContext* Fortran90Parser::RdIoCtlSpecListContext::rdIoCtlSpecList() {
  return getRuleContext<Fortran90Parser::RdIoCtlSpecListContext>(0);
}


size_t Fortran90Parser::RdIoCtlSpecListContext::getRuleIndex() const {
  return Fortran90Parser::RuleRdIoCtlSpecList;
}

void Fortran90Parser::RdIoCtlSpecListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRdIoCtlSpecList(this);
}

void Fortran90Parser::RdIoCtlSpecListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRdIoCtlSpecList(this);
}


Fortran90Parser::RdIoCtlSpecListContext* Fortran90Parser::rdIoCtlSpecList() {
   return rdIoCtlSpecList(0);
}

Fortran90Parser::RdIoCtlSpecListContext* Fortran90Parser::rdIoCtlSpecList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::RdIoCtlSpecListContext *_localctx = _tracker.createInstance<RdIoCtlSpecListContext>(_ctx, parentState);
  Fortran90Parser::RdIoCtlSpecListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 510;
  enterRecursionRule(_localctx, 510, Fortran90Parser::RuleRdIoCtlSpecList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2723);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
    case 1: {
      setState(2714);
      unitIdentifier();
      setState(2715);
      match(Fortran90Parser::COMMA);
      setState(2716);
      ioControlSpec();
      break;
    }

    case 2: {
      setState(2718);
      unitIdentifier();
      setState(2719);
      match(Fortran90Parser::COMMA);
      setState(2720);
      formatIdentifier();
      break;
    }

    case 3: {
      setState(2722);
      ioControlSpec();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2730);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<RdIoCtlSpecListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleRdIoCtlSpecList);
        setState(2725);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2726);
        match(Fortran90Parser::COMMA);
        setState(2727);
        ioControlSpec(); 
      }
      setState(2732);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- IoControlSpecContext ------------------------------------------------------------------

Fortran90Parser::IoControlSpecContext::IoControlSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::IoControlSpecContext::FMT() {
  return getToken(Fortran90Parser::FMT, 0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::FormatIdentifierContext* Fortran90Parser::IoControlSpecContext::formatIdentifier() {
  return getRuleContext<Fortran90Parser::FormatIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecContext::UNIT() {
  return getToken(Fortran90Parser::UNIT, 0);
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::IoControlSpecContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecContext::REC() {
  return getToken(Fortran90Parser::REC, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::IoControlSpecContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

Fortran90Parser::LblRefContext* Fortran90Parser::IoControlSpecContext::lblRef() {
  return getRuleContext<Fortran90Parser::LblRefContext>(0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecContext::ERR() {
  return getToken(Fortran90Parser::ERR, 0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecContext::IOSTAT() {
  return getToken(Fortran90Parser::IOSTAT, 0);
}

Fortran90Parser::ScalarVariableContext* Fortran90Parser::IoControlSpecContext::scalarVariable() {
  return getRuleContext<Fortran90Parser::ScalarVariableContext>(0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecContext::NML() {
  return getToken(Fortran90Parser::NML, 0);
}

Fortran90Parser::NamelistGroupNameContext* Fortran90Parser::IoControlSpecContext::namelistGroupName() {
  return getRuleContext<Fortran90Parser::NamelistGroupNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecContext::ADVANCE() {
  return getToken(Fortran90Parser::ADVANCE, 0);
}

Fortran90Parser::CExpressionContext* Fortran90Parser::IoControlSpecContext::cExpression() {
  return getRuleContext<Fortran90Parser::CExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecContext::SIZE() {
  return getToken(Fortran90Parser::SIZE, 0);
}

Fortran90Parser::VariableContext* Fortran90Parser::IoControlSpecContext::variable() {
  return getRuleContext<Fortran90Parser::VariableContext>(0);
}

tree::TerminalNode* Fortran90Parser::IoControlSpecContext::EOR() {
  return getToken(Fortran90Parser::EOR, 0);
}


size_t Fortran90Parser::IoControlSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleIoControlSpec;
}

void Fortran90Parser::IoControlSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIoControlSpec(this);
}

void Fortran90Parser::IoControlSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIoControlSpec(this);
}

Fortran90Parser::IoControlSpecContext* Fortran90Parser::ioControlSpec() {
  IoControlSpecContext *_localctx = _tracker.createInstance<IoControlSpecContext>(_ctx, getState());
  enterRule(_localctx, 512, Fortran90Parser::RuleIoControlSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2763);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::FMT: {
        enterOuterAlt(_localctx, 1);
        setState(2733);
        match(Fortran90Parser::FMT);
        setState(2734);
        match(Fortran90Parser::ASSIGN);
        setState(2735);
        formatIdentifier();
        break;
      }

      case Fortran90Parser::UNIT: {
        enterOuterAlt(_localctx, 2);
        setState(2736);
        match(Fortran90Parser::UNIT);
        setState(2737);
        match(Fortran90Parser::ASSIGN);
        setState(2738);
        unitIdentifier();
        break;
      }

      case Fortran90Parser::REC: {
        enterOuterAlt(_localctx, 3);
        setState(2739);
        match(Fortran90Parser::REC);
        setState(2740);
        match(Fortran90Parser::ASSIGN);
        setState(2741);
        expression(0);
        break;
      }

      case Fortran90Parser::END: {
        enterOuterAlt(_localctx, 4);
        setState(2742);
        match(Fortran90Parser::END);
        setState(2743);
        match(Fortran90Parser::ASSIGN);
        setState(2744);
        lblRef();
        break;
      }

      case Fortran90Parser::ERR: {
        enterOuterAlt(_localctx, 5);
        setState(2745);
        match(Fortran90Parser::ERR);
        setState(2746);
        match(Fortran90Parser::ASSIGN);
        setState(2747);
        lblRef();
        break;
      }

      case Fortran90Parser::IOSTAT: {
        enterOuterAlt(_localctx, 6);
        setState(2748);
        match(Fortran90Parser::IOSTAT);
        setState(2749);
        match(Fortran90Parser::ASSIGN);
        setState(2750);
        scalarVariable();
        break;
      }

      case Fortran90Parser::NML: {
        enterOuterAlt(_localctx, 7);
        setState(2751);
        match(Fortran90Parser::NML);
        setState(2752);
        match(Fortran90Parser::ASSIGN);
        setState(2753);
        namelistGroupName();
        break;
      }

      case Fortran90Parser::ADVANCE: {
        enterOuterAlt(_localctx, 8);
        setState(2754);
        match(Fortran90Parser::ADVANCE);
        setState(2755);
        match(Fortran90Parser::ASSIGN);
        setState(2756);
        cExpression();
        break;
      }

      case Fortran90Parser::SIZE: {
        enterOuterAlt(_localctx, 9);
        setState(2757);
        match(Fortran90Parser::SIZE);
        setState(2758);
        match(Fortran90Parser::ASSIGN);
        setState(2759);
        variable();
        break;
      }

      case Fortran90Parser::EOR: {
        enterOuterAlt(_localctx, 10);
        setState(2760);
        match(Fortran90Parser::EOR);
        setState(2761);
        match(Fortran90Parser::ASSIGN);
        setState(2762);
        lblRef();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrintStmtContext ------------------------------------------------------------------

Fortran90Parser::PrintStmtContext::PrintStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::PrintStmtContext::PRINT() {
  return getToken(Fortran90Parser::PRINT, 0);
}

Fortran90Parser::FormatIdentifierContext* Fortran90Parser::PrintStmtContext::formatIdentifier() {
  return getRuleContext<Fortran90Parser::FormatIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::PrintStmtContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::OutputItemListContext* Fortran90Parser::PrintStmtContext::outputItemList() {
  return getRuleContext<Fortran90Parser::OutputItemListContext>(0);
}


size_t Fortran90Parser::PrintStmtContext::getRuleIndex() const {
  return Fortran90Parser::RulePrintStmt;
}

void Fortran90Parser::PrintStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrintStmt(this);
}

void Fortran90Parser::PrintStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrintStmt(this);
}

Fortran90Parser::PrintStmtContext* Fortran90Parser::printStmt() {
  PrintStmtContext *_localctx = _tracker.createInstance<PrintStmtContext>(_ctx, getState());
  enterRule(_localctx, 514, Fortran90Parser::RulePrintStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2772);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2765);
      match(Fortran90Parser::PRINT);
      setState(2766);
      formatIdentifier();
      setState(2767);
      match(Fortran90Parser::COMMA);
      setState(2768);
      outputItemList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2770);
      match(Fortran90Parser::PRINT);
      setState(2771);
      formatIdentifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OutputItemListContext ------------------------------------------------------------------

Fortran90Parser::OutputItemListContext::OutputItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExpressionContext* Fortran90Parser::OutputItemListContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

Fortran90Parser::OutputItemList1Context* Fortran90Parser::OutputItemListContext::outputItemList1() {
  return getRuleContext<Fortran90Parser::OutputItemList1Context>(0);
}


size_t Fortran90Parser::OutputItemListContext::getRuleIndex() const {
  return Fortran90Parser::RuleOutputItemList;
}

void Fortran90Parser::OutputItemListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOutputItemList(this);
}

void Fortran90Parser::OutputItemListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOutputItemList(this);
}

Fortran90Parser::OutputItemListContext* Fortran90Parser::outputItemList() {
  OutputItemListContext *_localctx = _tracker.createInstance<OutputItemListContext>(_ctx, getState());
  enterRule(_localctx, 516, Fortran90Parser::RuleOutputItemList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2776);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2774);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2775);
      outputItemList1(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OutputItemList1Context ------------------------------------------------------------------

Fortran90Parser::OutputItemList1Context::OutputItemList1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ExpressionContext *> Fortran90Parser::OutputItemList1Context::expression() {
  return getRuleContexts<Fortran90Parser::ExpressionContext>();
}

Fortran90Parser::ExpressionContext* Fortran90Parser::OutputItemList1Context::expression(size_t i) {
  return getRuleContext<Fortran90Parser::ExpressionContext>(i);
}

tree::TerminalNode* Fortran90Parser::OutputItemList1Context::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::OutputImpliedDoContext* Fortran90Parser::OutputItemList1Context::outputImpliedDo() {
  return getRuleContext<Fortran90Parser::OutputImpliedDoContext>(0);
}

Fortran90Parser::OutputItemList1Context* Fortran90Parser::OutputItemList1Context::outputItemList1() {
  return getRuleContext<Fortran90Parser::OutputItemList1Context>(0);
}


size_t Fortran90Parser::OutputItemList1Context::getRuleIndex() const {
  return Fortran90Parser::RuleOutputItemList1;
}

void Fortran90Parser::OutputItemList1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOutputItemList1(this);
}

void Fortran90Parser::OutputItemList1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOutputItemList1(this);
}


Fortran90Parser::OutputItemList1Context* Fortran90Parser::outputItemList1() {
   return outputItemList1(0);
}

Fortran90Parser::OutputItemList1Context* Fortran90Parser::outputItemList1(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::OutputItemList1Context *_localctx = _tracker.createInstance<OutputItemList1Context>(_ctx, parentState);
  Fortran90Parser::OutputItemList1Context *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 518;
  enterRecursionRule(_localctx, 518, Fortran90Parser::RuleOutputItemList1, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2788);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx)) {
    case 1: {
      setState(2779);
      expression(0);
      setState(2780);
      match(Fortran90Parser::COMMA);
      setState(2781);
      expression(0);
      break;
    }

    case 2: {
      setState(2783);
      expression(0);
      setState(2784);
      match(Fortran90Parser::COMMA);
      setState(2785);
      outputImpliedDo();
      break;
    }

    case 3: {
      setState(2787);
      outputImpliedDo();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2798);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2796);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<OutputItemList1Context>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleOutputItemList1);
          setState(2790);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2791);
          match(Fortran90Parser::COMMA);
          setState(2792);
          expression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<OutputItemList1Context>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleOutputItemList1);
          setState(2793);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2794);
          match(Fortran90Parser::COMMA);
          setState(2795);
          outputImpliedDo();
          break;
        }

        default:
          break;
        } 
      }
      setState(2800);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- OutputImpliedDoContext ------------------------------------------------------------------

Fortran90Parser::OutputImpliedDoContext::OutputImpliedDoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::OutputImpliedDoContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

std::vector<Fortran90Parser::ExpressionContext *> Fortran90Parser::OutputImpliedDoContext::expression() {
  return getRuleContexts<Fortran90Parser::ExpressionContext>();
}

Fortran90Parser::ExpressionContext* Fortran90Parser::OutputImpliedDoContext::expression(size_t i) {
  return getRuleContext<Fortran90Parser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::OutputImpliedDoContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::OutputImpliedDoContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}

Fortran90Parser::ImpliedDoVariableContext* Fortran90Parser::OutputImpliedDoContext::impliedDoVariable() {
  return getRuleContext<Fortran90Parser::ImpliedDoVariableContext>(0);
}

tree::TerminalNode* Fortran90Parser::OutputImpliedDoContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

tree::TerminalNode* Fortran90Parser::OutputImpliedDoContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::CommaExprContext* Fortran90Parser::OutputImpliedDoContext::commaExpr() {
  return getRuleContext<Fortran90Parser::CommaExprContext>(0);
}

Fortran90Parser::OutputItemList1Context* Fortran90Parser::OutputImpliedDoContext::outputItemList1() {
  return getRuleContext<Fortran90Parser::OutputItemList1Context>(0);
}


size_t Fortran90Parser::OutputImpliedDoContext::getRuleIndex() const {
  return Fortran90Parser::RuleOutputImpliedDo;
}

void Fortran90Parser::OutputImpliedDoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOutputImpliedDo(this);
}

void Fortran90Parser::OutputImpliedDoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOutputImpliedDo(this);
}

Fortran90Parser::OutputImpliedDoContext* Fortran90Parser::outputImpliedDo() {
  OutputImpliedDoContext *_localctx = _tracker.createInstance<OutputImpliedDoContext>(_ctx, getState());
  enterRule(_localctx, 520, Fortran90Parser::RuleOutputImpliedDo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2827);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2801);
      match(Fortran90Parser::LPAREN);
      setState(2802);
      expression(0);
      setState(2803);
      match(Fortran90Parser::COMMA);
      setState(2804);
      impliedDoVariable();
      setState(2805);
      match(Fortran90Parser::ASSIGN);
      setState(2806);
      expression(0);
      setState(2807);
      match(Fortran90Parser::COMMA);
      setState(2808);
      expression(0);
      setState(2810);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::COMMA) {
        setState(2809);
        commaExpr();
      }
      setState(2812);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2814);
      match(Fortran90Parser::LPAREN);
      setState(2815);
      outputItemList1(0);
      setState(2816);
      match(Fortran90Parser::COMMA);
      setState(2817);
      impliedDoVariable();
      setState(2818);
      match(Fortran90Parser::ASSIGN);
      setState(2819);
      expression(0);
      setState(2820);
      match(Fortran90Parser::COMMA);
      setState(2821);
      expression(0);
      setState(2823);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::COMMA) {
        setState(2822);
        commaExpr();
      }
      setState(2825);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormatIdentifierContext ------------------------------------------------------------------

Fortran90Parser::FormatIdentifierContext::FormatIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::LblRefContext* Fortran90Parser::FormatIdentifierContext::lblRef() {
  return getRuleContext<Fortran90Parser::LblRefContext>(0);
}

Fortran90Parser::CExpressionContext* Fortran90Parser::FormatIdentifierContext::cExpression() {
  return getRuleContext<Fortran90Parser::CExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::FormatIdentifierContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}


size_t Fortran90Parser::FormatIdentifierContext::getRuleIndex() const {
  return Fortran90Parser::RuleFormatIdentifier;
}

void Fortran90Parser::FormatIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormatIdentifier(this);
}

void Fortran90Parser::FormatIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormatIdentifier(this);
}

Fortran90Parser::FormatIdentifierContext* Fortran90Parser::formatIdentifier() {
  FormatIdentifierContext *_localctx = _tracker.createInstance<FormatIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 522, Fortran90Parser::RuleFormatIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2832);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::ICON: {
        enterOuterAlt(_localctx, 1);
        setState(2829);
        lblRef();
        break;
      }

      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::CONTAINS:
      case Fortran90Parser::MODULE:
      case Fortran90Parser::ENDMODULE:
      case Fortran90Parser::PROGRAM:
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::BLOCK:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::ENDINTERFACE:
      case Fortran90Parser::PROCEDURE:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::IN:
      case Fortran90Parser::OUT:
      case Fortran90Parser::INOUT:
      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::USE:
      case Fortran90Parser::ONLY:
      case Fortran90Parser::ASSIGNMENT:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::ELSEWHERE:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::BLOCKDATA:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::NONE:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::THEN:
      case Fortran90Parser::ELSE:
      case Fortran90Parser::ENDIF:
      case Fortran90Parser::RESULT:
      case Fortran90Parser::ELSEIF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::ENDWHERE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::ENDSELECT:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::CASE:
      case Fortran90Parser::DEFAULT:
      case Fortran90Parser::DIRECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::REC:
      case Fortran90Parser::ENDDO:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::FMT:
      case Fortran90Parser::UNIT:
      case Fortran90Parser::PAD:
      case Fortran90Parser::ACTION:
      case Fortran90Parser::DELIM:
      case Fortran90Parser::IOLENGTH:
      case Fortran90Parser::READWRITE:
      case Fortran90Parser::ERR:
      case Fortran90Parser::SIZE:
      case Fortran90Parser::ADVANCE:
      case Fortran90Parser::NML:
      case Fortran90Parser::IOSTAT:
      case Fortran90Parser::FORMAT:
      case Fortran90Parser::LET:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::IOSTART:
      case Fortran90Parser::SEQUENTIAL:
      case Fortran90Parser::LABEL:
      case Fortran90Parser::FILE:
      case Fortran90Parser::STATUS:
      case Fortran90Parser::ACCESS:
      case Fortran90Parser::POSITION:
      case Fortran90Parser::FORM:
      case Fortran90Parser::RECL:
      case Fortran90Parser::EXIST:
      case Fortran90Parser::OPENED:
      case Fortran90Parser::NUMBER:
      case Fortran90Parser::NAMED:
      case Fortran90Parser::NAME_:
      case Fortran90Parser::FORMATTED:
      case Fortran90Parser::UNFORMATTED:
      case Fortran90Parser::NEXTREC:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ENDBLOCKDATA:
      case Fortran90Parser::ENDBLOCK:
      case Fortran90Parser::KIND:
      case Fortran90Parser::LEN:
      case Fortran90Parser::LPAREN:
      case Fortran90Parser::WHILE:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::STAT:
      case Fortran90Parser::CCON:
      case Fortran90Parser::HOLLERITH:
      case Fortran90Parser::CONCATOP:
      case Fortran90Parser::CTRLDIRECT:
      case Fortran90Parser::CTRLREC:
      case Fortran90Parser::TO:
      case Fortran90Parser::SUBPROGRAMBLOCK:
      case Fortran90Parser::DOBLOCK:
      case Fortran90Parser::AIF:
      case Fortran90Parser::THENBLOCK:
      case Fortran90Parser::ELSEBLOCK:
      case Fortran90Parser::CODEROOT:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::PRECISION:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::SCON:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ENDTYPE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::SPOFF:
      case Fortran90Parser::SPON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 2);
        setState(2830);
        cExpression();
        break;
      }

      case Fortran90Parser::STAR: {
        enterOuterAlt(_localctx, 3);
        setState(2831);
        match(Fortran90Parser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PauseStmtContext ------------------------------------------------------------------

Fortran90Parser::PauseStmtContext::PauseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::PauseStmtContext::PAUSE() {
  return getToken(Fortran90Parser::PAUSE, 0);
}

tree::TerminalNode* Fortran90Parser::PauseStmtContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}

tree::TerminalNode* Fortran90Parser::PauseStmtContext::SCON() {
  return getToken(Fortran90Parser::SCON, 0);
}


size_t Fortran90Parser::PauseStmtContext::getRuleIndex() const {
  return Fortran90Parser::RulePauseStmt;
}

void Fortran90Parser::PauseStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPauseStmt(this);
}

void Fortran90Parser::PauseStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPauseStmt(this);
}

Fortran90Parser::PauseStmtContext* Fortran90Parser::pauseStmt() {
  PauseStmtContext *_localctx = _tracker.createInstance<PauseStmtContext>(_ctx, getState());
  enterRule(_localctx, 524, Fortran90Parser::RulePauseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2834);
    match(Fortran90Parser::PAUSE);
    setState(2836);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
    case 1: {
      setState(2835);
      _la = _input->LA(1);
      if (!(_la == Fortran90Parser::SCON

      || _la == Fortran90Parser::ICON)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenStmtContext ------------------------------------------------------------------

Fortran90Parser::OpenStmtContext::OpenStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::OpenStmtContext::OPEN() {
  return getToken(Fortran90Parser::OPEN, 0);
}

tree::TerminalNode* Fortran90Parser::OpenStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ConnectSpecListContext* Fortran90Parser::OpenStmtContext::connectSpecList() {
  return getRuleContext<Fortran90Parser::ConnectSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::OpenStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::OpenStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleOpenStmt;
}

void Fortran90Parser::OpenStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpenStmt(this);
}

void Fortran90Parser::OpenStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpenStmt(this);
}

Fortran90Parser::OpenStmtContext* Fortran90Parser::openStmt() {
  OpenStmtContext *_localctx = _tracker.createInstance<OpenStmtContext>(_ctx, getState());
  enterRule(_localctx, 526, Fortran90Parser::RuleOpenStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2838);
    match(Fortran90Parser::OPEN);
    setState(2839);
    match(Fortran90Parser::LPAREN);
    setState(2840);
    connectSpecList();
    setState(2841);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConnectSpecListContext ------------------------------------------------------------------

Fortran90Parser::ConnectSpecListContext::ConnectSpecListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UnitIdentifierCommaContext* Fortran90Parser::ConnectSpecListContext::unitIdentifierComma() {
  return getRuleContext<Fortran90Parser::UnitIdentifierCommaContext>(0);
}

std::vector<Fortran90Parser::ConnectSpecContext *> Fortran90Parser::ConnectSpecListContext::connectSpec() {
  return getRuleContexts<Fortran90Parser::ConnectSpecContext>();
}

Fortran90Parser::ConnectSpecContext* Fortran90Parser::ConnectSpecListContext::connectSpec(size_t i) {
  return getRuleContext<Fortran90Parser::ConnectSpecContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::ConnectSpecListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::ConnectSpecListContext::getRuleIndex() const {
  return Fortran90Parser::RuleConnectSpecList;
}

void Fortran90Parser::ConnectSpecListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnectSpecList(this);
}

void Fortran90Parser::ConnectSpecListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnectSpecList(this);
}

Fortran90Parser::ConnectSpecListContext* Fortran90Parser::connectSpecList() {
  ConnectSpecListContext *_localctx = _tracker.createInstance<ConnectSpecListContext>(_ctx, getState());
  enterRule(_localctx, 528, Fortran90Parser::RuleConnectSpecList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2844);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx)) {
    case 1: {
      setState(2843);
      unitIdentifierComma();
      break;
    }

    default:
      break;
    }
    setState(2847);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & 66061391) != 0) || _la == Fortran90Parser::BLANK) {
      setState(2846);
      connectSpec();
    }
    setState(2853);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(2849);
      match(Fortran90Parser::COMMA);
      setState(2850);
      connectSpec();
      setState(2855);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConnectSpecContext ------------------------------------------------------------------

Fortran90Parser::ConnectSpecContext::ConnectSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::UNIT() {
  return getToken(Fortran90Parser::UNIT, 0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::ConnectSpecContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::ERR() {
  return getToken(Fortran90Parser::ERR, 0);
}

Fortran90Parser::LblRefContext* Fortran90Parser::ConnectSpecContext::lblRef() {
  return getRuleContext<Fortran90Parser::LblRefContext>(0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::FILE() {
  return getToken(Fortran90Parser::FILE, 0);
}

Fortran90Parser::CExpressionContext* Fortran90Parser::ConnectSpecContext::cExpression() {
  return getRuleContext<Fortran90Parser::CExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::STATUS() {
  return getToken(Fortran90Parser::STATUS, 0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::ACCESS() {
  return getToken(Fortran90Parser::ACCESS, 0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::FORM() {
  return getToken(Fortran90Parser::FORM, 0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::RECL() {
  return getToken(Fortran90Parser::RECL, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::ConnectSpecContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::BLANK() {
  return getToken(Fortran90Parser::BLANK, 0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::IOSTAT() {
  return getToken(Fortran90Parser::IOSTAT, 0);
}

Fortran90Parser::ScalarVariableContext* Fortran90Parser::ConnectSpecContext::scalarVariable() {
  return getRuleContext<Fortran90Parser::ScalarVariableContext>(0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::POSITION() {
  return getToken(Fortran90Parser::POSITION, 0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::ACTION() {
  return getToken(Fortran90Parser::ACTION, 0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::DELIM() {
  return getToken(Fortran90Parser::DELIM, 0);
}

tree::TerminalNode* Fortran90Parser::ConnectSpecContext::PAD() {
  return getToken(Fortran90Parser::PAD, 0);
}


size_t Fortran90Parser::ConnectSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleConnectSpec;
}

void Fortran90Parser::ConnectSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnectSpec(this);
}

void Fortran90Parser::ConnectSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnectSpec(this);
}

Fortran90Parser::ConnectSpecContext* Fortran90Parser::connectSpec() {
  ConnectSpecContext *_localctx = _tracker.createInstance<ConnectSpecContext>(_ctx, getState());
  enterRule(_localctx, 530, Fortran90Parser::RuleConnectSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2895);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::UNIT: {
        enterOuterAlt(_localctx, 1);
        setState(2856);
        match(Fortran90Parser::UNIT);
        setState(2857);
        match(Fortran90Parser::ASSIGN);
        setState(2858);
        unitIdentifier();
        break;
      }

      case Fortran90Parser::ERR: {
        enterOuterAlt(_localctx, 2);
        setState(2859);
        match(Fortran90Parser::ERR);
        setState(2860);
        match(Fortran90Parser::ASSIGN);
        setState(2861);
        lblRef();
        break;
      }

      case Fortran90Parser::FILE: {
        enterOuterAlt(_localctx, 3);
        setState(2862);
        match(Fortran90Parser::FILE);
        setState(2863);
        match(Fortran90Parser::ASSIGN);
        setState(2864);
        cExpression();
        break;
      }

      case Fortran90Parser::STATUS: {
        enterOuterAlt(_localctx, 4);
        setState(2865);
        match(Fortran90Parser::STATUS);
        setState(2866);
        match(Fortran90Parser::ASSIGN);
        setState(2867);
        cExpression();
        break;
      }

      case Fortran90Parser::ACCESS: {
        enterOuterAlt(_localctx, 5);
        setState(2868);
        match(Fortran90Parser::ACCESS);
        setState(2869);
        match(Fortran90Parser::ASSIGN);
        setState(2870);
        cExpression();
        break;
      }

      case Fortran90Parser::FORM: {
        enterOuterAlt(_localctx, 6);
        setState(2871);
        match(Fortran90Parser::FORM);
        setState(2872);
        match(Fortran90Parser::ASSIGN);
        setState(2873);
        cExpression();
        break;
      }

      case Fortran90Parser::RECL: {
        enterOuterAlt(_localctx, 7);
        setState(2874);
        match(Fortran90Parser::RECL);
        setState(2875);
        match(Fortran90Parser::ASSIGN);
        setState(2876);
        expression(0);
        break;
      }

      case Fortran90Parser::BLANK: {
        enterOuterAlt(_localctx, 8);
        setState(2877);
        match(Fortran90Parser::BLANK);
        setState(2878);
        match(Fortran90Parser::ASSIGN);
        setState(2879);
        cExpression();
        break;
      }

      case Fortran90Parser::IOSTAT: {
        enterOuterAlt(_localctx, 9);
        setState(2880);
        match(Fortran90Parser::IOSTAT);
        setState(2881);
        match(Fortran90Parser::ASSIGN);
        setState(2882);
        scalarVariable();
        break;
      }

      case Fortran90Parser::POSITION: {
        enterOuterAlt(_localctx, 10);
        setState(2883);
        match(Fortran90Parser::POSITION);
        setState(2884);
        match(Fortran90Parser::ASSIGN);
        setState(2885);
        cExpression();
        break;
      }

      case Fortran90Parser::ACTION: {
        enterOuterAlt(_localctx, 11);
        setState(2886);
        match(Fortran90Parser::ACTION);
        setState(2887);
        match(Fortran90Parser::ASSIGN);
        setState(2888);
        cExpression();
        break;
      }

      case Fortran90Parser::DELIM: {
        enterOuterAlt(_localctx, 12);
        setState(2889);
        match(Fortran90Parser::DELIM);
        setState(2890);
        match(Fortran90Parser::ASSIGN);
        setState(2891);
        cExpression();
        break;
      }

      case Fortran90Parser::PAD: {
        enterOuterAlt(_localctx, 13);
        setState(2892);
        match(Fortran90Parser::PAD);
        setState(2893);
        match(Fortran90Parser::ASSIGN);
        setState(2894);
        cExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InquireStmtContext ------------------------------------------------------------------

Fortran90Parser::InquireStmtContext::InquireStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::InquireStmtContext::INQUIRE() {
  return getToken(Fortran90Parser::INQUIRE, 0);
}

tree::TerminalNode* Fortran90Parser::InquireStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::InquireSpecListContext* Fortran90Parser::InquireStmtContext::inquireSpecList() {
  return getRuleContext<Fortran90Parser::InquireSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::InquireStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::InquireStmtContext::IOLENGTH() {
  return getToken(Fortran90Parser::IOLENGTH, 0);
}

tree::TerminalNode* Fortran90Parser::InquireStmtContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::ScalarVariableContext* Fortran90Parser::InquireStmtContext::scalarVariable() {
  return getRuleContext<Fortran90Parser::ScalarVariableContext>(0);
}

Fortran90Parser::OutputItemListContext* Fortran90Parser::InquireStmtContext::outputItemList() {
  return getRuleContext<Fortran90Parser::OutputItemListContext>(0);
}


size_t Fortran90Parser::InquireStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleInquireStmt;
}

void Fortran90Parser::InquireStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInquireStmt(this);
}

void Fortran90Parser::InquireStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInquireStmt(this);
}

Fortran90Parser::InquireStmtContext* Fortran90Parser::inquireStmt() {
  InquireStmtContext *_localctx = _tracker.createInstance<InquireStmtContext>(_ctx, getState());
  enterRule(_localctx, 532, Fortran90Parser::RuleInquireStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2910);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2897);
      match(Fortran90Parser::INQUIRE);
      setState(2898);
      match(Fortran90Parser::LPAREN);
      setState(2899);
      inquireSpecList();
      setState(2900);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2902);
      match(Fortran90Parser::INQUIRE);
      setState(2903);
      match(Fortran90Parser::LPAREN);
      setState(2904);
      match(Fortran90Parser::IOLENGTH);
      setState(2905);
      match(Fortran90Parser::ASSIGN);
      setState(2906);
      scalarVariable();
      setState(2907);
      match(Fortran90Parser::RPAREN);
      setState(2908);
      outputItemList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InquireSpecListContext ------------------------------------------------------------------

Fortran90Parser::InquireSpecListContext::InquireSpecListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::InquireSpecListContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

std::vector<Fortran90Parser::InquireSpecContext *> Fortran90Parser::InquireSpecListContext::inquireSpec() {
  return getRuleContexts<Fortran90Parser::InquireSpecContext>();
}

Fortran90Parser::InquireSpecContext* Fortran90Parser::InquireSpecListContext::inquireSpec(size_t i) {
  return getRuleContext<Fortran90Parser::InquireSpecContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::InquireSpecListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::InquireSpecListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::InquireSpecListContext::getRuleIndex() const {
  return Fortran90Parser::RuleInquireSpecList;
}

void Fortran90Parser::InquireSpecListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInquireSpecList(this);
}

void Fortran90Parser::InquireSpecListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInquireSpecList(this);
}

Fortran90Parser::InquireSpecListContext* Fortran90Parser::inquireSpecList() {
  InquireSpecListContext *_localctx = _tracker.createInstance<InquireSpecListContext>(_ctx, getState());
  enterRule(_localctx, 534, Fortran90Parser::RuleInquireSpecList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2913);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
    case 1: {
      setState(2912);
      unitIdentifier();
      break;
    }

    default:
      break;
    }
    setState(2916);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 16489722788961) != 0) || _la == Fortran90Parser::NAME

    || _la == Fortran90Parser::BLANK) {
      setState(2915);
      inquireSpec();
    }
    setState(2922);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(2918);
      match(Fortran90Parser::COMMA);
      setState(2919);
      inquireSpec();
      setState(2924);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InquireSpecContext ------------------------------------------------------------------

Fortran90Parser::InquireSpecContext::InquireSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::UNIT() {
  return getToken(Fortran90Parser::UNIT, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::InquireSpecContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::FILE() {
  return getToken(Fortran90Parser::FILE, 0);
}

Fortran90Parser::CExpressionContext* Fortran90Parser::InquireSpecContext::cExpression() {
  return getRuleContext<Fortran90Parser::CExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::ERR() {
  return getToken(Fortran90Parser::ERR, 0);
}

Fortran90Parser::LblRefContext* Fortran90Parser::InquireSpecContext::lblRef() {
  return getRuleContext<Fortran90Parser::LblRefContext>(0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::IOSTAT() {
  return getToken(Fortran90Parser::IOSTAT, 0);
}

Fortran90Parser::ScalarVariableContext* Fortran90Parser::InquireSpecContext::scalarVariable() {
  return getRuleContext<Fortran90Parser::ScalarVariableContext>(0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::EXIST() {
  return getToken(Fortran90Parser::EXIST, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::OPENED() {
  return getToken(Fortran90Parser::OPENED, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::NUMBER() {
  return getToken(Fortran90Parser::NUMBER, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::NAMED() {
  return getToken(Fortran90Parser::NAMED, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::ACCESS() {
  return getToken(Fortran90Parser::ACCESS, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::SEQUENTIAL() {
  return getToken(Fortran90Parser::SEQUENTIAL, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::DIRECT() {
  return getToken(Fortran90Parser::DIRECT, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::FORM() {
  return getToken(Fortran90Parser::FORM, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::FORMATTED() {
  return getToken(Fortran90Parser::FORMATTED, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::UNFORMATTED() {
  return getToken(Fortran90Parser::UNFORMATTED, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::RECL() {
  return getToken(Fortran90Parser::RECL, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::InquireSpecContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::NEXTREC() {
  return getToken(Fortran90Parser::NEXTREC, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::BLANK() {
  return getToken(Fortran90Parser::BLANK, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::POSITION() {
  return getToken(Fortran90Parser::POSITION, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::ACTION() {
  return getToken(Fortran90Parser::ACTION, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::READ() {
  return getToken(Fortran90Parser::READ, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::WRITE() {
  return getToken(Fortran90Parser::WRITE, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::READWRITE() {
  return getToken(Fortran90Parser::READWRITE, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::DELIM() {
  return getToken(Fortran90Parser::DELIM, 0);
}

tree::TerminalNode* Fortran90Parser::InquireSpecContext::PAD() {
  return getToken(Fortran90Parser::PAD, 0);
}


size_t Fortran90Parser::InquireSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleInquireSpec;
}

void Fortran90Parser::InquireSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInquireSpec(this);
}

void Fortran90Parser::InquireSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInquireSpec(this);
}

Fortran90Parser::InquireSpecContext* Fortran90Parser::inquireSpec() {
  InquireSpecContext *_localctx = _tracker.createInstance<InquireSpecContext>(_ctx, getState());
  enterRule(_localctx, 536, Fortran90Parser::RuleInquireSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3000);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::UNIT: {
        enterOuterAlt(_localctx, 1);
        setState(2925);
        match(Fortran90Parser::UNIT);
        setState(2926);
        match(Fortran90Parser::ASSIGN);
        setState(2927);
        unitIdentifier();
        break;
      }

      case Fortran90Parser::FILE: {
        enterOuterAlt(_localctx, 2);
        setState(2928);
        match(Fortran90Parser::FILE);
        setState(2929);
        match(Fortran90Parser::ASSIGN);
        setState(2930);
        cExpression();
        break;
      }

      case Fortran90Parser::ERR: {
        enterOuterAlt(_localctx, 3);
        setState(2931);
        match(Fortran90Parser::ERR);
        setState(2932);
        match(Fortran90Parser::ASSIGN);
        setState(2933);
        lblRef();
        break;
      }

      case Fortran90Parser::IOSTAT: {
        enterOuterAlt(_localctx, 4);
        setState(2934);
        match(Fortran90Parser::IOSTAT);
        setState(2935);
        match(Fortran90Parser::ASSIGN);
        setState(2936);
        scalarVariable();
        break;
      }

      case Fortran90Parser::EXIST: {
        enterOuterAlt(_localctx, 5);
        setState(2937);
        match(Fortran90Parser::EXIST);
        setState(2938);
        match(Fortran90Parser::ASSIGN);
        setState(2939);
        scalarVariable();
        break;
      }

      case Fortran90Parser::OPENED: {
        enterOuterAlt(_localctx, 6);
        setState(2940);
        match(Fortran90Parser::OPENED);
        setState(2941);
        match(Fortran90Parser::ASSIGN);
        setState(2942);
        scalarVariable();
        break;
      }

      case Fortran90Parser::NUMBER: {
        enterOuterAlt(_localctx, 7);
        setState(2943);
        match(Fortran90Parser::NUMBER);
        setState(2944);
        match(Fortran90Parser::ASSIGN);
        setState(2945);
        scalarVariable();
        break;
      }

      case Fortran90Parser::NAMED: {
        enterOuterAlt(_localctx, 8);
        setState(2946);
        match(Fortran90Parser::NAMED);
        setState(2947);
        match(Fortran90Parser::ASSIGN);
        setState(2948);
        scalarVariable();
        break;
      }

      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 9);
        setState(2949);
        match(Fortran90Parser::NAME);
        setState(2950);
        match(Fortran90Parser::ASSIGN);
        setState(2951);
        scalarVariable();
        break;
      }

      case Fortran90Parser::ACCESS: {
        enterOuterAlt(_localctx, 10);
        setState(2952);
        match(Fortran90Parser::ACCESS);
        setState(2953);
        match(Fortran90Parser::ASSIGN);
        setState(2954);
        scalarVariable();
        break;
      }

      case Fortran90Parser::SEQUENTIAL: {
        enterOuterAlt(_localctx, 11);
        setState(2955);
        match(Fortran90Parser::SEQUENTIAL);
        setState(2956);
        match(Fortran90Parser::ASSIGN);
        setState(2957);
        scalarVariable();
        break;
      }

      case Fortran90Parser::DIRECT: {
        enterOuterAlt(_localctx, 12);
        setState(2958);
        match(Fortran90Parser::DIRECT);
        setState(2959);
        match(Fortran90Parser::ASSIGN);
        setState(2960);
        scalarVariable();
        break;
      }

      case Fortran90Parser::FORM: {
        enterOuterAlt(_localctx, 13);
        setState(2961);
        match(Fortran90Parser::FORM);
        setState(2962);
        match(Fortran90Parser::ASSIGN);
        setState(2963);
        scalarVariable();
        break;
      }

      case Fortran90Parser::FORMATTED: {
        enterOuterAlt(_localctx, 14);
        setState(2964);
        match(Fortran90Parser::FORMATTED);
        setState(2965);
        match(Fortran90Parser::ASSIGN);
        setState(2966);
        scalarVariable();
        break;
      }

      case Fortran90Parser::UNFORMATTED: {
        enterOuterAlt(_localctx, 15);
        setState(2967);
        match(Fortran90Parser::UNFORMATTED);
        setState(2968);
        match(Fortran90Parser::ASSIGN);
        setState(2969);
        scalarVariable();
        break;
      }

      case Fortran90Parser::RECL: {
        enterOuterAlt(_localctx, 16);
        setState(2970);
        match(Fortran90Parser::RECL);
        setState(2971);
        match(Fortran90Parser::ASSIGN);
        setState(2972);
        expression(0);
        break;
      }

      case Fortran90Parser::NEXTREC: {
        enterOuterAlt(_localctx, 17);
        setState(2973);
        match(Fortran90Parser::NEXTREC);
        setState(2974);
        match(Fortran90Parser::ASSIGN);
        setState(2975);
        scalarVariable();
        break;
      }

      case Fortran90Parser::BLANK: {
        enterOuterAlt(_localctx, 18);
        setState(2976);
        match(Fortran90Parser::BLANK);
        setState(2977);
        match(Fortran90Parser::ASSIGN);
        setState(2978);
        scalarVariable();
        break;
      }

      case Fortran90Parser::POSITION: {
        enterOuterAlt(_localctx, 19);
        setState(2979);
        match(Fortran90Parser::POSITION);
        setState(2980);
        match(Fortran90Parser::ASSIGN);
        setState(2981);
        scalarVariable();
        break;
      }

      case Fortran90Parser::ACTION: {
        enterOuterAlt(_localctx, 20);
        setState(2982);
        match(Fortran90Parser::ACTION);
        setState(2983);
        match(Fortran90Parser::ASSIGN);
        setState(2984);
        scalarVariable();
        break;
      }

      case Fortran90Parser::READ: {
        enterOuterAlt(_localctx, 21);
        setState(2985);
        match(Fortran90Parser::READ);
        setState(2986);
        match(Fortran90Parser::ASSIGN);
        setState(2987);
        scalarVariable();
        break;
      }

      case Fortran90Parser::WRITE: {
        enterOuterAlt(_localctx, 22);
        setState(2988);
        match(Fortran90Parser::WRITE);
        setState(2989);
        match(Fortran90Parser::ASSIGN);
        setState(2990);
        scalarVariable();
        break;
      }

      case Fortran90Parser::READWRITE: {
        enterOuterAlt(_localctx, 23);
        setState(2991);
        match(Fortran90Parser::READWRITE);
        setState(2992);
        match(Fortran90Parser::ASSIGN);
        setState(2993);
        scalarVariable();
        break;
      }

      case Fortran90Parser::DELIM: {
        enterOuterAlt(_localctx, 24);
        setState(2994);
        match(Fortran90Parser::DELIM);
        setState(2995);
        match(Fortran90Parser::ASSIGN);
        setState(2996);
        scalarVariable();
        break;
      }

      case Fortran90Parser::PAD: {
        enterOuterAlt(_localctx, 25);
        setState(2997);
        match(Fortran90Parser::PAD);
        setState(2998);
        match(Fortran90Parser::ASSIGN);
        setState(2999);
        scalarVariable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignedGotoStmtContext ------------------------------------------------------------------

Fortran90Parser::AssignedGotoStmtContext::AssignedGotoStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::AssignedGotoStmtContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::AssignedGotoStmtContext::GOTO() {
  return getToken(Fortran90Parser::GOTO, 0);
}

tree::TerminalNode* Fortran90Parser::AssignedGotoStmtContext::GO() {
  return getToken(Fortran90Parser::GO, 0);
}

tree::TerminalNode* Fortran90Parser::AssignedGotoStmtContext::TO() {
  return getToken(Fortran90Parser::TO, 0);
}

tree::TerminalNode* Fortran90Parser::AssignedGotoStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::LblRefListContext* Fortran90Parser::AssignedGotoStmtContext::lblRefList() {
  return getRuleContext<Fortran90Parser::LblRefListContext>(0);
}

tree::TerminalNode* Fortran90Parser::AssignedGotoStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::VariableCommaContext* Fortran90Parser::AssignedGotoStmtContext::variableComma() {
  return getRuleContext<Fortran90Parser::VariableCommaContext>(0);
}


size_t Fortran90Parser::AssignedGotoStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleAssignedGotoStmt;
}

void Fortran90Parser::AssignedGotoStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignedGotoStmt(this);
}

void Fortran90Parser::AssignedGotoStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignedGotoStmt(this);
}

Fortran90Parser::AssignedGotoStmtContext* Fortran90Parser::assignedGotoStmt() {
  AssignedGotoStmtContext *_localctx = _tracker.createInstance<AssignedGotoStmtContext>(_ctx, getState());
  enterRule(_localctx, 538, Fortran90Parser::RuleAssignedGotoStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3028);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3005);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Fortran90Parser::GOTO: {
          setState(3002);
          match(Fortran90Parser::GOTO);
          break;
        }

        case Fortran90Parser::GO: {
          setState(3003);
          match(Fortran90Parser::GO);
          setState(3004);
          match(Fortran90Parser::TO);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3007);
      variableName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3011);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Fortran90Parser::GOTO: {
          setState(3008);
          match(Fortran90Parser::GOTO);
          break;
        }

        case Fortran90Parser::GO: {
          setState(3009);
          match(Fortran90Parser::GO);
          setState(3010);
          match(Fortran90Parser::TO);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3013);
      variableName();
      setState(3014);
      match(Fortran90Parser::LPAREN);
      setState(3015);
      lblRefList();
      setState(3016);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3021);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Fortran90Parser::GOTO: {
          setState(3018);
          match(Fortran90Parser::GOTO);
          break;
        }

        case Fortran90Parser::GO: {
          setState(3019);
          match(Fortran90Parser::GO);
          setState(3020);
          match(Fortran90Parser::TO);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3023);
      variableComma();
      setState(3024);
      match(Fortran90Parser::LPAREN);
      setState(3025);
      lblRefList();
      setState(3026);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableCommaContext ------------------------------------------------------------------

Fortran90Parser::VariableCommaContext::VariableCommaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::VariableCommaContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}

tree::TerminalNode* Fortran90Parser::VariableCommaContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}


size_t Fortran90Parser::VariableCommaContext::getRuleIndex() const {
  return Fortran90Parser::RuleVariableComma;
}

void Fortran90Parser::VariableCommaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableComma(this);
}

void Fortran90Parser::VariableCommaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableComma(this);
}

Fortran90Parser::VariableCommaContext* Fortran90Parser::variableComma() {
  VariableCommaContext *_localctx = _tracker.createInstance<VariableCommaContext>(_ctx, getState());
  enterRule(_localctx, 540, Fortran90Parser::RuleVariableComma);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3030);
    variableName();
    setState(3031);
    match(Fortran90Parser::COMMA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GotoStmtContext ------------------------------------------------------------------

Fortran90Parser::GotoStmtContext::GotoStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::LblRefContext* Fortran90Parser::GotoStmtContext::lblRef() {
  return getRuleContext<Fortran90Parser::LblRefContext>(0);
}

tree::TerminalNode* Fortran90Parser::GotoStmtContext::GOTO() {
  return getToken(Fortran90Parser::GOTO, 0);
}

tree::TerminalNode* Fortran90Parser::GotoStmtContext::GO() {
  return getToken(Fortran90Parser::GO, 0);
}

tree::TerminalNode* Fortran90Parser::GotoStmtContext::TO() {
  return getToken(Fortran90Parser::TO, 0);
}


size_t Fortran90Parser::GotoStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleGotoStmt;
}

void Fortran90Parser::GotoStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGotoStmt(this);
}

void Fortran90Parser::GotoStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGotoStmt(this);
}

Fortran90Parser::GotoStmtContext* Fortran90Parser::gotoStmt() {
  GotoStmtContext *_localctx = _tracker.createInstance<GotoStmtContext>(_ctx, getState());
  enterRule(_localctx, 542, Fortran90Parser::RuleGotoStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3036);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::GOTO: {
        setState(3033);
        match(Fortran90Parser::GOTO);
        break;
      }

      case Fortran90Parser::GO: {
        setState(3034);
        match(Fortran90Parser::GO);
        setState(3035);
        match(Fortran90Parser::TO);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3038);
    lblRef();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComputedGotoStmtContext ------------------------------------------------------------------

Fortran90Parser::ComputedGotoStmtContext::ComputedGotoStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ComputedGotoStmtContext::GOTO() {
  return getToken(Fortran90Parser::GOTO, 0);
}

tree::TerminalNode* Fortran90Parser::ComputedGotoStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::LblRefListContext* Fortran90Parser::ComputedGotoStmtContext::lblRefList() {
  return getRuleContext<Fortran90Parser::LblRefListContext>(0);
}

tree::TerminalNode* Fortran90Parser::ComputedGotoStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::ComputedGotoStmtContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::ComputedGotoStmtContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}


size_t Fortran90Parser::ComputedGotoStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleComputedGotoStmt;
}

void Fortran90Parser::ComputedGotoStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComputedGotoStmt(this);
}

void Fortran90Parser::ComputedGotoStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComputedGotoStmt(this);
}

Fortran90Parser::ComputedGotoStmtContext* Fortran90Parser::computedGotoStmt() {
  ComputedGotoStmtContext *_localctx = _tracker.createInstance<ComputedGotoStmtContext>(_ctx, getState());
  enterRule(_localctx, 544, Fortran90Parser::RuleComputedGotoStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3040);
    match(Fortran90Parser::GOTO);
    setState(3041);
    match(Fortran90Parser::LPAREN);
    setState(3042);
    lblRefList();
    setState(3043);
    match(Fortran90Parser::RPAREN);
    setState(3045);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::COMMA) {
      setState(3044);
      match(Fortran90Parser::COMMA);
    }
    setState(3047);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LblRefListContext ------------------------------------------------------------------

Fortran90Parser::LblRefListContext::LblRefListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::LblRefContext *> Fortran90Parser::LblRefListContext::lblRef() {
  return getRuleContexts<Fortran90Parser::LblRefContext>();
}

Fortran90Parser::LblRefContext* Fortran90Parser::LblRefListContext::lblRef(size_t i) {
  return getRuleContext<Fortran90Parser::LblRefContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::LblRefListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::LblRefListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::LblRefListContext::getRuleIndex() const {
  return Fortran90Parser::RuleLblRefList;
}

void Fortran90Parser::LblRefListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLblRefList(this);
}

void Fortran90Parser::LblRefListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLblRefList(this);
}

Fortran90Parser::LblRefListContext* Fortran90Parser::lblRefList() {
  LblRefListContext *_localctx = _tracker.createInstance<LblRefListContext>(_ctx, getState());
  enterRule(_localctx, 546, Fortran90Parser::RuleLblRefList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3049);
    lblRef();
    setState(3054);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(3050);
      match(Fortran90Parser::COMMA);
      setState(3051);
      lblRef();
      setState(3056);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndfileStmtContext ------------------------------------------------------------------

Fortran90Parser::EndfileStmtContext::EndfileStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::EndfileStmtContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::EndfileStmtContext::ENDFILE() {
  return getToken(Fortran90Parser::ENDFILE, 0);
}

tree::TerminalNode* Fortran90Parser::EndfileStmtContext::END() {
  return getToken(Fortran90Parser::END, 0);
}

tree::TerminalNode* Fortran90Parser::EndfileStmtContext::FILE() {
  return getToken(Fortran90Parser::FILE, 0);
}

tree::TerminalNode* Fortran90Parser::EndfileStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::PositionSpecListContext* Fortran90Parser::EndfileStmtContext::positionSpecList() {
  return getRuleContext<Fortran90Parser::PositionSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::EndfileStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::EndfileStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleEndfileStmt;
}

void Fortran90Parser::EndfileStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndfileStmt(this);
}

void Fortran90Parser::EndfileStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndfileStmt(this);
}

Fortran90Parser::EndfileStmtContext* Fortran90Parser::endfileStmt() {
  EndfileStmtContext *_localctx = _tracker.createInstance<EndfileStmtContext>(_ctx, getState());
  enterRule(_localctx, 548, Fortran90Parser::RuleEndfileStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3072);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3060);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Fortran90Parser::ENDFILE: {
          setState(3057);
          match(Fortran90Parser::ENDFILE);
          break;
        }

        case Fortran90Parser::END: {
          setState(3058);
          match(Fortran90Parser::END);
          setState(3059);
          match(Fortran90Parser::FILE);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3062);
      unitIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3066);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Fortran90Parser::ENDFILE: {
          setState(3063);
          match(Fortran90Parser::ENDFILE);
          break;
        }

        case Fortran90Parser::END: {
          setState(3064);
          match(Fortran90Parser::END);
          setState(3065);
          match(Fortran90Parser::FILE);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3068);
      match(Fortran90Parser::LPAREN);
      setState(3069);
      positionSpecList();
      setState(3070);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStmtContext ------------------------------------------------------------------

Fortran90Parser::ContinueStmtContext::ContinueStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ContinueStmtContext::CONTINUE() {
  return getToken(Fortran90Parser::CONTINUE, 0);
}


size_t Fortran90Parser::ContinueStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleContinueStmt;
}

void Fortran90Parser::ContinueStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStmt(this);
}

void Fortran90Parser::ContinueStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStmt(this);
}

Fortran90Parser::ContinueStmtContext* Fortran90Parser::continueStmt() {
  ContinueStmtContext *_localctx = _tracker.createInstance<ContinueStmtContext>(_ctx, getState());
  enterRule(_localctx, 550, Fortran90Parser::RuleContinueStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3074);
    match(Fortran90Parser::CONTINUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CloseStmtContext ------------------------------------------------------------------

Fortran90Parser::CloseStmtContext::CloseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CloseStmtContext::CLOSE() {
  return getToken(Fortran90Parser::CLOSE, 0);
}

tree::TerminalNode* Fortran90Parser::CloseStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::CloseSpecListContext* Fortran90Parser::CloseStmtContext::closeSpecList() {
  return getRuleContext<Fortran90Parser::CloseSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::CloseStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::CloseStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleCloseStmt;
}

void Fortran90Parser::CloseStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCloseStmt(this);
}

void Fortran90Parser::CloseStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCloseStmt(this);
}

Fortran90Parser::CloseStmtContext* Fortran90Parser::closeStmt() {
  CloseStmtContext *_localctx = _tracker.createInstance<CloseStmtContext>(_ctx, getState());
  enterRule(_localctx, 552, Fortran90Parser::RuleCloseStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3076);
    match(Fortran90Parser::CLOSE);
    setState(3077);
    match(Fortran90Parser::LPAREN);
    setState(3078);
    closeSpecList();
    setState(3079);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CloseSpecListContext ------------------------------------------------------------------

Fortran90Parser::CloseSpecListContext::CloseSpecListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UnitIdentifierCommaContext* Fortran90Parser::CloseSpecListContext::unitIdentifierComma() {
  return getRuleContext<Fortran90Parser::UnitIdentifierCommaContext>(0);
}

std::vector<Fortran90Parser::CloseSpecContext *> Fortran90Parser::CloseSpecListContext::closeSpec() {
  return getRuleContexts<Fortran90Parser::CloseSpecContext>();
}

Fortran90Parser::CloseSpecContext* Fortran90Parser::CloseSpecListContext::closeSpec(size_t i) {
  return getRuleContext<Fortran90Parser::CloseSpecContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::CloseSpecListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::CloseSpecListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::CloseSpecListContext::getRuleIndex() const {
  return Fortran90Parser::RuleCloseSpecList;
}

void Fortran90Parser::CloseSpecListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCloseSpecList(this);
}

void Fortran90Parser::CloseSpecListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCloseSpecList(this);
}

Fortran90Parser::CloseSpecListContext* Fortran90Parser::closeSpecList() {
  CloseSpecListContext *_localctx = _tracker.createInstance<CloseSpecListContext>(_ctx, getState());
  enterRule(_localctx, 554, Fortran90Parser::RuleCloseSpecList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3082);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
    case 1: {
      setState(3081);
      unitIdentifierComma();
      break;
    }

    default:
      break;
    }
    setState(3085);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & 2098241) != 0)) {
      setState(3084);
      closeSpec();
    }
    setState(3091);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(3087);
      match(Fortran90Parser::COMMA);
      setState(3088);
      closeSpec();
      setState(3093);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CloseSpecContext ------------------------------------------------------------------

Fortran90Parser::CloseSpecContext::CloseSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CloseSpecContext::UNIT() {
  return getToken(Fortran90Parser::UNIT, 0);
}

tree::TerminalNode* Fortran90Parser::CloseSpecContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::CloseSpecContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::CloseSpecContext::ERR() {
  return getToken(Fortran90Parser::ERR, 0);
}

Fortran90Parser::LblRefContext* Fortran90Parser::CloseSpecContext::lblRef() {
  return getRuleContext<Fortran90Parser::LblRefContext>(0);
}

tree::TerminalNode* Fortran90Parser::CloseSpecContext::STATUS() {
  return getToken(Fortran90Parser::STATUS, 0);
}

Fortran90Parser::CExpressionContext* Fortran90Parser::CloseSpecContext::cExpression() {
  return getRuleContext<Fortran90Parser::CExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::CloseSpecContext::IOSTAT() {
  return getToken(Fortran90Parser::IOSTAT, 0);
}

Fortran90Parser::ScalarVariableContext* Fortran90Parser::CloseSpecContext::scalarVariable() {
  return getRuleContext<Fortran90Parser::ScalarVariableContext>(0);
}


size_t Fortran90Parser::CloseSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleCloseSpec;
}

void Fortran90Parser::CloseSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCloseSpec(this);
}

void Fortran90Parser::CloseSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCloseSpec(this);
}

Fortran90Parser::CloseSpecContext* Fortran90Parser::closeSpec() {
  CloseSpecContext *_localctx = _tracker.createInstance<CloseSpecContext>(_ctx, getState());
  enterRule(_localctx, 556, Fortran90Parser::RuleCloseSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3105);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::UNIT: {
        enterOuterAlt(_localctx, 1);
        setState(3094);
        match(Fortran90Parser::UNIT);
        setState(3095);
        match(Fortran90Parser::ASSIGN);
        setState(3096);
        unitIdentifier();
        break;
      }

      case Fortran90Parser::ERR: {
        enterOuterAlt(_localctx, 2);
        setState(3097);
        match(Fortran90Parser::ERR);
        setState(3098);
        match(Fortran90Parser::ASSIGN);
        setState(3099);
        lblRef();
        break;
      }

      case Fortran90Parser::STATUS: {
        enterOuterAlt(_localctx, 3);
        setState(3100);
        match(Fortran90Parser::STATUS);
        setState(3101);
        match(Fortran90Parser::ASSIGN);
        setState(3102);
        cExpression();
        break;
      }

      case Fortran90Parser::IOSTAT: {
        enterOuterAlt(_localctx, 4);
        setState(3103);
        match(Fortran90Parser::IOSTAT);
        setState(3104);
        scalarVariable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CExpressionContext ------------------------------------------------------------------

Fortran90Parser::CExpressionContext::CExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::CPrimaryContext* Fortran90Parser::CExpressionContext::cPrimary() {
  return getRuleContext<Fortran90Parser::CPrimaryContext>(0);
}

std::vector<Fortran90Parser::CPrimaryConcatOpContext *> Fortran90Parser::CExpressionContext::cPrimaryConcatOp() {
  return getRuleContexts<Fortran90Parser::CPrimaryConcatOpContext>();
}

Fortran90Parser::CPrimaryConcatOpContext* Fortran90Parser::CExpressionContext::cPrimaryConcatOp(size_t i) {
  return getRuleContext<Fortran90Parser::CPrimaryConcatOpContext>(i);
}


size_t Fortran90Parser::CExpressionContext::getRuleIndex() const {
  return Fortran90Parser::RuleCExpression;
}

void Fortran90Parser::CExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCExpression(this);
}

void Fortran90Parser::CExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCExpression(this);
}

Fortran90Parser::CExpressionContext* Fortran90Parser::cExpression() {
  CExpressionContext *_localctx = _tracker.createInstance<CExpressionContext>(_ctx, getState());
  enterRule(_localctx, 558, Fortran90Parser::RuleCExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3107);
    cPrimary();
    setState(3111);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3108);
        cPrimaryConcatOp(); 
      }
      setState(3113);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CPrimaryContext ------------------------------------------------------------------

Fortran90Parser::CPrimaryContext::CPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::COperandContext* Fortran90Parser::CPrimaryContext::cOperand() {
  return getRuleContext<Fortran90Parser::COperandContext>(0);
}

tree::TerminalNode* Fortran90Parser::CPrimaryContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::CExpressionContext* Fortran90Parser::CPrimaryContext::cExpression() {
  return getRuleContext<Fortran90Parser::CExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::CPrimaryContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::CPrimaryContext::getRuleIndex() const {
  return Fortran90Parser::RuleCPrimary;
}

void Fortran90Parser::CPrimaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCPrimary(this);
}

void Fortran90Parser::CPrimaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCPrimary(this);
}

Fortran90Parser::CPrimaryContext* Fortran90Parser::cPrimary() {
  CPrimaryContext *_localctx = _tracker.createInstance<CPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 560, Fortran90Parser::RuleCPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3119);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::CONTAINS:
      case Fortran90Parser::MODULE:
      case Fortran90Parser::ENDMODULE:
      case Fortran90Parser::PROGRAM:
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::BLOCK:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::ENDINTERFACE:
      case Fortran90Parser::PROCEDURE:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::IN:
      case Fortran90Parser::OUT:
      case Fortran90Parser::INOUT:
      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::USE:
      case Fortran90Parser::ONLY:
      case Fortran90Parser::ASSIGNMENT:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::ELSEWHERE:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::BLOCKDATA:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::NONE:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::THEN:
      case Fortran90Parser::ELSE:
      case Fortran90Parser::ENDIF:
      case Fortran90Parser::RESULT:
      case Fortran90Parser::ELSEIF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::ENDWHERE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::ENDSELECT:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::CASE:
      case Fortran90Parser::DEFAULT:
      case Fortran90Parser::DIRECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::REC:
      case Fortran90Parser::ENDDO:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::FMT:
      case Fortran90Parser::UNIT:
      case Fortran90Parser::PAD:
      case Fortran90Parser::ACTION:
      case Fortran90Parser::DELIM:
      case Fortran90Parser::IOLENGTH:
      case Fortran90Parser::READWRITE:
      case Fortran90Parser::ERR:
      case Fortran90Parser::SIZE:
      case Fortran90Parser::ADVANCE:
      case Fortran90Parser::NML:
      case Fortran90Parser::IOSTAT:
      case Fortran90Parser::FORMAT:
      case Fortran90Parser::LET:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::IOSTART:
      case Fortran90Parser::SEQUENTIAL:
      case Fortran90Parser::LABEL:
      case Fortran90Parser::FILE:
      case Fortran90Parser::STATUS:
      case Fortran90Parser::ACCESS:
      case Fortran90Parser::POSITION:
      case Fortran90Parser::FORM:
      case Fortran90Parser::RECL:
      case Fortran90Parser::EXIST:
      case Fortran90Parser::OPENED:
      case Fortran90Parser::NUMBER:
      case Fortran90Parser::NAMED:
      case Fortran90Parser::NAME_:
      case Fortran90Parser::FORMATTED:
      case Fortran90Parser::UNFORMATTED:
      case Fortran90Parser::NEXTREC:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ENDBLOCKDATA:
      case Fortran90Parser::ENDBLOCK:
      case Fortran90Parser::KIND:
      case Fortran90Parser::LEN:
      case Fortran90Parser::WHILE:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::STAT:
      case Fortran90Parser::CCON:
      case Fortran90Parser::HOLLERITH:
      case Fortran90Parser::CONCATOP:
      case Fortran90Parser::CTRLDIRECT:
      case Fortran90Parser::CTRLREC:
      case Fortran90Parser::TO:
      case Fortran90Parser::SUBPROGRAMBLOCK:
      case Fortran90Parser::DOBLOCK:
      case Fortran90Parser::AIF:
      case Fortran90Parser::THENBLOCK:
      case Fortran90Parser::ELSEBLOCK:
      case Fortran90Parser::CODEROOT:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::PRECISION:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::SCON:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ENDTYPE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::SPOFF:
      case Fortran90Parser::SPON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(3114);
        cOperand();
        break;
      }

      case Fortran90Parser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(3115);
        match(Fortran90Parser::LPAREN);
        setState(3116);
        cExpression();
        setState(3117);
        match(Fortran90Parser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- COperandContext ------------------------------------------------------------------

Fortran90Parser::COperandContext::COperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::COperandContext::SCON() {
  return getToken(Fortran90Parser::SCON, 0);
}

Fortran90Parser::NameDataRefContext* Fortran90Parser::COperandContext::nameDataRef() {
  return getRuleContext<Fortran90Parser::NameDataRefContext>(0);
}

Fortran90Parser::FunctionReferenceContext* Fortran90Parser::COperandContext::functionReference() {
  return getRuleContext<Fortran90Parser::FunctionReferenceContext>(0);
}


size_t Fortran90Parser::COperandContext::getRuleIndex() const {
  return Fortran90Parser::RuleCOperand;
}

void Fortran90Parser::COperandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCOperand(this);
}

void Fortran90Parser::COperandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCOperand(this);
}

Fortran90Parser::COperandContext* Fortran90Parser::cOperand() {
  COperandContext *_localctx = _tracker.createInstance<COperandContext>(_ctx, getState());
  enterRule(_localctx, 562, Fortran90Parser::RuleCOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3124);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3121);
      match(Fortran90Parser::SCON);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3122);
      nameDataRef();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3123);
      functionReference();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CPrimaryConcatOpContext ------------------------------------------------------------------

Fortran90Parser::CPrimaryConcatOpContext::CPrimaryConcatOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::CPrimaryContext* Fortran90Parser::CPrimaryConcatOpContext::cPrimary() {
  return getRuleContext<Fortran90Parser::CPrimaryContext>(0);
}

std::vector<tree::TerminalNode *> Fortran90Parser::CPrimaryConcatOpContext::DIV() {
  return getTokens(Fortran90Parser::DIV);
}

tree::TerminalNode* Fortran90Parser::CPrimaryConcatOpContext::DIV(size_t i) {
  return getToken(Fortran90Parser::DIV, i);
}

tree::TerminalNode* Fortran90Parser::CPrimaryConcatOpContext::SPOFF() {
  return getToken(Fortran90Parser::SPOFF, 0);
}

tree::TerminalNode* Fortran90Parser::CPrimaryConcatOpContext::SPON() {
  return getToken(Fortran90Parser::SPON, 0);
}


size_t Fortran90Parser::CPrimaryConcatOpContext::getRuleIndex() const {
  return Fortran90Parser::RuleCPrimaryConcatOp;
}

void Fortran90Parser::CPrimaryConcatOpContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCPrimaryConcatOp(this);
}

void Fortran90Parser::CPrimaryConcatOpContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCPrimaryConcatOp(this);
}

Fortran90Parser::CPrimaryConcatOpContext* Fortran90Parser::cPrimaryConcatOp() {
  CPrimaryConcatOpContext *_localctx = _tracker.createInstance<CPrimaryConcatOpContext>(_ctx, getState());
  enterRule(_localctx, 564, Fortran90Parser::RuleCPrimaryConcatOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3126);
    cPrimary();
    setState(3127);
    match(Fortran90Parser::DIV);
    setState(3128);
    match(Fortran90Parser::SPOFF);
    setState(3129);
    match(Fortran90Parser::DIV);
    setState(3130);
    match(Fortran90Parser::SPON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallStmtContext ------------------------------------------------------------------

Fortran90Parser::CallStmtContext::CallStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CallStmtContext::CALL() {
  return getToken(Fortran90Parser::CALL, 0);
}

Fortran90Parser::SubroutineNameUseContext* Fortran90Parser::CallStmtContext::subroutineNameUse() {
  return getRuleContext<Fortran90Parser::SubroutineNameUseContext>(0);
}

tree::TerminalNode* Fortran90Parser::CallStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::SubroutineArgListContext* Fortran90Parser::CallStmtContext::subroutineArgList() {
  return getRuleContext<Fortran90Parser::SubroutineArgListContext>(0);
}

tree::TerminalNode* Fortran90Parser::CallStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::CallStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleCallStmt;
}

void Fortran90Parser::CallStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallStmt(this);
}

void Fortran90Parser::CallStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallStmt(this);
}

Fortran90Parser::CallStmtContext* Fortran90Parser::callStmt() {
  CallStmtContext *_localctx = _tracker.createInstance<CallStmtContext>(_ctx, getState());
  enterRule(_localctx, 566, Fortran90Parser::RuleCallStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3140);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3132);
      match(Fortran90Parser::CALL);
      setState(3133);
      subroutineNameUse();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3134);
      match(Fortran90Parser::CALL);
      setState(3135);
      subroutineNameUse();
      setState(3136);
      match(Fortran90Parser::LPAREN);
      setState(3137);
      subroutineArgList();
      setState(3138);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineNameUseContext ------------------------------------------------------------------

Fortran90Parser::SubroutineNameUseContext::SubroutineNameUseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SubroutineNameUseContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::SubroutineNameUseContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubroutineNameUse;
}

void Fortran90Parser::SubroutineNameUseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutineNameUse(this);
}

void Fortran90Parser::SubroutineNameUseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutineNameUse(this);
}

Fortran90Parser::SubroutineNameUseContext* Fortran90Parser::subroutineNameUse() {
  SubroutineNameUseContext *_localctx = _tracker.createInstance<SubroutineNameUseContext>(_ctx, getState());
  enterRule(_localctx, 568, Fortran90Parser::RuleSubroutineNameUse);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3142);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineArgListContext ------------------------------------------------------------------

Fortran90Parser::SubroutineArgListContext::SubroutineArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::SubroutineArgContext *> Fortran90Parser::SubroutineArgListContext::subroutineArg() {
  return getRuleContexts<Fortran90Parser::SubroutineArgContext>();
}

Fortran90Parser::SubroutineArgContext* Fortran90Parser::SubroutineArgListContext::subroutineArg(size_t i) {
  return getRuleContext<Fortran90Parser::SubroutineArgContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::SubroutineArgListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::SubroutineArgListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::SubroutineArgListContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubroutineArgList;
}

void Fortran90Parser::SubroutineArgListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutineArgList(this);
}

void Fortran90Parser::SubroutineArgListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutineArgList(this);
}

Fortran90Parser::SubroutineArgListContext* Fortran90Parser::subroutineArgList() {
  SubroutineArgListContext *_localctx = _tracker.createInstance<SubroutineArgListContext>(_ctx, getState());
  enterRule(_localctx, 570, Fortran90Parser::RuleSubroutineArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3145);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1375731714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1693353459891306497) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 2594004665881067555) != 0)) {
      setState(3144);
      subroutineArg();
    }
    setState(3151);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(3147);
      match(Fortran90Parser::COMMA);
      setState(3148);
      subroutineArg();
      setState(3153);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineArgContext ------------------------------------------------------------------

Fortran90Parser::SubroutineArgContext::SubroutineArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExpressionContext* Fortran90Parser::SubroutineArgContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::SubroutineArgContext::HOLLERITH() {
  return getToken(Fortran90Parser::HOLLERITH, 0);
}

tree::TerminalNode* Fortran90Parser::SubroutineArgContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}

Fortran90Parser::LblRefContext* Fortran90Parser::SubroutineArgContext::lblRef() {
  return getRuleContext<Fortran90Parser::LblRefContext>(0);
}

tree::TerminalNode* Fortran90Parser::SubroutineArgContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::SubroutineArgContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}


size_t Fortran90Parser::SubroutineArgContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubroutineArg;
}

void Fortran90Parser::SubroutineArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutineArg(this);
}

void Fortran90Parser::SubroutineArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutineArg(this);
}

Fortran90Parser::SubroutineArgContext* Fortran90Parser::subroutineArg() {
  SubroutineArgContext *_localctx = _tracker.createInstance<SubroutineArgContext>(_ctx, getState());
  enterRule(_localctx, 572, Fortran90Parser::RuleSubroutineArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3168);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3154);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3155);
      match(Fortran90Parser::HOLLERITH);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3156);
      match(Fortran90Parser::STAR);
      setState(3157);
      lblRef();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3158);
      match(Fortran90Parser::NAME);
      setState(3159);
      match(Fortran90Parser::ASSIGN);
      setState(3160);
      expression(0);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3161);
      match(Fortran90Parser::NAME);
      setState(3162);
      match(Fortran90Parser::ASSIGN);
      setState(3163);
      match(Fortran90Parser::HOLLERITH);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3164);
      match(Fortran90Parser::NAME);
      setState(3165);
      match(Fortran90Parser::ASSIGN);
      setState(3166);
      match(Fortran90Parser::STAR);
      setState(3167);
      lblRef();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArithmeticIfStmtContext ------------------------------------------------------------------

Fortran90Parser::ArithmeticIfStmtContext::ArithmeticIfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ArithmeticIfStmtContext::IF() {
  return getToken(Fortran90Parser::IF, 0);
}

tree::TerminalNode* Fortran90Parser::ArithmeticIfStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::ArithmeticIfStmtContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::ArithmeticIfStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

std::vector<Fortran90Parser::LblRefContext *> Fortran90Parser::ArithmeticIfStmtContext::lblRef() {
  return getRuleContexts<Fortran90Parser::LblRefContext>();
}

Fortran90Parser::LblRefContext* Fortran90Parser::ArithmeticIfStmtContext::lblRef(size_t i) {
  return getRuleContext<Fortran90Parser::LblRefContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::ArithmeticIfStmtContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::ArithmeticIfStmtContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::ArithmeticIfStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleArithmeticIfStmt;
}

void Fortran90Parser::ArithmeticIfStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmeticIfStmt(this);
}

void Fortran90Parser::ArithmeticIfStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmeticIfStmt(this);
}

Fortran90Parser::ArithmeticIfStmtContext* Fortran90Parser::arithmeticIfStmt() {
  ArithmeticIfStmtContext *_localctx = _tracker.createInstance<ArithmeticIfStmtContext>(_ctx, getState());
  enterRule(_localctx, 574, Fortran90Parser::RuleArithmeticIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3170);
    match(Fortran90Parser::IF);
    setState(3171);
    match(Fortran90Parser::LPAREN);
    setState(3172);
    expression(0);
    setState(3173);
    match(Fortran90Parser::RPAREN);
    setState(3174);
    lblRef();
    setState(3175);
    match(Fortran90Parser::COMMA);
    setState(3176);
    lblRef();
    setState(3177);
    match(Fortran90Parser::COMMA);
    setState(3178);
    lblRef();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LblRefContext ------------------------------------------------------------------

Fortran90Parser::LblRefContext::LblRefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::LabelContext* Fortran90Parser::LblRefContext::label() {
  return getRuleContext<Fortran90Parser::LabelContext>(0);
}


size_t Fortran90Parser::LblRefContext::getRuleIndex() const {
  return Fortran90Parser::RuleLblRef;
}

void Fortran90Parser::LblRefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLblRef(this);
}

void Fortran90Parser::LblRefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLblRef(this);
}

Fortran90Parser::LblRefContext* Fortran90Parser::lblRef() {
  LblRefContext *_localctx = _tracker.createInstance<LblRefContext>(_ctx, getState());
  enterRule(_localctx, 576, Fortran90Parser::RuleLblRef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3180);
    label();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelContext ------------------------------------------------------------------

Fortran90Parser::LabelContext::LabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::LabelContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}


size_t Fortran90Parser::LabelContext::getRuleIndex() const {
  return Fortran90Parser::RuleLabel;
}

void Fortran90Parser::LabelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabel(this);
}

void Fortran90Parser::LabelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabel(this);
}

Fortran90Parser::LabelContext* Fortran90Parser::label() {
  LabelContext *_localctx = _tracker.createInstance<LabelContext>(_ctx, getState());
  enterRule(_localctx, 578, Fortran90Parser::RuleLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3182);
    match(Fortran90Parser::ICON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentStmtContext ------------------------------------------------------------------

Fortran90Parser::AssignmentStmtContext::AssignmentStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::AssignmentStmtContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::AssignmentStmtContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::AssignmentStmtContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

Fortran90Parser::LabelContext* Fortran90Parser::AssignmentStmtContext::label() {
  return getRuleContext<Fortran90Parser::LabelContext>(0);
}

Fortran90Parser::SFExprListRefContext* Fortran90Parser::AssignmentStmtContext::sFExprListRef() {
  return getRuleContext<Fortran90Parser::SFExprListRefContext>(0);
}

Fortran90Parser::SubstringRangeContext* Fortran90Parser::AssignmentStmtContext::substringRange() {
  return getRuleContext<Fortran90Parser::SubstringRangeContext>(0);
}

tree::TerminalNode* Fortran90Parser::AssignmentStmtContext::PCT() {
  return getToken(Fortran90Parser::PCT, 0);
}

Fortran90Parser::NameDataRefContext* Fortran90Parser::AssignmentStmtContext::nameDataRef() {
  return getRuleContext<Fortran90Parser::NameDataRefContext>(0);
}

tree::TerminalNode* Fortran90Parser::AssignmentStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::SFDummyArgNameListContext* Fortran90Parser::AssignmentStmtContext::sFDummyArgNameList() {
  return getRuleContext<Fortran90Parser::SFDummyArgNameListContext>(0);
}

tree::TerminalNode* Fortran90Parser::AssignmentStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::AssignmentStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleAssignmentStmt;
}

void Fortran90Parser::AssignmentStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentStmt(this);
}

void Fortran90Parser::AssignmentStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentStmt(this);
}

Fortran90Parser::AssignmentStmtContext* Fortran90Parser::assignmentStmt() {
  AssignmentStmtContext *_localctx = _tracker.createInstance<AssignmentStmtContext>(_ctx, getState());
  enterRule(_localctx, 580, Fortran90Parser::RuleAssignmentStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3214);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3185);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::ICON) {
        setState(3184);
        label();
      }
      setState(3187);
      match(Fortran90Parser::NAME);
      setState(3189);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx)) {
      case 1: {
        setState(3188);
        sFExprListRef();
        break;
      }

      default:
        break;
      }
      setState(3192);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::LPAREN) {
        setState(3191);
        substringRange();
      }
      setState(3194);
      match(Fortran90Parser::ASSIGN);
      setState(3195);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3196);
      match(Fortran90Parser::NAME);
      setState(3198);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::LPAREN) {
        setState(3197);
        sFExprListRef();
      }
      setState(3200);
      match(Fortran90Parser::PCT);
      setState(3201);
      nameDataRef();
      setState(3202);
      match(Fortran90Parser::ASSIGN);
      setState(3203);
      expression(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3205);
      match(Fortran90Parser::NAME);
      setState(3206);
      match(Fortran90Parser::LPAREN);
      setState(3207);
      sFDummyArgNameList();
      setState(3208);
      match(Fortran90Parser::RPAREN);
      setState(3209);
      match(Fortran90Parser::PCT);
      setState(3210);
      nameDataRef();
      setState(3211);
      match(Fortran90Parser::ASSIGN);
      setState(3212);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SFExprListRefContext ------------------------------------------------------------------

Fortran90Parser::SFExprListRefContext::SFExprListRefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SFExprListRefContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::SFExprListContext* Fortran90Parser::SFExprListRefContext::sFExprList() {
  return getRuleContext<Fortran90Parser::SFExprListContext>(0);
}

tree::TerminalNode* Fortran90Parser::SFExprListRefContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

std::vector<Fortran90Parser::CommaSectionSubscriptContext *> Fortran90Parser::SFExprListRefContext::commaSectionSubscript() {
  return getRuleContexts<Fortran90Parser::CommaSectionSubscriptContext>();
}

Fortran90Parser::CommaSectionSubscriptContext* Fortran90Parser::SFExprListRefContext::commaSectionSubscript(size_t i) {
  return getRuleContext<Fortran90Parser::CommaSectionSubscriptContext>(i);
}


size_t Fortran90Parser::SFExprListRefContext::getRuleIndex() const {
  return Fortran90Parser::RuleSFExprListRef;
}

void Fortran90Parser::SFExprListRefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSFExprListRef(this);
}

void Fortran90Parser::SFExprListRefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSFExprListRef(this);
}

Fortran90Parser::SFExprListRefContext* Fortran90Parser::sFExprListRef() {
  SFExprListRefContext *_localctx = _tracker.createInstance<SFExprListRefContext>(_ctx, getState());
  enterRule(_localctx, 582, Fortran90Parser::RuleSFExprListRef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3216);
    match(Fortran90Parser::LPAREN);
    setState(3217);
    sFExprList();
    setState(3221);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Fortran90Parser::COMMA) {
      setState(3218);
      commaSectionSubscript();
      setState(3223);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3224);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SFExprListContext ------------------------------------------------------------------

Fortran90Parser::SFExprListContext::SFExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ExpressionContext *> Fortran90Parser::SFExprListContext::expression() {
  return getRuleContexts<Fortran90Parser::ExpressionContext>();
}

Fortran90Parser::ExpressionContext* Fortran90Parser::SFExprListContext::expression(size_t i) {
  return getRuleContext<Fortran90Parser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::SFExprListContext::COLON() {
  return getTokens(Fortran90Parser::COLON);
}

tree::TerminalNode* Fortran90Parser::SFExprListContext::COLON(size_t i) {
  return getToken(Fortran90Parser::COLON, i);
}

tree::TerminalNode* Fortran90Parser::SFExprListContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}


size_t Fortran90Parser::SFExprListContext::getRuleIndex() const {
  return Fortran90Parser::RuleSFExprList;
}

void Fortran90Parser::SFExprListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSFExprList(this);
}

void Fortran90Parser::SFExprListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSFExprList(this);
}

Fortran90Parser::SFExprListContext* Fortran90Parser::sFExprList() {
  SFExprListContext *_localctx = _tracker.createInstance<SFExprListContext>(_ctx, getState());
  enterRule(_localctx, 584, Fortran90Parser::RuleSFExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3250);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3226);
      expression(0);
      setState(3228);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Fortran90Parser::COLON) {
        setState(3227);
        match(Fortran90Parser::COLON);
      }
      setState(3231);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1375731714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1693353459891306497) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 288161656667373603) != 0)) {
        setState(3230);
        expression(0);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3233);
      match(Fortran90Parser::COLON);
      setState(3235);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1375731714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1693353459891306497) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 288161656667373603) != 0)) {
        setState(3234);
        expression(0);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3238);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1375731714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1693353459891306497) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 288161656667373603) != 0)) {
        setState(3237);
        expression(0);
      }
      setState(3240);
      match(Fortran90Parser::COLON);
      setState(3241);
      expression(0);
      setState(3242);
      match(Fortran90Parser::COLON);
      setState(3243);
      expression(0);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3246);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1375731714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1693353459891306497) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 288161656667373603) != 0)) {
        setState(3245);
        expression(0);
      }
      setState(3248);
      match(Fortran90Parser::DOUBLECOLON);
      setState(3249);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommaSectionSubscriptContext ------------------------------------------------------------------

Fortran90Parser::CommaSectionSubscriptContext::CommaSectionSubscriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::CommaSectionSubscriptContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::SectionSubscriptContext* Fortran90Parser::CommaSectionSubscriptContext::sectionSubscript() {
  return getRuleContext<Fortran90Parser::SectionSubscriptContext>(0);
}


size_t Fortran90Parser::CommaSectionSubscriptContext::getRuleIndex() const {
  return Fortran90Parser::RuleCommaSectionSubscript;
}

void Fortran90Parser::CommaSectionSubscriptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommaSectionSubscript(this);
}

void Fortran90Parser::CommaSectionSubscriptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommaSectionSubscript(this);
}

Fortran90Parser::CommaSectionSubscriptContext* Fortran90Parser::commaSectionSubscript() {
  CommaSectionSubscriptContext *_localctx = _tracker.createInstance<CommaSectionSubscriptContext>(_ctx, getState());
  enterRule(_localctx, 586, Fortran90Parser::RuleCommaSectionSubscript);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3252);
    match(Fortran90Parser::COMMA);
    setState(3253);
    sectionSubscript();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignStmtContext ------------------------------------------------------------------

Fortran90Parser::AssignStmtContext::AssignStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::AssignStmtContext::ASSIGNSTMT() {
  return getToken(Fortran90Parser::ASSIGNSTMT, 0);
}

Fortran90Parser::LblRefContext* Fortran90Parser::AssignStmtContext::lblRef() {
  return getRuleContext<Fortran90Parser::LblRefContext>(0);
}

tree::TerminalNode* Fortran90Parser::AssignStmtContext::TO() {
  return getToken(Fortran90Parser::TO, 0);
}

Fortran90Parser::VariableNameContext* Fortran90Parser::AssignStmtContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}


size_t Fortran90Parser::AssignStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleAssignStmt;
}

void Fortran90Parser::AssignStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignStmt(this);
}

void Fortran90Parser::AssignStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignStmt(this);
}

Fortran90Parser::AssignStmtContext* Fortran90Parser::assignStmt() {
  AssignStmtContext *_localctx = _tracker.createInstance<AssignStmtContext>(_ctx, getState());
  enterRule(_localctx, 588, Fortran90Parser::RuleAssignStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3255);
    match(Fortran90Parser::ASSIGNSTMT);
    setState(3256);
    lblRef();
    setState(3257);
    match(Fortran90Parser::TO);
    setState(3258);
    variableName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BackspaceStmtContext ------------------------------------------------------------------

Fortran90Parser::BackspaceStmtContext::BackspaceStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::BackspaceStmtContext::BACKSPACE() {
  return getToken(Fortran90Parser::BACKSPACE, 0);
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::BackspaceStmtContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::BackspaceStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::PositionSpecListContext* Fortran90Parser::BackspaceStmtContext::positionSpecList() {
  return getRuleContext<Fortran90Parser::PositionSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::BackspaceStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::BackspaceStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleBackspaceStmt;
}

void Fortran90Parser::BackspaceStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBackspaceStmt(this);
}

void Fortran90Parser::BackspaceStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBackspaceStmt(this);
}

Fortran90Parser::BackspaceStmtContext* Fortran90Parser::backspaceStmt() {
  BackspaceStmtContext *_localctx = _tracker.createInstance<BackspaceStmtContext>(_ctx, getState());
  enterRule(_localctx, 590, Fortran90Parser::RuleBackspaceStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3267);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3260);
      match(Fortran90Parser::BACKSPACE);
      setState(3261);
      unitIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3262);
      match(Fortran90Parser::BACKSPACE);
      setState(3263);
      match(Fortran90Parser::LPAREN);
      setState(3264);
      positionSpecList();
      setState(3265);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitIdentifierContext ------------------------------------------------------------------

Fortran90Parser::UnitIdentifierContext::UnitIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UFExprContext* Fortran90Parser::UnitIdentifierContext::uFExpr() {
  return getRuleContext<Fortran90Parser::UFExprContext>(0);
}

tree::TerminalNode* Fortran90Parser::UnitIdentifierContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}


size_t Fortran90Parser::UnitIdentifierContext::getRuleIndex() const {
  return Fortran90Parser::RuleUnitIdentifier;
}

void Fortran90Parser::UnitIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnitIdentifier(this);
}

void Fortran90Parser::UnitIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnitIdentifier(this);
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::unitIdentifier() {
  UnitIdentifierContext *_localctx = _tracker.createInstance<UnitIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 592, Fortran90Parser::RuleUnitIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3271);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::CONTAINS:
      case Fortran90Parser::MODULE:
      case Fortran90Parser::ENDMODULE:
      case Fortran90Parser::PROGRAM:
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::BLOCK:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::ENDINTERFACE:
      case Fortran90Parser::PROCEDURE:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::IN:
      case Fortran90Parser::OUT:
      case Fortran90Parser::INOUT:
      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::USE:
      case Fortran90Parser::ONLY:
      case Fortran90Parser::ASSIGNMENT:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::ELSEWHERE:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::BLOCKDATA:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::NONE:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::THEN:
      case Fortran90Parser::ELSE:
      case Fortran90Parser::ENDIF:
      case Fortran90Parser::RESULT:
      case Fortran90Parser::ELSEIF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::ENDWHERE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::ENDSELECT:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::CASE:
      case Fortran90Parser::DEFAULT:
      case Fortran90Parser::DIRECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::REC:
      case Fortran90Parser::ENDDO:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::FMT:
      case Fortran90Parser::UNIT:
      case Fortran90Parser::PAD:
      case Fortran90Parser::ACTION:
      case Fortran90Parser::DELIM:
      case Fortran90Parser::IOLENGTH:
      case Fortran90Parser::READWRITE:
      case Fortran90Parser::ERR:
      case Fortran90Parser::SIZE:
      case Fortran90Parser::ADVANCE:
      case Fortran90Parser::NML:
      case Fortran90Parser::IOSTAT:
      case Fortran90Parser::FORMAT:
      case Fortran90Parser::LET:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::IOSTART:
      case Fortran90Parser::SEQUENTIAL:
      case Fortran90Parser::LABEL:
      case Fortran90Parser::FILE:
      case Fortran90Parser::STATUS:
      case Fortran90Parser::ACCESS:
      case Fortran90Parser::POSITION:
      case Fortran90Parser::FORM:
      case Fortran90Parser::RECL:
      case Fortran90Parser::EXIST:
      case Fortran90Parser::OPENED:
      case Fortran90Parser::NUMBER:
      case Fortran90Parser::NAMED:
      case Fortran90Parser::NAME_:
      case Fortran90Parser::FORMATTED:
      case Fortran90Parser::UNFORMATTED:
      case Fortran90Parser::NEXTREC:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ENDBLOCKDATA:
      case Fortran90Parser::ENDBLOCK:
      case Fortran90Parser::KIND:
      case Fortran90Parser::LEN:
      case Fortran90Parser::LPAREN:
      case Fortran90Parser::WHILE:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::STAT:
      case Fortran90Parser::MINUS:
      case Fortran90Parser::PLUS:
      case Fortran90Parser::CCON:
      case Fortran90Parser::HOLLERITH:
      case Fortran90Parser::CONCATOP:
      case Fortran90Parser::CTRLDIRECT:
      case Fortran90Parser::CTRLREC:
      case Fortran90Parser::TO:
      case Fortran90Parser::SUBPROGRAMBLOCK:
      case Fortran90Parser::DOBLOCK:
      case Fortran90Parser::AIF:
      case Fortran90Parser::THENBLOCK:
      case Fortran90Parser::ELSEBLOCK:
      case Fortran90Parser::CODEROOT:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::PRECISION:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::SCON:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ENDTYPE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::SPOFF:
      case Fortran90Parser::SPON:
      case Fortran90Parser::ICON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(3269);
        uFExpr(0);
        break;
      }

      case Fortran90Parser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(3270);
        match(Fortran90Parser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PositionSpecListContext ------------------------------------------------------------------

Fortran90Parser::PositionSpecListContext::PositionSpecListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UnitIdentifierCommaContext* Fortran90Parser::PositionSpecListContext::unitIdentifierComma() {
  return getRuleContext<Fortran90Parser::UnitIdentifierCommaContext>(0);
}

std::vector<Fortran90Parser::PositionSpecContext *> Fortran90Parser::PositionSpecListContext::positionSpec() {
  return getRuleContexts<Fortran90Parser::PositionSpecContext>();
}

Fortran90Parser::PositionSpecContext* Fortran90Parser::PositionSpecListContext::positionSpec(size_t i) {
  return getRuleContext<Fortran90Parser::PositionSpecContext>(i);
}


size_t Fortran90Parser::PositionSpecListContext::getRuleIndex() const {
  return Fortran90Parser::RulePositionSpecList;
}

void Fortran90Parser::PositionSpecListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositionSpecList(this);
}

void Fortran90Parser::PositionSpecListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositionSpecList(this);
}

Fortran90Parser::PositionSpecListContext* Fortran90Parser::positionSpecList() {
  PositionSpecListContext *_localctx = _tracker.createInstance<PositionSpecListContext>(_ctx, getState());
  enterRule(_localctx, 594, Fortran90Parser::RulePositionSpecList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3274);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
    case 1: {
      setState(3273);
      unitIdentifierComma();
      break;
    }

    default:
      break;
    }
    setState(3277); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3276);
      positionSpec();
      setState(3279); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & 1089) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitIdentifierCommaContext ------------------------------------------------------------------

Fortran90Parser::UnitIdentifierCommaContext::UnitIdentifierCommaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::UnitIdentifierCommaContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::UnitIdentifierCommaContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}


size_t Fortran90Parser::UnitIdentifierCommaContext::getRuleIndex() const {
  return Fortran90Parser::RuleUnitIdentifierComma;
}

void Fortran90Parser::UnitIdentifierCommaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnitIdentifierComma(this);
}

void Fortran90Parser::UnitIdentifierCommaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnitIdentifierComma(this);
}

Fortran90Parser::UnitIdentifierCommaContext* Fortran90Parser::unitIdentifierComma() {
  UnitIdentifierCommaContext *_localctx = _tracker.createInstance<UnitIdentifierCommaContext>(_ctx, getState());
  enterRule(_localctx, 596, Fortran90Parser::RuleUnitIdentifierComma);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3281);
    unitIdentifier();
    setState(3283);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx)) {
    case 1: {
      setState(3282);
      match(Fortran90Parser::COMMA);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PositionSpecContext ------------------------------------------------------------------

Fortran90Parser::PositionSpecContext::PositionSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::PositionSpecContext::UNIT() {
  return getToken(Fortran90Parser::UNIT, 0);
}

tree::TerminalNode* Fortran90Parser::PositionSpecContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::UnitIdentifierContext* Fortran90Parser::PositionSpecContext::unitIdentifier() {
  return getRuleContext<Fortran90Parser::UnitIdentifierContext>(0);
}

tree::TerminalNode* Fortran90Parser::PositionSpecContext::ERR() {
  return getToken(Fortran90Parser::ERR, 0);
}

Fortran90Parser::LblRefContext* Fortran90Parser::PositionSpecContext::lblRef() {
  return getRuleContext<Fortran90Parser::LblRefContext>(0);
}

tree::TerminalNode* Fortran90Parser::PositionSpecContext::IOSTAT() {
  return getToken(Fortran90Parser::IOSTAT, 0);
}

Fortran90Parser::ScalarVariableContext* Fortran90Parser::PositionSpecContext::scalarVariable() {
  return getRuleContext<Fortran90Parser::ScalarVariableContext>(0);
}


size_t Fortran90Parser::PositionSpecContext::getRuleIndex() const {
  return Fortran90Parser::RulePositionSpec;
}

void Fortran90Parser::PositionSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositionSpec(this);
}

void Fortran90Parser::PositionSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositionSpec(this);
}

Fortran90Parser::PositionSpecContext* Fortran90Parser::positionSpec() {
  PositionSpecContext *_localctx = _tracker.createInstance<PositionSpecContext>(_ctx, getState());
  enterRule(_localctx, 598, Fortran90Parser::RulePositionSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3294);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::UNIT: {
        enterOuterAlt(_localctx, 1);
        setState(3285);
        match(Fortran90Parser::UNIT);
        setState(3286);
        match(Fortran90Parser::ASSIGN);
        setState(3287);
        unitIdentifier();
        break;
      }

      case Fortran90Parser::ERR: {
        enterOuterAlt(_localctx, 2);
        setState(3288);
        match(Fortran90Parser::ERR);
        setState(3289);
        match(Fortran90Parser::ASSIGN);
        setState(3290);
        lblRef();
        break;
      }

      case Fortran90Parser::IOSTAT: {
        enterOuterAlt(_localctx, 3);
        setState(3291);
        match(Fortran90Parser::IOSTAT);
        setState(3292);
        match(Fortran90Parser::ASSIGN);
        setState(3293);
        scalarVariable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScalarVariableContext ------------------------------------------------------------------

Fortran90Parser::ScalarVariableContext::ScalarVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::VariableNameContext* Fortran90Parser::ScalarVariableContext::variableName() {
  return getRuleContext<Fortran90Parser::VariableNameContext>(0);
}

Fortran90Parser::ArrayElementContext* Fortran90Parser::ScalarVariableContext::arrayElement() {
  return getRuleContext<Fortran90Parser::ArrayElementContext>(0);
}


size_t Fortran90Parser::ScalarVariableContext::getRuleIndex() const {
  return Fortran90Parser::RuleScalarVariable;
}

void Fortran90Parser::ScalarVariableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScalarVariable(this);
}

void Fortran90Parser::ScalarVariableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScalarVariable(this);
}

Fortran90Parser::ScalarVariableContext* Fortran90Parser::scalarVariable() {
  ScalarVariableContext *_localctx = _tracker.createInstance<ScalarVariableContext>(_ctx, getState());
  enterRule(_localctx, 600, Fortran90Parser::RuleScalarVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3298);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3296);
      variableName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3297);
      arrayElement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UFExprContext ------------------------------------------------------------------

Fortran90Parser::UFExprContext::UFExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UFTermContext* Fortran90Parser::UFExprContext::uFTerm() {
  return getRuleContext<Fortran90Parser::UFTermContext>(0);
}

tree::TerminalNode* Fortran90Parser::UFExprContext::PLUS() {
  return getToken(Fortran90Parser::PLUS, 0);
}

tree::TerminalNode* Fortran90Parser::UFExprContext::MINUS() {
  return getToken(Fortran90Parser::MINUS, 0);
}

Fortran90Parser::UFExprContext* Fortran90Parser::UFExprContext::uFExpr() {
  return getRuleContext<Fortran90Parser::UFExprContext>(0);
}


size_t Fortran90Parser::UFExprContext::getRuleIndex() const {
  return Fortran90Parser::RuleUFExpr;
}

void Fortran90Parser::UFExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUFExpr(this);
}

void Fortran90Parser::UFExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUFExpr(this);
}


Fortran90Parser::UFExprContext* Fortran90Parser::uFExpr() {
   return uFExpr(0);
}

Fortran90Parser::UFExprContext* Fortran90Parser::uFExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::UFExprContext *_localctx = _tracker.createInstance<UFExprContext>(_ctx, parentState);
  Fortran90Parser::UFExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 602;
  enterRecursionRule(_localctx, 602, Fortran90Parser::RuleUFExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3304);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::CONTAINS:
      case Fortran90Parser::MODULE:
      case Fortran90Parser::ENDMODULE:
      case Fortran90Parser::PROGRAM:
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::BLOCK:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::ENDINTERFACE:
      case Fortran90Parser::PROCEDURE:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::IN:
      case Fortran90Parser::OUT:
      case Fortran90Parser::INOUT:
      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::USE:
      case Fortran90Parser::ONLY:
      case Fortran90Parser::ASSIGNMENT:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::ELSEWHERE:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::BLOCKDATA:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::NONE:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::THEN:
      case Fortran90Parser::ELSE:
      case Fortran90Parser::ENDIF:
      case Fortran90Parser::RESULT:
      case Fortran90Parser::ELSEIF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::ENDWHERE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::ENDSELECT:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::CASE:
      case Fortran90Parser::DEFAULT:
      case Fortran90Parser::DIRECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::REC:
      case Fortran90Parser::ENDDO:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::FMT:
      case Fortran90Parser::UNIT:
      case Fortran90Parser::PAD:
      case Fortran90Parser::ACTION:
      case Fortran90Parser::DELIM:
      case Fortran90Parser::IOLENGTH:
      case Fortran90Parser::READWRITE:
      case Fortran90Parser::ERR:
      case Fortran90Parser::SIZE:
      case Fortran90Parser::ADVANCE:
      case Fortran90Parser::NML:
      case Fortran90Parser::IOSTAT:
      case Fortran90Parser::FORMAT:
      case Fortran90Parser::LET:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::IOSTART:
      case Fortran90Parser::SEQUENTIAL:
      case Fortran90Parser::LABEL:
      case Fortran90Parser::FILE:
      case Fortran90Parser::STATUS:
      case Fortran90Parser::ACCESS:
      case Fortran90Parser::POSITION:
      case Fortran90Parser::FORM:
      case Fortran90Parser::RECL:
      case Fortran90Parser::EXIST:
      case Fortran90Parser::OPENED:
      case Fortran90Parser::NUMBER:
      case Fortran90Parser::NAMED:
      case Fortran90Parser::NAME_:
      case Fortran90Parser::FORMATTED:
      case Fortran90Parser::UNFORMATTED:
      case Fortran90Parser::NEXTREC:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ENDBLOCKDATA:
      case Fortran90Parser::ENDBLOCK:
      case Fortran90Parser::KIND:
      case Fortran90Parser::LEN:
      case Fortran90Parser::LPAREN:
      case Fortran90Parser::WHILE:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::STAT:
      case Fortran90Parser::CCON:
      case Fortran90Parser::HOLLERITH:
      case Fortran90Parser::CONCATOP:
      case Fortran90Parser::CTRLDIRECT:
      case Fortran90Parser::CTRLREC:
      case Fortran90Parser::TO:
      case Fortran90Parser::SUBPROGRAMBLOCK:
      case Fortran90Parser::DOBLOCK:
      case Fortran90Parser::AIF:
      case Fortran90Parser::THENBLOCK:
      case Fortran90Parser::ELSEBLOCK:
      case Fortran90Parser::CODEROOT:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::PRECISION:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::SCON:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ENDTYPE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::SPOFF:
      case Fortran90Parser::SPON:
      case Fortran90Parser::ICON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME: {
        setState(3301);
        uFTerm(0);
        break;
      }

      case Fortran90Parser::MINUS:
      case Fortran90Parser::PLUS: {
        setState(3302);
        _la = _input->LA(1);
        if (!(_la == Fortran90Parser::MINUS

        || _la == Fortran90Parser::PLUS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3303);
        uFTerm(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(3311);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<UFExprContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleUFExpr);
        setState(3306);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3307);
        _la = _input->LA(1);
        if (!(_la == Fortran90Parser::MINUS

        || _la == Fortran90Parser::PLUS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3308);
        uFTerm(0); 
      }
      setState(3313);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- UFTermContext ------------------------------------------------------------------

Fortran90Parser::UFTermContext::UFTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UFFactorContext* Fortran90Parser::UFTermContext::uFFactor() {
  return getRuleContext<Fortran90Parser::UFFactorContext>(0);
}

Fortran90Parser::UFTermContext* Fortran90Parser::UFTermContext::uFTerm() {
  return getRuleContext<Fortran90Parser::UFTermContext>(0);
}

tree::TerminalNode* Fortran90Parser::UFTermContext::STAR() {
  return getToken(Fortran90Parser::STAR, 0);
}

std::vector<tree::TerminalNode *> Fortran90Parser::UFTermContext::DIV() {
  return getTokens(Fortran90Parser::DIV);
}

tree::TerminalNode* Fortran90Parser::UFTermContext::DIV(size_t i) {
  return getToken(Fortran90Parser::DIV, i);
}

Fortran90Parser::UFPrimaryContext* Fortran90Parser::UFTermContext::uFPrimary() {
  return getRuleContext<Fortran90Parser::UFPrimaryContext>(0);
}


size_t Fortran90Parser::UFTermContext::getRuleIndex() const {
  return Fortran90Parser::RuleUFTerm;
}

void Fortran90Parser::UFTermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUFTerm(this);
}

void Fortran90Parser::UFTermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUFTerm(this);
}


Fortran90Parser::UFTermContext* Fortran90Parser::uFTerm() {
   return uFTerm(0);
}

Fortran90Parser::UFTermContext* Fortran90Parser::uFTerm(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::UFTermContext *_localctx = _tracker.createInstance<UFTermContext>(_ctx, parentState);
  Fortran90Parser::UFTermContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 604;
  enterRecursionRule(_localctx, 604, Fortran90Parser::RuleUFTerm, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3315);
    uFFactor();
    _ctx->stop = _input->LT(-1);
    setState(3327);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3325);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<UFTermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleUFTerm);
          setState(3317);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3318);
          _la = _input->LA(1);
          if (!(_la == Fortran90Parser::DIV

          || _la == Fortran90Parser::STAR)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3319);
          uFFactor();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<UFTermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleUFTerm);
          setState(3320);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");

          setState(3321);
          match(Fortran90Parser::DIV);
          setState(3322);
          match(Fortran90Parser::DIV);
          setState(3324);
          uFPrimary();
          break;
        }

        default:
          break;
        } 
      }
      setState(3329);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- UFFactorContext ------------------------------------------------------------------

Fortran90Parser::UFFactorContext::UFFactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UFPrimaryContext* Fortran90Parser::UFFactorContext::uFPrimary() {
  return getRuleContext<Fortran90Parser::UFPrimaryContext>(0);
}

tree::TerminalNode* Fortran90Parser::UFFactorContext::POWER() {
  return getToken(Fortran90Parser::POWER, 0);
}

Fortran90Parser::UFFactorContext* Fortran90Parser::UFFactorContext::uFFactor() {
  return getRuleContext<Fortran90Parser::UFFactorContext>(0);
}


size_t Fortran90Parser::UFFactorContext::getRuleIndex() const {
  return Fortran90Parser::RuleUFFactor;
}

void Fortran90Parser::UFFactorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUFFactor(this);
}

void Fortran90Parser::UFFactorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUFFactor(this);
}

Fortran90Parser::UFFactorContext* Fortran90Parser::uFFactor() {
  UFFactorContext *_localctx = _tracker.createInstance<UFFactorContext>(_ctx, getState());
  enterRule(_localctx, 606, Fortran90Parser::RuleUFFactor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3335);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3330);
      uFPrimary();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3331);
      uFPrimary();
      setState(3332);
      match(Fortran90Parser::POWER);
      setState(3333);
      uFFactor();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UFPrimaryContext ------------------------------------------------------------------

Fortran90Parser::UFPrimaryContext::UFPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::UFPrimaryContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}

tree::TerminalNode* Fortran90Parser::UFPrimaryContext::SCON() {
  return getToken(Fortran90Parser::SCON, 0);
}

Fortran90Parser::NameDataRefContext* Fortran90Parser::UFPrimaryContext::nameDataRef() {
  return getRuleContext<Fortran90Parser::NameDataRefContext>(0);
}

Fortran90Parser::FunctionReferenceContext* Fortran90Parser::UFPrimaryContext::functionReference() {
  return getRuleContext<Fortran90Parser::FunctionReferenceContext>(0);
}

tree::TerminalNode* Fortran90Parser::UFPrimaryContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::UFExprContext* Fortran90Parser::UFPrimaryContext::uFExpr() {
  return getRuleContext<Fortran90Parser::UFExprContext>(0);
}

tree::TerminalNode* Fortran90Parser::UFPrimaryContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::UFPrimaryContext::getRuleIndex() const {
  return Fortran90Parser::RuleUFPrimary;
}

void Fortran90Parser::UFPrimaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUFPrimary(this);
}

void Fortran90Parser::UFPrimaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUFPrimary(this);
}

Fortran90Parser::UFPrimaryContext* Fortran90Parser::uFPrimary() {
  UFPrimaryContext *_localctx = _tracker.createInstance<UFPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 608, Fortran90Parser::RuleUFPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3345);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3337);
      match(Fortran90Parser::ICON);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3338);
      match(Fortran90Parser::SCON);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3339);
      nameDataRef();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3340);
      functionReference();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3341);
      match(Fortran90Parser::LPAREN);
      setState(3342);
      uFExpr(0);
      setState(3343);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineSubprogramContext ------------------------------------------------------------------

Fortran90Parser::SubroutineSubprogramContext::SubroutineSubprogramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SubroutineSubprogramContext::SUBROUTINE() {
  return getToken(Fortran90Parser::SUBROUTINE, 0);
}

Fortran90Parser::SubroutineNameContext* Fortran90Parser::SubroutineSubprogramContext::subroutineName() {
  return getRuleContext<Fortran90Parser::SubroutineNameContext>(0);
}

Fortran90Parser::SubroutineRangeContext* Fortran90Parser::SubroutineSubprogramContext::subroutineRange() {
  return getRuleContext<Fortran90Parser::SubroutineRangeContext>(0);
}

tree::TerminalNode* Fortran90Parser::SubroutineSubprogramContext::RECURSIVE() {
  return getToken(Fortran90Parser::RECURSIVE, 0);
}


size_t Fortran90Parser::SubroutineSubprogramContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubroutineSubprogram;
}

void Fortran90Parser::SubroutineSubprogramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutineSubprogram(this);
}

void Fortran90Parser::SubroutineSubprogramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutineSubprogram(this);
}

Fortran90Parser::SubroutineSubprogramContext* Fortran90Parser::subroutineSubprogram() {
  SubroutineSubprogramContext *_localctx = _tracker.createInstance<SubroutineSubprogramContext>(_ctx, getState());
  enterRule(_localctx, 610, Fortran90Parser::RuleSubroutineSubprogram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3356);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::SUBROUTINE: {
        enterOuterAlt(_localctx, 1);
        setState(3347);
        match(Fortran90Parser::SUBROUTINE);
        setState(3348);
        subroutineName();
        setState(3349);
        subroutineRange();
        break;
      }

      case Fortran90Parser::RECURSIVE: {
        enterOuterAlt(_localctx, 2);
        setState(3351);
        match(Fortran90Parser::RECURSIVE);
        setState(3352);
        match(Fortran90Parser::SUBROUTINE);
        setState(3353);
        subroutineName();
        setState(3354);
        subroutineRange();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineNameContext ------------------------------------------------------------------

Fortran90Parser::SubroutineNameContext::SubroutineNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SubroutineNameContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::SubroutineNameContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubroutineName;
}

void Fortran90Parser::SubroutineNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutineName(this);
}

void Fortran90Parser::SubroutineNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutineName(this);
}

Fortran90Parser::SubroutineNameContext* Fortran90Parser::subroutineName() {
  SubroutineNameContext *_localctx = _tracker.createInstance<SubroutineNameContext>(_ctx, getState());
  enterRule(_localctx, 612, Fortran90Parser::RuleSubroutineName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3358);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubroutineRangeContext ------------------------------------------------------------------

Fortran90Parser::SubroutineRangeContext::SubroutineRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::SubroutineParListContext* Fortran90Parser::SubroutineRangeContext::subroutineParList() {
  return getRuleContext<Fortran90Parser::SubroutineParListContext>(0);
}

Fortran90Parser::EndSubroutineStmtContext* Fortran90Parser::SubroutineRangeContext::endSubroutineStmt() {
  return getRuleContext<Fortran90Parser::EndSubroutineStmtContext>(0);
}

Fortran90Parser::BodyContext* Fortran90Parser::SubroutineRangeContext::body() {
  return getRuleContext<Fortran90Parser::BodyContext>(0);
}

Fortran90Parser::BodyPlusInternalsContext* Fortran90Parser::SubroutineRangeContext::bodyPlusInternals() {
  return getRuleContext<Fortran90Parser::BodyPlusInternalsContext>(0);
}


size_t Fortran90Parser::SubroutineRangeContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubroutineRange;
}

void Fortran90Parser::SubroutineRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubroutineRange(this);
}

void Fortran90Parser::SubroutineRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubroutineRange(this);
}

Fortran90Parser::SubroutineRangeContext* Fortran90Parser::subroutineRange() {
  SubroutineRangeContext *_localctx = _tracker.createInstance<SubroutineRangeContext>(_ctx, getState());
  enterRule(_localctx, 614, Fortran90Parser::RuleSubroutineRange);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3370);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3360);
      subroutineParList();
      setState(3362);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx)) {
      case 1: {
        setState(3361);
        body();
        break;
      }

      default:
        break;
      }
      setState(3364);
      endSubroutineStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3366);
      subroutineParList();
      setState(3367);
      bodyPlusInternals(0);
      setState(3368);
      endSubroutineStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IncludeStmtContext ------------------------------------------------------------------

Fortran90Parser::IncludeStmtContext::IncludeStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::IncludeStmtContext::INCLUDE() {
  return getToken(Fortran90Parser::INCLUDE, 0);
}

tree::TerminalNode* Fortran90Parser::IncludeStmtContext::SCON() {
  return getToken(Fortran90Parser::SCON, 0);
}


size_t Fortran90Parser::IncludeStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleIncludeStmt;
}

void Fortran90Parser::IncludeStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIncludeStmt(this);
}

void Fortran90Parser::IncludeStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIncludeStmt(this);
}

Fortran90Parser::IncludeStmtContext* Fortran90Parser::includeStmt() {
  IncludeStmtContext *_localctx = _tracker.createInstance<IncludeStmtContext>(_ctx, getState());
  enterRule(_localctx, 616, Fortran90Parser::RuleIncludeStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3372);
    match(Fortran90Parser::INCLUDE);
    setState(3373);
    match(Fortran90Parser::SCON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplicitStmtContext ------------------------------------------------------------------

Fortran90Parser::ImplicitStmtContext::ImplicitStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ImplicitStmtContext::IMPLICIT() {
  return getToken(Fortran90Parser::IMPLICIT, 0);
}

Fortran90Parser::ImplicitSpecListContext* Fortran90Parser::ImplicitStmtContext::implicitSpecList() {
  return getRuleContext<Fortran90Parser::ImplicitSpecListContext>(0);
}

tree::TerminalNode* Fortran90Parser::ImplicitStmtContext::NONE() {
  return getToken(Fortran90Parser::NONE, 0);
}


size_t Fortran90Parser::ImplicitStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleImplicitStmt;
}

void Fortran90Parser::ImplicitStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImplicitStmt(this);
}

void Fortran90Parser::ImplicitStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImplicitStmt(this);
}

Fortran90Parser::ImplicitStmtContext* Fortran90Parser::implicitStmt() {
  ImplicitStmtContext *_localctx = _tracker.createInstance<ImplicitStmtContext>(_ctx, getState());
  enterRule(_localctx, 618, Fortran90Parser::RuleImplicitStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3379);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3375);
      match(Fortran90Parser::IMPLICIT);
      setState(3376);
      implicitSpecList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3377);
      match(Fortran90Parser::IMPLICIT);
      setState(3378);
      match(Fortran90Parser::NONE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplicitSpecListContext ------------------------------------------------------------------

Fortran90Parser::ImplicitSpecListContext::ImplicitSpecListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ImplicitSpecContext *> Fortran90Parser::ImplicitSpecListContext::implicitSpec() {
  return getRuleContexts<Fortran90Parser::ImplicitSpecContext>();
}

Fortran90Parser::ImplicitSpecContext* Fortran90Parser::ImplicitSpecListContext::implicitSpec(size_t i) {
  return getRuleContext<Fortran90Parser::ImplicitSpecContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::ImplicitSpecListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::ImplicitSpecListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::ImplicitSpecListContext::getRuleIndex() const {
  return Fortran90Parser::RuleImplicitSpecList;
}

void Fortran90Parser::ImplicitSpecListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImplicitSpecList(this);
}

void Fortran90Parser::ImplicitSpecListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImplicitSpecList(this);
}

Fortran90Parser::ImplicitSpecListContext* Fortran90Parser::implicitSpecList() {
  ImplicitSpecListContext *_localctx = _tracker.createInstance<ImplicitSpecListContext>(_ctx, getState());
  enterRule(_localctx, 620, Fortran90Parser::RuleImplicitSpecList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3381);
    implicitSpec();
    setState(3386);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3382);
        match(Fortran90Parser::COMMA);
        setState(3383);
        implicitSpec(); 
      }
      setState(3388);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplicitSpecContext ------------------------------------------------------------------

Fortran90Parser::ImplicitSpecContext::ImplicitSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::TypeSpecContext* Fortran90Parser::ImplicitSpecContext::typeSpec() {
  return getRuleContext<Fortran90Parser::TypeSpecContext>(0);
}

Fortran90Parser::ImplicitRangesContext* Fortran90Parser::ImplicitSpecContext::implicitRanges() {
  return getRuleContext<Fortran90Parser::ImplicitRangesContext>(0);
}

tree::TerminalNode* Fortran90Parser::ImplicitSpecContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::ImplicitSpecContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::ImplicitSpecContext::getRuleIndex() const {
  return Fortran90Parser::RuleImplicitSpec;
}

void Fortran90Parser::ImplicitSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImplicitSpec(this);
}

void Fortran90Parser::ImplicitSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImplicitSpec(this);
}

Fortran90Parser::ImplicitSpecContext* Fortran90Parser::implicitSpec() {
  ImplicitSpecContext *_localctx = _tracker.createInstance<ImplicitSpecContext>(_ctx, getState());
  enterRule(_localctx, 622, Fortran90Parser::RuleImplicitSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3397);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3389);
      typeSpec();
      setState(3390);
      implicitRanges();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3392);
      typeSpec();
      setState(3393);
      match(Fortran90Parser::LPAREN);
      setState(3394);
      implicitRanges();
      setState(3395);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplicitRangesContext ------------------------------------------------------------------

Fortran90Parser::ImplicitRangesContext::ImplicitRangesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ImplicitRangeContext *> Fortran90Parser::ImplicitRangesContext::implicitRange() {
  return getRuleContexts<Fortran90Parser::ImplicitRangeContext>();
}

Fortran90Parser::ImplicitRangeContext* Fortran90Parser::ImplicitRangesContext::implicitRange(size_t i) {
  return getRuleContext<Fortran90Parser::ImplicitRangeContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::ImplicitRangesContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::ImplicitRangesContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::ImplicitRangesContext::getRuleIndex() const {
  return Fortran90Parser::RuleImplicitRanges;
}

void Fortran90Parser::ImplicitRangesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImplicitRanges(this);
}

void Fortran90Parser::ImplicitRangesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImplicitRanges(this);
}

Fortran90Parser::ImplicitRangesContext* Fortran90Parser::implicitRanges() {
  ImplicitRangesContext *_localctx = _tracker.createInstance<ImplicitRangesContext>(_ctx, getState());
  enterRule(_localctx, 624, Fortran90Parser::RuleImplicitRanges);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3400);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
    case 1: {
      setState(3399);
      implicitRange();
      break;
    }

    default:
      break;
    }
    setState(3406);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3402);
        match(Fortran90Parser::COMMA);
        setState(3403);
        implicitRange(); 
      }
      setState(3408);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplicitRangeContext ------------------------------------------------------------------

Fortran90Parser::ImplicitRangeContext::ImplicitRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Fortran90Parser::ImplicitRangeContext::NAME() {
  return getTokens(Fortran90Parser::NAME);
}

tree::TerminalNode* Fortran90Parser::ImplicitRangeContext::NAME(size_t i) {
  return getToken(Fortran90Parser::NAME, i);
}

tree::TerminalNode* Fortran90Parser::ImplicitRangeContext::MINUS() {
  return getToken(Fortran90Parser::MINUS, 0);
}


size_t Fortran90Parser::ImplicitRangeContext::getRuleIndex() const {
  return Fortran90Parser::RuleImplicitRange;
}

void Fortran90Parser::ImplicitRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImplicitRange(this);
}

void Fortran90Parser::ImplicitRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImplicitRange(this);
}

Fortran90Parser::ImplicitRangeContext* Fortran90Parser::implicitRange() {
  ImplicitRangeContext *_localctx = _tracker.createInstance<ImplicitRangeContext>(_ctx, getState());
  enterRule(_localctx, 626, Fortran90Parser::RuleImplicitRange);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3409);
    match(Fortran90Parser::NAME);
    setState(3410);
    match(Fortran90Parser::MINUS);
    setState(3411);
    match(Fortran90Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

Fortran90Parser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::Level5ExprContext* Fortran90Parser::ExpressionContext::level5Expr() {
  return getRuleContext<Fortran90Parser::Level5ExprContext>(0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::ExpressionContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

Fortran90Parser::DefinedBinaryOpContext* Fortran90Parser::ExpressionContext::definedBinaryOp() {
  return getRuleContext<Fortran90Parser::DefinedBinaryOpContext>(0);
}


size_t Fortran90Parser::ExpressionContext::getRuleIndex() const {
  return Fortran90Parser::RuleExpression;
}

void Fortran90Parser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void Fortran90Parser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


Fortran90Parser::ExpressionContext* Fortran90Parser::expression() {
   return expression(0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  Fortran90Parser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 628;
  enterRecursionRule(_localctx, 628, Fortran90Parser::RuleExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3414);
    level5Expr();
    _ctx->stop = _input->LT(-1);
    setState(3422);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleExpression);
        setState(3416);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3417);
        definedBinaryOp();
        setState(3418);
        level5Expr(); 
      }
      setState(3424);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DefinedBinaryOpContext ------------------------------------------------------------------

Fortran90Parser::DefinedBinaryOpContext::DefinedBinaryOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DefinedBinaryOpContext::DOP() {
  return getToken(Fortran90Parser::DOP, 0);
}


size_t Fortran90Parser::DefinedBinaryOpContext::getRuleIndex() const {
  return Fortran90Parser::RuleDefinedBinaryOp;
}

void Fortran90Parser::DefinedBinaryOpContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefinedBinaryOp(this);
}

void Fortran90Parser::DefinedBinaryOpContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefinedBinaryOp(this);
}

Fortran90Parser::DefinedBinaryOpContext* Fortran90Parser::definedBinaryOp() {
  DefinedBinaryOpContext *_localctx = _tracker.createInstance<DefinedBinaryOpContext>(_ctx, getState());
  enterRule(_localctx, 630, Fortran90Parser::RuleDefinedBinaryOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3425);
    match(Fortran90Parser::DOP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Level5ExprContext ------------------------------------------------------------------

Fortran90Parser::Level5ExprContext::Level5ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::EquivOperandContext *> Fortran90Parser::Level5ExprContext::equivOperand() {
  return getRuleContexts<Fortran90Parser::EquivOperandContext>();
}

Fortran90Parser::EquivOperandContext* Fortran90Parser::Level5ExprContext::equivOperand(size_t i) {
  return getRuleContext<Fortran90Parser::EquivOperandContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::Level5ExprContext::NEQV() {
  return getTokens(Fortran90Parser::NEQV);
}

tree::TerminalNode* Fortran90Parser::Level5ExprContext::NEQV(size_t i) {
  return getToken(Fortran90Parser::NEQV, i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::Level5ExprContext::EQV() {
  return getTokens(Fortran90Parser::EQV);
}

tree::TerminalNode* Fortran90Parser::Level5ExprContext::EQV(size_t i) {
  return getToken(Fortran90Parser::EQV, i);
}


size_t Fortran90Parser::Level5ExprContext::getRuleIndex() const {
  return Fortran90Parser::RuleLevel5Expr;
}

void Fortran90Parser::Level5ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevel5Expr(this);
}

void Fortran90Parser::Level5ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevel5Expr(this);
}

Fortran90Parser::Level5ExprContext* Fortran90Parser::level5Expr() {
  Level5ExprContext *_localctx = _tracker.createInstance<Level5ExprContext>(_ctx, getState());
  enterRule(_localctx, 632, Fortran90Parser::RuleLevel5Expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3427);
    equivOperand();
    setState(3432);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3428);
        _la = _input->LA(1);
        if (!(_la == Fortran90Parser::EQV

        || _la == Fortran90Parser::NEQV)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3429);
        equivOperand(); 
      }
      setState(3434);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EquivOperandContext ------------------------------------------------------------------

Fortran90Parser::EquivOperandContext::EquivOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::OrOperandContext *> Fortran90Parser::EquivOperandContext::orOperand() {
  return getRuleContexts<Fortran90Parser::OrOperandContext>();
}

Fortran90Parser::OrOperandContext* Fortran90Parser::EquivOperandContext::orOperand(size_t i) {
  return getRuleContext<Fortran90Parser::OrOperandContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::EquivOperandContext::LOR() {
  return getTokens(Fortran90Parser::LOR);
}

tree::TerminalNode* Fortran90Parser::EquivOperandContext::LOR(size_t i) {
  return getToken(Fortran90Parser::LOR, i);
}


size_t Fortran90Parser::EquivOperandContext::getRuleIndex() const {
  return Fortran90Parser::RuleEquivOperand;
}

void Fortran90Parser::EquivOperandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEquivOperand(this);
}

void Fortran90Parser::EquivOperandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEquivOperand(this);
}

Fortran90Parser::EquivOperandContext* Fortran90Parser::equivOperand() {
  EquivOperandContext *_localctx = _tracker.createInstance<EquivOperandContext>(_ctx, getState());
  enterRule(_localctx, 634, Fortran90Parser::RuleEquivOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3435);
    orOperand();
    setState(3440);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3436);
        match(Fortran90Parser::LOR);
        setState(3437);
        orOperand(); 
      }
      setState(3442);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrOperandContext ------------------------------------------------------------------

Fortran90Parser::OrOperandContext::OrOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::AndOperandContext *> Fortran90Parser::OrOperandContext::andOperand() {
  return getRuleContexts<Fortran90Parser::AndOperandContext>();
}

Fortran90Parser::AndOperandContext* Fortran90Parser::OrOperandContext::andOperand(size_t i) {
  return getRuleContext<Fortran90Parser::AndOperandContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::OrOperandContext::LAND() {
  return getTokens(Fortran90Parser::LAND);
}

tree::TerminalNode* Fortran90Parser::OrOperandContext::LAND(size_t i) {
  return getToken(Fortran90Parser::LAND, i);
}


size_t Fortran90Parser::OrOperandContext::getRuleIndex() const {
  return Fortran90Parser::RuleOrOperand;
}

void Fortran90Parser::OrOperandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrOperand(this);
}

void Fortran90Parser::OrOperandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrOperand(this);
}

Fortran90Parser::OrOperandContext* Fortran90Parser::orOperand() {
  OrOperandContext *_localctx = _tracker.createInstance<OrOperandContext>(_ctx, getState());
  enterRule(_localctx, 636, Fortran90Parser::RuleOrOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3443);
    andOperand();
    setState(3448);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3444);
        match(Fortran90Parser::LAND);
        setState(3445);
        andOperand(); 
      }
      setState(3450);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndOperandContext ------------------------------------------------------------------

Fortran90Parser::AndOperandContext::AndOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::Level4ExprContext* Fortran90Parser::AndOperandContext::level4Expr() {
  return getRuleContext<Fortran90Parser::Level4ExprContext>(0);
}

tree::TerminalNode* Fortran90Parser::AndOperandContext::LNOT() {
  return getToken(Fortran90Parser::LNOT, 0);
}


size_t Fortran90Parser::AndOperandContext::getRuleIndex() const {
  return Fortran90Parser::RuleAndOperand;
}

void Fortran90Parser::AndOperandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAndOperand(this);
}

void Fortran90Parser::AndOperandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAndOperand(this);
}

Fortran90Parser::AndOperandContext* Fortran90Parser::andOperand() {
  AndOperandContext *_localctx = _tracker.createInstance<AndOperandContext>(_ctx, getState());
  enterRule(_localctx, 638, Fortran90Parser::RuleAndOperand);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::LNOT) {
      setState(3451);
      match(Fortran90Parser::LNOT);
    }
    setState(3454);
    level4Expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelOpContext ------------------------------------------------------------------

Fortran90Parser::RelOpContext::RelOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::RelOpContext::LT() {
  return getToken(Fortran90Parser::LT, 0);
}

tree::TerminalNode* Fortran90Parser::RelOpContext::LE() {
  return getToken(Fortran90Parser::LE, 0);
}

tree::TerminalNode* Fortran90Parser::RelOpContext::EQ() {
  return getToken(Fortran90Parser::EQ, 0);
}

tree::TerminalNode* Fortran90Parser::RelOpContext::NE() {
  return getToken(Fortran90Parser::NE, 0);
}

tree::TerminalNode* Fortran90Parser::RelOpContext::GT() {
  return getToken(Fortran90Parser::GT, 0);
}

tree::TerminalNode* Fortran90Parser::RelOpContext::GE() {
  return getToken(Fortran90Parser::GE, 0);
}

tree::TerminalNode* Fortran90Parser::RelOpContext::OP() {
  return getToken(Fortran90Parser::OP, 0);
}


size_t Fortran90Parser::RelOpContext::getRuleIndex() const {
  return Fortran90Parser::RuleRelOp;
}

void Fortran90Parser::RelOpContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelOp(this);
}

void Fortran90Parser::RelOpContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelOp(this);
}

Fortran90Parser::RelOpContext* Fortran90Parser::relOp() {
  RelOpContext *_localctx = _tracker.createInstance<RelOpContext>(_ctx, getState());
  enterRule(_localctx, 640, Fortran90Parser::RuleRelOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3456);
    _la = _input->LA(1);
    if (!(_la == Fortran90Parser::OP || ((((_la - 144) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 144)) & 63) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Level4ExprContext ------------------------------------------------------------------

Fortran90Parser::Level4ExprContext::Level4ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::Level3ExprContext *> Fortran90Parser::Level4ExprContext::level3Expr() {
  return getRuleContexts<Fortran90Parser::Level3ExprContext>();
}

Fortran90Parser::Level3ExprContext* Fortran90Parser::Level4ExprContext::level3Expr(size_t i) {
  return getRuleContext<Fortran90Parser::Level3ExprContext>(i);
}

std::vector<Fortran90Parser::RelOpContext *> Fortran90Parser::Level4ExprContext::relOp() {
  return getRuleContexts<Fortran90Parser::RelOpContext>();
}

Fortran90Parser::RelOpContext* Fortran90Parser::Level4ExprContext::relOp(size_t i) {
  return getRuleContext<Fortran90Parser::RelOpContext>(i);
}


size_t Fortran90Parser::Level4ExprContext::getRuleIndex() const {
  return Fortran90Parser::RuleLevel4Expr;
}

void Fortran90Parser::Level4ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevel4Expr(this);
}

void Fortran90Parser::Level4ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevel4Expr(this);
}

Fortran90Parser::Level4ExprContext* Fortran90Parser::level4Expr() {
  Level4ExprContext *_localctx = _tracker.createInstance<Level4ExprContext>(_ctx, getState());
  enterRule(_localctx, 642, Fortran90Parser::RuleLevel4Expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3458);
    level3Expr();
    setState(3464);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3459);
        relOp();
        setState(3460);
        level3Expr(); 
      }
      setState(3466);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Level3ExprContext ------------------------------------------------------------------

Fortran90Parser::Level3ExprContext::Level3ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::Level2ExprContext *> Fortran90Parser::Level3ExprContext::level2Expr() {
  return getRuleContexts<Fortran90Parser::Level2ExprContext>();
}

Fortran90Parser::Level2ExprContext* Fortran90Parser::Level3ExprContext::level2Expr(size_t i) {
  return getRuleContext<Fortran90Parser::Level2ExprContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::Level3ExprContext::DIV() {
  return getTokens(Fortran90Parser::DIV);
}

tree::TerminalNode* Fortran90Parser::Level3ExprContext::DIV(size_t i) {
  return getToken(Fortran90Parser::DIV, i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::Level3ExprContext::SPOFF() {
  return getTokens(Fortran90Parser::SPOFF);
}

tree::TerminalNode* Fortran90Parser::Level3ExprContext::SPOFF(size_t i) {
  return getToken(Fortran90Parser::SPOFF, i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::Level3ExprContext::SPON() {
  return getTokens(Fortran90Parser::SPON);
}

tree::TerminalNode* Fortran90Parser::Level3ExprContext::SPON(size_t i) {
  return getToken(Fortran90Parser::SPON, i);
}


size_t Fortran90Parser::Level3ExprContext::getRuleIndex() const {
  return Fortran90Parser::RuleLevel3Expr;
}

void Fortran90Parser::Level3ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevel3Expr(this);
}

void Fortran90Parser::Level3ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevel3Expr(this);
}

Fortran90Parser::Level3ExprContext* Fortran90Parser::level3Expr() {
  Level3ExprContext *_localctx = _tracker.createInstance<Level3ExprContext>(_ctx, getState());
  enterRule(_localctx, 644, Fortran90Parser::RuleLevel3Expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3467);
    level2Expr();
    setState(3479);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3468);
        match(Fortran90Parser::DIV);
        setState(3470);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Fortran90Parser::SPOFF) {
          setState(3469);
          match(Fortran90Parser::SPOFF);
        }
        setState(3472);
        match(Fortran90Parser::DIV);
        setState(3474);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx)) {
        case 1: {
          setState(3473);
          match(Fortran90Parser::SPON);
          break;
        }

        default:
          break;
        }
        setState(3476);
        level2Expr(); 
      }
      setState(3481);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Level2ExprContext ------------------------------------------------------------------

Fortran90Parser::Level2ExprContext::Level2ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::AddOperandContext *> Fortran90Parser::Level2ExprContext::addOperand() {
  return getRuleContexts<Fortran90Parser::AddOperandContext>();
}

Fortran90Parser::AddOperandContext* Fortran90Parser::Level2ExprContext::addOperand(size_t i) {
  return getRuleContext<Fortran90Parser::AddOperandContext>(i);
}

Fortran90Parser::SignContext* Fortran90Parser::Level2ExprContext::sign() {
  return getRuleContext<Fortran90Parser::SignContext>(0);
}

std::vector<tree::TerminalNode *> Fortran90Parser::Level2ExprContext::PLUS() {
  return getTokens(Fortran90Parser::PLUS);
}

tree::TerminalNode* Fortran90Parser::Level2ExprContext::PLUS(size_t i) {
  return getToken(Fortran90Parser::PLUS, i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::Level2ExprContext::MINUS() {
  return getTokens(Fortran90Parser::MINUS);
}

tree::TerminalNode* Fortran90Parser::Level2ExprContext::MINUS(size_t i) {
  return getToken(Fortran90Parser::MINUS, i);
}


size_t Fortran90Parser::Level2ExprContext::getRuleIndex() const {
  return Fortran90Parser::RuleLevel2Expr;
}

void Fortran90Parser::Level2ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevel2Expr(this);
}

void Fortran90Parser::Level2ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevel2Expr(this);
}

Fortran90Parser::Level2ExprContext* Fortran90Parser::level2Expr() {
  Level2ExprContext *_localctx = _tracker.createInstance<Level2ExprContext>(_ctx, getState());
  enterRule(_localctx, 646, Fortran90Parser::RuleLevel2Expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3483);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Fortran90Parser::MINUS

    || _la == Fortran90Parser::PLUS) {
      setState(3482);
      sign();
    }
    setState(3485);
    addOperand();
    setState(3490);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3486);
        _la = _input->LA(1);
        if (!(_la == Fortran90Parser::MINUS

        || _la == Fortran90Parser::PLUS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3487);
        addOperand(); 
      }
      setState(3492);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SignContext ------------------------------------------------------------------

Fortran90Parser::SignContext::SignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SignContext::PLUS() {
  return getToken(Fortran90Parser::PLUS, 0);
}

tree::TerminalNode* Fortran90Parser::SignContext::MINUS() {
  return getToken(Fortran90Parser::MINUS, 0);
}


size_t Fortran90Parser::SignContext::getRuleIndex() const {
  return Fortran90Parser::RuleSign;
}

void Fortran90Parser::SignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSign(this);
}

void Fortran90Parser::SignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSign(this);
}

Fortran90Parser::SignContext* Fortran90Parser::sign() {
  SignContext *_localctx = _tracker.createInstance<SignContext>(_ctx, getState());
  enterRule(_localctx, 648, Fortran90Parser::RuleSign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3493);
    _la = _input->LA(1);
    if (!(_la == Fortran90Parser::MINUS

    || _la == Fortran90Parser::PLUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddOperandContext ------------------------------------------------------------------

Fortran90Parser::AddOperandContext::AddOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::MultOperandContext *> Fortran90Parser::AddOperandContext::multOperand() {
  return getRuleContexts<Fortran90Parser::MultOperandContext>();
}

Fortran90Parser::MultOperandContext* Fortran90Parser::AddOperandContext::multOperand(size_t i) {
  return getRuleContext<Fortran90Parser::MultOperandContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::AddOperandContext::STAR() {
  return getTokens(Fortran90Parser::STAR);
}

tree::TerminalNode* Fortran90Parser::AddOperandContext::STAR(size_t i) {
  return getToken(Fortran90Parser::STAR, i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::AddOperandContext::DIV() {
  return getTokens(Fortran90Parser::DIV);
}

tree::TerminalNode* Fortran90Parser::AddOperandContext::DIV(size_t i) {
  return getToken(Fortran90Parser::DIV, i);
}


size_t Fortran90Parser::AddOperandContext::getRuleIndex() const {
  return Fortran90Parser::RuleAddOperand;
}

void Fortran90Parser::AddOperandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAddOperand(this);
}

void Fortran90Parser::AddOperandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAddOperand(this);
}

Fortran90Parser::AddOperandContext* Fortran90Parser::addOperand() {
  AddOperandContext *_localctx = _tracker.createInstance<AddOperandContext>(_ctx, getState());
  enterRule(_localctx, 650, Fortran90Parser::RuleAddOperand);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3495);
    multOperand();
    setState(3500);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3496);
        _la = _input->LA(1);
        if (!(_la == Fortran90Parser::DIV

        || _la == Fortran90Parser::STAR)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3497);
        multOperand(); 
      }
      setState(3502);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultOperandContext ------------------------------------------------------------------

Fortran90Parser::MultOperandContext::MultOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::Level1ExprContext *> Fortran90Parser::MultOperandContext::level1Expr() {
  return getRuleContexts<Fortran90Parser::Level1ExprContext>();
}

Fortran90Parser::Level1ExprContext* Fortran90Parser::MultOperandContext::level1Expr(size_t i) {
  return getRuleContext<Fortran90Parser::Level1ExprContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::MultOperandContext::POWER() {
  return getTokens(Fortran90Parser::POWER);
}

tree::TerminalNode* Fortran90Parser::MultOperandContext::POWER(size_t i) {
  return getToken(Fortran90Parser::POWER, i);
}


size_t Fortran90Parser::MultOperandContext::getRuleIndex() const {
  return Fortran90Parser::RuleMultOperand;
}

void Fortran90Parser::MultOperandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultOperand(this);
}

void Fortran90Parser::MultOperandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultOperand(this);
}

Fortran90Parser::MultOperandContext* Fortran90Parser::multOperand() {
  MultOperandContext *_localctx = _tracker.createInstance<MultOperandContext>(_ctx, getState());
  enterRule(_localctx, 652, Fortran90Parser::RuleMultOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3503);
    level1Expr();
    setState(3508);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3504);
        match(Fortran90Parser::POWER);
        setState(3505);
        level1Expr(); 
      }
      setState(3510);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Level1ExprContext ------------------------------------------------------------------

Fortran90Parser::Level1ExprContext::Level1ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::PrimaryContext* Fortran90Parser::Level1ExprContext::primary() {
  return getRuleContext<Fortran90Parser::PrimaryContext>(0);
}

Fortran90Parser::DefinedUnaryOpContext* Fortran90Parser::Level1ExprContext::definedUnaryOp() {
  return getRuleContext<Fortran90Parser::DefinedUnaryOpContext>(0);
}


size_t Fortran90Parser::Level1ExprContext::getRuleIndex() const {
  return Fortran90Parser::RuleLevel1Expr;
}

void Fortran90Parser::Level1ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevel1Expr(this);
}

void Fortran90Parser::Level1ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevel1Expr(this);
}

Fortran90Parser::Level1ExprContext* Fortran90Parser::level1Expr() {
  Level1ExprContext *_localctx = _tracker.createInstance<Level1ExprContext>(_ctx, getState());
  enterRule(_localctx, 654, Fortran90Parser::RuleLevel1Expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3515);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::CONTAINS:
      case Fortran90Parser::MODULE:
      case Fortran90Parser::ENDMODULE:
      case Fortran90Parser::PROGRAM:
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::BLOCK:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::ENDINTERFACE:
      case Fortran90Parser::PROCEDURE:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::IN:
      case Fortran90Parser::OUT:
      case Fortran90Parser::INOUT:
      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::USE:
      case Fortran90Parser::ONLY:
      case Fortran90Parser::ASSIGNMENT:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::ELSEWHERE:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::BLOCKDATA:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::NONE:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::THEN:
      case Fortran90Parser::ELSE:
      case Fortran90Parser::ENDIF:
      case Fortran90Parser::RESULT:
      case Fortran90Parser::ELSEIF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::ENDWHERE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::ENDSELECT:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::CASE:
      case Fortran90Parser::DEFAULT:
      case Fortran90Parser::DIRECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::REC:
      case Fortran90Parser::ENDDO:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::FMT:
      case Fortran90Parser::UNIT:
      case Fortran90Parser::PAD:
      case Fortran90Parser::ACTION:
      case Fortran90Parser::DELIM:
      case Fortran90Parser::IOLENGTH:
      case Fortran90Parser::READWRITE:
      case Fortran90Parser::ERR:
      case Fortran90Parser::SIZE:
      case Fortran90Parser::ADVANCE:
      case Fortran90Parser::NML:
      case Fortran90Parser::IOSTAT:
      case Fortran90Parser::FORMAT:
      case Fortran90Parser::LET:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::IOSTART:
      case Fortran90Parser::SEQUENTIAL:
      case Fortran90Parser::LABEL:
      case Fortran90Parser::FILE:
      case Fortran90Parser::STATUS:
      case Fortran90Parser::ACCESS:
      case Fortran90Parser::POSITION:
      case Fortran90Parser::FORM:
      case Fortran90Parser::RECL:
      case Fortran90Parser::EXIST:
      case Fortran90Parser::OPENED:
      case Fortran90Parser::NUMBER:
      case Fortran90Parser::NAMED:
      case Fortran90Parser::NAME_:
      case Fortran90Parser::FORMATTED:
      case Fortran90Parser::UNFORMATTED:
      case Fortran90Parser::NEXTREC:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ENDBLOCKDATA:
      case Fortran90Parser::ENDBLOCK:
      case Fortran90Parser::KIND:
      case Fortran90Parser::LEN:
      case Fortran90Parser::LPAREN:
      case Fortran90Parser::WHILE:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::STAT:
      case Fortran90Parser::TRUE:
      case Fortran90Parser::FALSE:
      case Fortran90Parser::CCON:
      case Fortran90Parser::HOLLERITH:
      case Fortran90Parser::CONCATOP:
      case Fortran90Parser::CTRLDIRECT:
      case Fortran90Parser::CTRLREC:
      case Fortran90Parser::TO:
      case Fortran90Parser::SUBPROGRAMBLOCK:
      case Fortran90Parser::DOBLOCK:
      case Fortran90Parser::AIF:
      case Fortran90Parser::THENBLOCK:
      case Fortran90Parser::ELSEBLOCK:
      case Fortran90Parser::CODEROOT:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::PRECISION:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::OBRACKETSLASH:
      case Fortran90Parser::SCON:
      case Fortran90Parser::RDCON:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ENDTYPE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::SPOFF:
      case Fortran90Parser::SPON:
      case Fortran90Parser::ICON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(3511);
        primary();
        break;
      }

      case Fortran90Parser::DOP: {
        enterOuterAlt(_localctx, 2);
        setState(3512);
        definedUnaryOp();
        setState(3513);
        primary();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefinedUnaryOpContext ------------------------------------------------------------------

Fortran90Parser::DefinedUnaryOpContext::DefinedUnaryOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::DefinedUnaryOpContext::DOP() {
  return getToken(Fortran90Parser::DOP, 0);
}


size_t Fortran90Parser::DefinedUnaryOpContext::getRuleIndex() const {
  return Fortran90Parser::RuleDefinedUnaryOp;
}

void Fortran90Parser::DefinedUnaryOpContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefinedUnaryOp(this);
}

void Fortran90Parser::DefinedUnaryOpContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefinedUnaryOp(this);
}

Fortran90Parser::DefinedUnaryOpContext* Fortran90Parser::definedUnaryOp() {
  DefinedUnaryOpContext *_localctx = _tracker.createInstance<DefinedUnaryOpContext>(_ctx, getState());
  enterRule(_localctx, 656, Fortran90Parser::RuleDefinedUnaryOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3517);
    match(Fortran90Parser::DOP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

Fortran90Parser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::UnsignedArithmeticConstantContext* Fortran90Parser::PrimaryContext::unsignedArithmeticConstant() {
  return getRuleContext<Fortran90Parser::UnsignedArithmeticConstantContext>(0);
}

Fortran90Parser::NameDataRefContext* Fortran90Parser::PrimaryContext::nameDataRef() {
  return getRuleContext<Fortran90Parser::NameDataRefContext>(0);
}

Fortran90Parser::FunctionReferenceContext* Fortran90Parser::PrimaryContext::functionReference() {
  return getRuleContext<Fortran90Parser::FunctionReferenceContext>(0);
}

tree::TerminalNode* Fortran90Parser::PrimaryContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::PrimaryContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::PrimaryContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::PrimaryContext::SCON() {
  return getToken(Fortran90Parser::SCON, 0);
}

Fortran90Parser::LogicalConstantContext* Fortran90Parser::PrimaryContext::logicalConstant() {
  return getRuleContext<Fortran90Parser::LogicalConstantContext>(0);
}

Fortran90Parser::ArrayConstructorContext* Fortran90Parser::PrimaryContext::arrayConstructor() {
  return getRuleContext<Fortran90Parser::ArrayConstructorContext>(0);
}


size_t Fortran90Parser::PrimaryContext::getRuleIndex() const {
  return Fortran90Parser::RulePrimary;
}

void Fortran90Parser::PrimaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary(this);
}

void Fortran90Parser::PrimaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary(this);
}

Fortran90Parser::PrimaryContext* Fortran90Parser::primary() {
  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
  enterRule(_localctx, 658, Fortran90Parser::RulePrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3529);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3519);
      unsignedArithmeticConstant();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3520);
      nameDataRef();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3521);
      functionReference();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3522);
      match(Fortran90Parser::LPAREN);
      setState(3523);
      expression(0);
      setState(3524);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3526);
      match(Fortran90Parser::SCON);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3527);
      logicalConstant();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3528);
      arrayConstructor();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayConstructorContext ------------------------------------------------------------------

Fortran90Parser::ArrayConstructorContext::ArrayConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ArrayConstructorContext::OBRACKETSLASH() {
  return getToken(Fortran90Parser::OBRACKETSLASH, 0);
}

Fortran90Parser::AcValueListContext* Fortran90Parser::ArrayConstructorContext::acValueList() {
  return getRuleContext<Fortran90Parser::AcValueListContext>(0);
}

tree::TerminalNode* Fortran90Parser::ArrayConstructorContext::CBRACKETSLASH() {
  return getToken(Fortran90Parser::CBRACKETSLASH, 0);
}


size_t Fortran90Parser::ArrayConstructorContext::getRuleIndex() const {
  return Fortran90Parser::RuleArrayConstructor;
}

void Fortran90Parser::ArrayConstructorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayConstructor(this);
}

void Fortran90Parser::ArrayConstructorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayConstructor(this);
}

Fortran90Parser::ArrayConstructorContext* Fortran90Parser::arrayConstructor() {
  ArrayConstructorContext *_localctx = _tracker.createInstance<ArrayConstructorContext>(_ctx, getState());
  enterRule(_localctx, 660, Fortran90Parser::RuleArrayConstructor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3531);
    match(Fortran90Parser::OBRACKETSLASH);
    setState(3532);
    acValueList();
    setState(3533);
    match(Fortran90Parser::CBRACKETSLASH);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AcValueListContext ------------------------------------------------------------------

Fortran90Parser::AcValueListContext::AcValueListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExpressionContext* Fortran90Parser::AcValueListContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

Fortran90Parser::AcValueList1Context* Fortran90Parser::AcValueListContext::acValueList1() {
  return getRuleContext<Fortran90Parser::AcValueList1Context>(0);
}


size_t Fortran90Parser::AcValueListContext::getRuleIndex() const {
  return Fortran90Parser::RuleAcValueList;
}

void Fortran90Parser::AcValueListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAcValueList(this);
}

void Fortran90Parser::AcValueListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAcValueList(this);
}

Fortran90Parser::AcValueListContext* Fortran90Parser::acValueList() {
  AcValueListContext *_localctx = _tracker.createInstance<AcValueListContext>(_ctx, getState());
  enterRule(_localctx, 662, Fortran90Parser::RuleAcValueList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3537);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3535);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3536);
      acValueList1(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AcValueList1Context ------------------------------------------------------------------

Fortran90Parser::AcValueList1Context::AcValueList1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::ExpressionContext *> Fortran90Parser::AcValueList1Context::expression() {
  return getRuleContexts<Fortran90Parser::ExpressionContext>();
}

Fortran90Parser::ExpressionContext* Fortran90Parser::AcValueList1Context::expression(size_t i) {
  return getRuleContext<Fortran90Parser::ExpressionContext>(i);
}

tree::TerminalNode* Fortran90Parser::AcValueList1Context::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::AcImpliedDoContext* Fortran90Parser::AcValueList1Context::acImpliedDo() {
  return getRuleContext<Fortran90Parser::AcImpliedDoContext>(0);
}

Fortran90Parser::AcValueList1Context* Fortran90Parser::AcValueList1Context::acValueList1() {
  return getRuleContext<Fortran90Parser::AcValueList1Context>(0);
}


size_t Fortran90Parser::AcValueList1Context::getRuleIndex() const {
  return Fortran90Parser::RuleAcValueList1;
}

void Fortran90Parser::AcValueList1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAcValueList1(this);
}

void Fortran90Parser::AcValueList1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAcValueList1(this);
}


Fortran90Parser::AcValueList1Context* Fortran90Parser::acValueList1() {
   return acValueList1(0);
}

Fortran90Parser::AcValueList1Context* Fortran90Parser::acValueList1(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::AcValueList1Context *_localctx = _tracker.createInstance<AcValueList1Context>(_ctx, parentState);
  Fortran90Parser::AcValueList1Context *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 664;
  enterRecursionRule(_localctx, 664, Fortran90Parser::RuleAcValueList1, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3549);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx)) {
    case 1: {
      setState(3540);
      expression(0);
      setState(3541);
      match(Fortran90Parser::COMMA);
      setState(3542);
      expression(0);
      break;
    }

    case 2: {
      setState(3544);
      expression(0);
      setState(3545);
      match(Fortran90Parser::COMMA);
      setState(3546);
      acImpliedDo();
      break;
    }

    case 3: {
      setState(3548);
      acImpliedDo();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(3559);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3557);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<AcValueList1Context>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleAcValueList1);
          setState(3551);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3552);
          match(Fortran90Parser::COMMA);
          setState(3553);
          expression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<AcValueList1Context>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleAcValueList1);
          setState(3554);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(3555);
          match(Fortran90Parser::COMMA);
          setState(3556);
          acImpliedDo();
          break;
        }

        default:
          break;
        } 
      }
      setState(3561);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AcImpliedDoContext ------------------------------------------------------------------

Fortran90Parser::AcImpliedDoContext::AcImpliedDoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::AcImpliedDoContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

std::vector<Fortran90Parser::ExpressionContext *> Fortran90Parser::AcImpliedDoContext::expression() {
  return getRuleContexts<Fortran90Parser::ExpressionContext>();
}

Fortran90Parser::ExpressionContext* Fortran90Parser::AcImpliedDoContext::expression(size_t i) {
  return getRuleContext<Fortran90Parser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::AcImpliedDoContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::AcImpliedDoContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}

Fortran90Parser::ImpliedDoVariableContext* Fortran90Parser::AcImpliedDoContext::impliedDoVariable() {
  return getRuleContext<Fortran90Parser::ImpliedDoVariableContext>(0);
}

tree::TerminalNode* Fortran90Parser::AcImpliedDoContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

tree::TerminalNode* Fortran90Parser::AcImpliedDoContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::AcImpliedDoContext* Fortran90Parser::AcImpliedDoContext::acImpliedDo() {
  return getRuleContext<Fortran90Parser::AcImpliedDoContext>(0);
}


size_t Fortran90Parser::AcImpliedDoContext::getRuleIndex() const {
  return Fortran90Parser::RuleAcImpliedDo;
}

void Fortran90Parser::AcImpliedDoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAcImpliedDo(this);
}

void Fortran90Parser::AcImpliedDoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAcImpliedDo(this);
}

Fortran90Parser::AcImpliedDoContext* Fortran90Parser::acImpliedDo() {
  AcImpliedDoContext *_localctx = _tracker.createInstance<AcImpliedDoContext>(_ctx, getState());
  enterRule(_localctx, 666, Fortran90Parser::RuleAcImpliedDo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3606);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3562);
      match(Fortran90Parser::LPAREN);
      setState(3563);
      expression(0);
      setState(3564);
      match(Fortran90Parser::COMMA);
      setState(3565);
      impliedDoVariable();
      setState(3566);
      match(Fortran90Parser::ASSIGN);
      setState(3567);
      expression(0);
      setState(3568);
      match(Fortran90Parser::COMMA);
      setState(3569);
      expression(0);
      setState(3570);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3572);
      match(Fortran90Parser::LPAREN);
      setState(3573);
      expression(0);
      setState(3574);
      match(Fortran90Parser::COMMA);
      setState(3575);
      impliedDoVariable();
      setState(3576);
      match(Fortran90Parser::ASSIGN);
      setState(3577);
      expression(0);
      setState(3578);
      match(Fortran90Parser::COMMA);
      setState(3579);
      expression(0);
      setState(3580);
      match(Fortran90Parser::COMMA);
      setState(3581);
      expression(0);
      setState(3582);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3584);
      match(Fortran90Parser::LPAREN);
      setState(3585);
      acImpliedDo();
      setState(3586);
      match(Fortran90Parser::COMMA);
      setState(3587);
      impliedDoVariable();
      setState(3588);
      match(Fortran90Parser::ASSIGN);
      setState(3589);
      expression(0);
      setState(3590);
      match(Fortran90Parser::COMMA);
      setState(3591);
      expression(0);
      setState(3592);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3594);
      match(Fortran90Parser::LPAREN);
      setState(3595);
      acImpliedDo();
      setState(3596);
      match(Fortran90Parser::COMMA);
      setState(3597);
      impliedDoVariable();
      setState(3598);
      match(Fortran90Parser::ASSIGN);
      setState(3599);
      expression(0);
      setState(3600);
      match(Fortran90Parser::COMMA);
      setState(3601);
      expression(0);
      setState(3602);
      match(Fortran90Parser::COMMA);
      setState(3603);
      expression(0);
      setState(3604);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionReferenceContext ------------------------------------------------------------------

Fortran90Parser::FunctionReferenceContext::FunctionReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::FunctionReferenceContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::FunctionReferenceContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

tree::TerminalNode* Fortran90Parser::FunctionReferenceContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::FunctionArgListContext* Fortran90Parser::FunctionReferenceContext::functionArgList() {
  return getRuleContext<Fortran90Parser::FunctionArgListContext>(0);
}


size_t Fortran90Parser::FunctionReferenceContext::getRuleIndex() const {
  return Fortran90Parser::RuleFunctionReference;
}

void Fortran90Parser::FunctionReferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionReference(this);
}

void Fortran90Parser::FunctionReferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionReference(this);
}

Fortran90Parser::FunctionReferenceContext* Fortran90Parser::functionReference() {
  FunctionReferenceContext *_localctx = _tracker.createInstance<FunctionReferenceContext>(_ctx, getState());
  enterRule(_localctx, 668, Fortran90Parser::RuleFunctionReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3616);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3608);
      match(Fortran90Parser::NAME);
      setState(3609);
      match(Fortran90Parser::LPAREN);
      setState(3610);
      match(Fortran90Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3611);
      match(Fortran90Parser::NAME);
      setState(3612);
      match(Fortran90Parser::LPAREN);
      setState(3613);
      functionArgList(0);
      setState(3614);
      match(Fortran90Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionArgListContext ------------------------------------------------------------------

Fortran90Parser::FunctionArgListContext::FunctionArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::FunctionArgContext* Fortran90Parser::FunctionArgListContext::functionArg() {
  return getRuleContext<Fortran90Parser::FunctionArgContext>(0);
}

Fortran90Parser::SectionSubscriptListContext* Fortran90Parser::FunctionArgListContext::sectionSubscriptList() {
  return getRuleContext<Fortran90Parser::SectionSubscriptListContext>(0);
}

tree::TerminalNode* Fortran90Parser::FunctionArgListContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

Fortran90Parser::FunctionArgListContext* Fortran90Parser::FunctionArgListContext::functionArgList() {
  return getRuleContext<Fortran90Parser::FunctionArgListContext>(0);
}


size_t Fortran90Parser::FunctionArgListContext::getRuleIndex() const {
  return Fortran90Parser::RuleFunctionArgList;
}

void Fortran90Parser::FunctionArgListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionArgList(this);
}

void Fortran90Parser::FunctionArgListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionArgList(this);
}


Fortran90Parser::FunctionArgListContext* Fortran90Parser::functionArgList() {
   return functionArgList(0);
}

Fortran90Parser::FunctionArgListContext* Fortran90Parser::functionArgList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Fortran90Parser::FunctionArgListContext *_localctx = _tracker.createInstance<FunctionArgListContext>(_ctx, parentState);
  Fortran90Parser::FunctionArgListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 670;
  enterRecursionRule(_localctx, 670, Fortran90Parser::RuleFunctionArgList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3624);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx)) {
    case 1: {
      setState(3619);
      functionArg();
      break;
    }

    case 2: {
      setState(3620);
      sectionSubscriptList();
      setState(3621);
      match(Fortran90Parser::COMMA);
      setState(3622);
      functionArg();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(3631);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<FunctionArgListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleFunctionArgList);
        setState(3626);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(3627);
        match(Fortran90Parser::COMMA);
        setState(3628);
        functionArg(); 
      }
      setState(3633);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FunctionArgContext ------------------------------------------------------------------

Fortran90Parser::FunctionArgContext::FunctionArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::FunctionArgContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}

tree::TerminalNode* Fortran90Parser::FunctionArgContext::ASSIGN() {
  return getToken(Fortran90Parser::ASSIGN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::FunctionArgContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::FunctionArgContext::getRuleIndex() const {
  return Fortran90Parser::RuleFunctionArg;
}

void Fortran90Parser::FunctionArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionArg(this);
}

void Fortran90Parser::FunctionArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionArg(this);
}

Fortran90Parser::FunctionArgContext* Fortran90Parser::functionArg() {
  FunctionArgContext *_localctx = _tracker.createInstance<FunctionArgContext>(_ctx, getState());
  enterRule(_localctx, 672, Fortran90Parser::RuleFunctionArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3634);
    match(Fortran90Parser::NAME);
    setState(3635);
    match(Fortran90Parser::ASSIGN);
    setState(3636);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameDataRefContext ------------------------------------------------------------------

Fortran90Parser::NameDataRefContext::NameDataRefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::NameContext* Fortran90Parser::NameDataRefContext::name() {
  return getRuleContext<Fortran90Parser::NameContext>(0);
}

std::vector<Fortran90Parser::ComplexDataRefTailContext *> Fortran90Parser::NameDataRefContext::complexDataRefTail() {
  return getRuleContexts<Fortran90Parser::ComplexDataRefTailContext>();
}

Fortran90Parser::ComplexDataRefTailContext* Fortran90Parser::NameDataRefContext::complexDataRefTail(size_t i) {
  return getRuleContext<Fortran90Parser::ComplexDataRefTailContext>(i);
}


size_t Fortran90Parser::NameDataRefContext::getRuleIndex() const {
  return Fortran90Parser::RuleNameDataRef;
}

void Fortran90Parser::NameDataRefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNameDataRef(this);
}

void Fortran90Parser::NameDataRefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNameDataRef(this);
}

Fortran90Parser::NameDataRefContext* Fortran90Parser::nameDataRef() {
  NameDataRefContext *_localctx = _tracker.createInstance<NameDataRefContext>(_ctx, getState());
  enterRule(_localctx, 674, Fortran90Parser::RuleNameDataRef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3638);
    name();
    setState(3642);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3639);
        complexDataRefTail(); 
      }
      setState(3644);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComplexDataRefTailContext ------------------------------------------------------------------

Fortran90Parser::ComplexDataRefTailContext::ComplexDataRefTailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::SectionSubscriptRefContext* Fortran90Parser::ComplexDataRefTailContext::sectionSubscriptRef() {
  return getRuleContext<Fortran90Parser::SectionSubscriptRefContext>(0);
}

tree::TerminalNode* Fortran90Parser::ComplexDataRefTailContext::PCT() {
  return getToken(Fortran90Parser::PCT, 0);
}

tree::TerminalNode* Fortran90Parser::ComplexDataRefTailContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::ComplexDataRefTailContext::getRuleIndex() const {
  return Fortran90Parser::RuleComplexDataRefTail;
}

void Fortran90Parser::ComplexDataRefTailContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComplexDataRefTail(this);
}

void Fortran90Parser::ComplexDataRefTailContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComplexDataRefTail(this);
}

Fortran90Parser::ComplexDataRefTailContext* Fortran90Parser::complexDataRefTail() {
  ComplexDataRefTailContext *_localctx = _tracker.createInstance<ComplexDataRefTailContext>(_ctx, getState());
  enterRule(_localctx, 676, Fortran90Parser::RuleComplexDataRefTail);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3648);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::LPAREN: {
        enterOuterAlt(_localctx, 1);
        setState(3645);
        sectionSubscriptRef();
        break;
      }

      case Fortran90Parser::PCT: {
        enterOuterAlt(_localctx, 2);
        setState(3646);
        match(Fortran90Parser::PCT);
        setState(3647);
        match(Fortran90Parser::NAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SectionSubscriptRefContext ------------------------------------------------------------------

Fortran90Parser::SectionSubscriptRefContext::SectionSubscriptRefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::SectionSubscriptRefContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::SectionSubscriptListContext* Fortran90Parser::SectionSubscriptRefContext::sectionSubscriptList() {
  return getRuleContext<Fortran90Parser::SectionSubscriptListContext>(0);
}

tree::TerminalNode* Fortran90Parser::SectionSubscriptRefContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::SectionSubscriptRefContext::getRuleIndex() const {
  return Fortran90Parser::RuleSectionSubscriptRef;
}

void Fortran90Parser::SectionSubscriptRefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSectionSubscriptRef(this);
}

void Fortran90Parser::SectionSubscriptRefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSectionSubscriptRef(this);
}

Fortran90Parser::SectionSubscriptRefContext* Fortran90Parser::sectionSubscriptRef() {
  SectionSubscriptRefContext *_localctx = _tracker.createInstance<SectionSubscriptRefContext>(_ctx, getState());
  enterRule(_localctx, 678, Fortran90Parser::RuleSectionSubscriptRef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3650);
    match(Fortran90Parser::LPAREN);
    setState(3651);
    sectionSubscriptList();
    setState(3652);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SectionSubscriptListContext ------------------------------------------------------------------

Fortran90Parser::SectionSubscriptListContext::SectionSubscriptListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Fortran90Parser::SectionSubscriptContext *> Fortran90Parser::SectionSubscriptListContext::sectionSubscript() {
  return getRuleContexts<Fortran90Parser::SectionSubscriptContext>();
}

Fortran90Parser::SectionSubscriptContext* Fortran90Parser::SectionSubscriptListContext::sectionSubscript(size_t i) {
  return getRuleContext<Fortran90Parser::SectionSubscriptContext>(i);
}

std::vector<tree::TerminalNode *> Fortran90Parser::SectionSubscriptListContext::COMMA() {
  return getTokens(Fortran90Parser::COMMA);
}

tree::TerminalNode* Fortran90Parser::SectionSubscriptListContext::COMMA(size_t i) {
  return getToken(Fortran90Parser::COMMA, i);
}


size_t Fortran90Parser::SectionSubscriptListContext::getRuleIndex() const {
  return Fortran90Parser::RuleSectionSubscriptList;
}

void Fortran90Parser::SectionSubscriptListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSectionSubscriptList(this);
}

void Fortran90Parser::SectionSubscriptListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSectionSubscriptList(this);
}

Fortran90Parser::SectionSubscriptListContext* Fortran90Parser::sectionSubscriptList() {
  SectionSubscriptListContext *_localctx = _tracker.createInstance<SectionSubscriptListContext>(_ctx, getState());
  enterRule(_localctx, 680, Fortran90Parser::RuleSectionSubscriptList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3654);
    sectionSubscript();
    setState(3659);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3655);
        match(Fortran90Parser::COMMA);
        setState(3656);
        sectionSubscript(); 
      }
      setState(3661);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SectionSubscriptContext ------------------------------------------------------------------

Fortran90Parser::SectionSubscriptContext::SectionSubscriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExpressionContext* Fortran90Parser::SectionSubscriptContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

Fortran90Parser::SubscriptTripletTailContext* Fortran90Parser::SectionSubscriptContext::subscriptTripletTail() {
  return getRuleContext<Fortran90Parser::SubscriptTripletTailContext>(0);
}


size_t Fortran90Parser::SectionSubscriptContext::getRuleIndex() const {
  return Fortran90Parser::RuleSectionSubscript;
}

void Fortran90Parser::SectionSubscriptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSectionSubscript(this);
}

void Fortran90Parser::SectionSubscriptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSectionSubscript(this);
}

Fortran90Parser::SectionSubscriptContext* Fortran90Parser::sectionSubscript() {
  SectionSubscriptContext *_localctx = _tracker.createInstance<SectionSubscriptContext>(_ctx, getState());
  enterRule(_localctx, 682, Fortran90Parser::RuleSectionSubscript);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3667);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::RECURSIVE:
      case Fortran90Parser::CONTAINS:
      case Fortran90Parser::MODULE:
      case Fortran90Parser::ENDMODULE:
      case Fortran90Parser::PROGRAM:
      case Fortran90Parser::ENTRY:
      case Fortran90Parser::FUNCTION:
      case Fortran90Parser::BLOCK:
      case Fortran90Parser::SUBROUTINE:
      case Fortran90Parser::ENDINTERFACE:
      case Fortran90Parser::PROCEDURE:
      case Fortran90Parser::END:
      case Fortran90Parser::DIMENSION:
      case Fortran90Parser::TARGET:
      case Fortran90Parser::ALLOCATABLE:
      case Fortran90Parser::OPTIONAL:
      case Fortran90Parser::NAMELIST:
      case Fortran90Parser::INTENT:
      case Fortran90Parser::IN:
      case Fortran90Parser::OUT:
      case Fortran90Parser::INOUT:
      case Fortran90Parser::OPERATOR:
      case Fortran90Parser::USE:
      case Fortran90Parser::ONLY:
      case Fortran90Parser::ASSIGNMENT:
      case Fortran90Parser::DOP:
      case Fortran90Parser::DOUBLEPRECISION:
      case Fortran90Parser::ASSIGNSTMT:
      case Fortran90Parser::COMMON:
      case Fortran90Parser::ELSEWHERE:
      case Fortran90Parser::REAL:
      case Fortran90Parser::EQUIVALENCE:
      case Fortran90Parser::BLOCKDATA:
      case Fortran90Parser::POINTER:
      case Fortran90Parser::PRIVATE:
      case Fortran90Parser::SEQUENCE:
      case Fortran90Parser::ACCESSSPEC:
      case Fortran90Parser::IMPLICIT:
      case Fortran90Parser::NONE:
      case Fortran90Parser::CHARACTER:
      case Fortran90Parser::PARAMETER:
      case Fortran90Parser::EXTERNAL:
      case Fortran90Parser::INTRINSIC:
      case Fortran90Parser::SAVE:
      case Fortran90Parser::DATA:
      case Fortran90Parser::GO:
      case Fortran90Parser::GOTO:
      case Fortran90Parser::IF:
      case Fortran90Parser::THEN:
      case Fortran90Parser::ELSE:
      case Fortran90Parser::ENDIF:
      case Fortran90Parser::RESULT:
      case Fortran90Parser::ELSEIF:
      case Fortran90Parser::DO:
      case Fortran90Parser::INCLUDE:
      case Fortran90Parser::CONTINUE:
      case Fortran90Parser::ENDWHERE:
      case Fortran90Parser::WHERE:
      case Fortran90Parser::ENDSELECT:
      case Fortran90Parser::SELECTCASE:
      case Fortran90Parser::SELECT:
      case Fortran90Parser::CASE:
      case Fortran90Parser::DEFAULT:
      case Fortran90Parser::DIRECT:
      case Fortran90Parser::STOP:
      case Fortran90Parser::REC:
      case Fortran90Parser::ENDDO:
      case Fortran90Parser::PAUSE:
      case Fortran90Parser::WRITE:
      case Fortran90Parser::READ:
      case Fortran90Parser::PRINT:
      case Fortran90Parser::OPEN:
      case Fortran90Parser::FMT:
      case Fortran90Parser::UNIT:
      case Fortran90Parser::PAD:
      case Fortran90Parser::ACTION:
      case Fortran90Parser::DELIM:
      case Fortran90Parser::IOLENGTH:
      case Fortran90Parser::READWRITE:
      case Fortran90Parser::ERR:
      case Fortran90Parser::SIZE:
      case Fortran90Parser::ADVANCE:
      case Fortran90Parser::NML:
      case Fortran90Parser::IOSTAT:
      case Fortran90Parser::FORMAT:
      case Fortran90Parser::LET:
      case Fortran90Parser::CALL:
      case Fortran90Parser::RETURN:
      case Fortran90Parser::CLOSE:
      case Fortran90Parser::DOUBLE:
      case Fortran90Parser::IOSTART:
      case Fortran90Parser::SEQUENTIAL:
      case Fortran90Parser::LABEL:
      case Fortran90Parser::FILE:
      case Fortran90Parser::STATUS:
      case Fortran90Parser::ACCESS:
      case Fortran90Parser::POSITION:
      case Fortran90Parser::FORM:
      case Fortran90Parser::RECL:
      case Fortran90Parser::EXIST:
      case Fortran90Parser::OPENED:
      case Fortran90Parser::NUMBER:
      case Fortran90Parser::NAMED:
      case Fortran90Parser::NAME_:
      case Fortran90Parser::FORMATTED:
      case Fortran90Parser::UNFORMATTED:
      case Fortran90Parser::NEXTREC:
      case Fortran90Parser::INQUIRE:
      case Fortran90Parser::BACKSPACE:
      case Fortran90Parser::ENDFILE:
      case Fortran90Parser::REWIND:
      case Fortran90Parser::ENDBLOCKDATA:
      case Fortran90Parser::ENDBLOCK:
      case Fortran90Parser::KIND:
      case Fortran90Parser::LEN:
      case Fortran90Parser::LPAREN:
      case Fortran90Parser::WHILE:
      case Fortran90Parser::ALLOCATE:
      case Fortran90Parser::STAT:
      case Fortran90Parser::MINUS:
      case Fortran90Parser::PLUS:
      case Fortran90Parser::LNOT:
      case Fortran90Parser::TRUE:
      case Fortran90Parser::FALSE:
      case Fortran90Parser::CCON:
      case Fortran90Parser::HOLLERITH:
      case Fortran90Parser::CONCATOP:
      case Fortran90Parser::CTRLDIRECT:
      case Fortran90Parser::CTRLREC:
      case Fortran90Parser::TO:
      case Fortran90Parser::SUBPROGRAMBLOCK:
      case Fortran90Parser::DOBLOCK:
      case Fortran90Parser::AIF:
      case Fortran90Parser::THENBLOCK:
      case Fortran90Parser::ELSEBLOCK:
      case Fortran90Parser::CODEROOT:
      case Fortran90Parser::COMPLEX:
      case Fortran90Parser::PRECISION:
      case Fortran90Parser::INTEGER:
      case Fortran90Parser::LOGICAL:
      case Fortran90Parser::OBRACKETSLASH:
      case Fortran90Parser::SCON:
      case Fortran90Parser::RDCON:
      case Fortran90Parser::DEALLOCATE:
      case Fortran90Parser::NULLIFY:
      case Fortran90Parser::CYCLE:
      case Fortran90Parser::ENDTYPE:
      case Fortran90Parser::INTERFACE:
      case Fortran90Parser::SPOFF:
      case Fortran90Parser::SPON:
      case Fortran90Parser::ICON:
      case Fortran90Parser::TYPE:
      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(3662);
        expression(0);
        setState(3664);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Fortran90Parser::DOUBLECOLON || _la == Fortran90Parser::COLON) {
          setState(3663);
          subscriptTripletTail();
        }
        break;
      }

      case Fortran90Parser::DOUBLECOLON:
      case Fortran90Parser::COLON: {
        enterOuterAlt(_localctx, 2);
        setState(3666);
        subscriptTripletTail();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubscriptTripletTailContext ------------------------------------------------------------------

Fortran90Parser::SubscriptTripletTailContext::SubscriptTripletTailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Fortran90Parser::SubscriptTripletTailContext::COLON() {
  return getTokens(Fortran90Parser::COLON);
}

tree::TerminalNode* Fortran90Parser::SubscriptTripletTailContext::COLON(size_t i) {
  return getToken(Fortran90Parser::COLON, i);
}

std::vector<Fortran90Parser::ExpressionContext *> Fortran90Parser::SubscriptTripletTailContext::expression() {
  return getRuleContexts<Fortran90Parser::ExpressionContext>();
}

Fortran90Parser::ExpressionContext* Fortran90Parser::SubscriptTripletTailContext::expression(size_t i) {
  return getRuleContext<Fortran90Parser::ExpressionContext>(i);
}

tree::TerminalNode* Fortran90Parser::SubscriptTripletTailContext::DOUBLECOLON() {
  return getToken(Fortran90Parser::DOUBLECOLON, 0);
}


size_t Fortran90Parser::SubscriptTripletTailContext::getRuleIndex() const {
  return Fortran90Parser::RuleSubscriptTripletTail;
}

void Fortran90Parser::SubscriptTripletTailContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscriptTripletTail(this);
}

void Fortran90Parser::SubscriptTripletTailContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscriptTripletTail(this);
}

Fortran90Parser::SubscriptTripletTailContext* Fortran90Parser::subscriptTripletTail() {
  SubscriptTripletTailContext *_localctx = _tracker.createInstance<SubscriptTripletTailContext>(_ctx, getState());
  enterRule(_localctx, 684, Fortran90Parser::RuleSubscriptTripletTail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3680);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3669);
      match(Fortran90Parser::COLON);
      setState(3671);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1375731714) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1693353459891306497) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 288161656667373603) != 0)) {
        setState(3670);
        expression(0);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3673);
      match(Fortran90Parser::COLON);
      setState(3674);
      expression(0);
      setState(3675);
      match(Fortran90Parser::COLON);
      setState(3676);
      expression(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3678);
      match(Fortran90Parser::DOUBLECOLON);
      setState(3679);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalConstantContext ------------------------------------------------------------------

Fortran90Parser::LogicalConstantContext::LogicalConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::LogicalConstantContext::TRUE() {
  return getToken(Fortran90Parser::TRUE, 0);
}

tree::TerminalNode* Fortran90Parser::LogicalConstantContext::FALSE() {
  return getToken(Fortran90Parser::FALSE, 0);
}

tree::TerminalNode* Fortran90Parser::LogicalConstantContext::UNDERSCORE() {
  return getToken(Fortran90Parser::UNDERSCORE, 0);
}

Fortran90Parser::KindParamContext* Fortran90Parser::LogicalConstantContext::kindParam() {
  return getRuleContext<Fortran90Parser::KindParamContext>(0);
}

tree::TerminalNode* Fortran90Parser::LogicalConstantContext::DOT() {
  return getToken(Fortran90Parser::DOT, 0);
}


size_t Fortran90Parser::LogicalConstantContext::getRuleIndex() const {
  return Fortran90Parser::RuleLogicalConstant;
}

void Fortran90Parser::LogicalConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalConstant(this);
}

void Fortran90Parser::LogicalConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalConstant(this);
}

Fortran90Parser::LogicalConstantContext* Fortran90Parser::logicalConstant() {
  LogicalConstantContext *_localctx = _tracker.createInstance<LogicalConstantContext>(_ctx, getState());
  enterRule(_localctx, 686, Fortran90Parser::RuleLogicalConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3691);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3682);
      _la = _input->LA(1);
      if (!(_la == Fortran90Parser::TRUE

      || _la == Fortran90Parser::FALSE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3683);
      match(Fortran90Parser::TRUE);
      setState(3684);
      match(Fortran90Parser::UNDERSCORE);
      setState(3685);
      kindParam();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3686);
      match(Fortran90Parser::FALSE);
      setState(3687);
      match(Fortran90Parser::UNDERSCORE);
      setState(3688);
      kindParam();
      setState(3689);
      match(Fortran90Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KindParamContext ------------------------------------------------------------------

Fortran90Parser::KindParamContext::KindParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::KindParamContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}

Fortran90Parser::NamedConstantUseContext* Fortran90Parser::KindParamContext::namedConstantUse() {
  return getRuleContext<Fortran90Parser::NamedConstantUseContext>(0);
}


size_t Fortran90Parser::KindParamContext::getRuleIndex() const {
  return Fortran90Parser::RuleKindParam;
}

void Fortran90Parser::KindParamContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKindParam(this);
}

void Fortran90Parser::KindParamContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKindParam(this);
}

Fortran90Parser::KindParamContext* Fortran90Parser::kindParam() {
  KindParamContext *_localctx = _tracker.createInstance<KindParamContext>(_ctx, getState());
  enterRule(_localctx, 688, Fortran90Parser::RuleKindParam);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3695);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::ICON: {
        enterOuterAlt(_localctx, 1);
        setState(3693);
        match(Fortran90Parser::ICON);
        break;
      }

      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 2);
        setState(3694);
        namedConstantUse();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedArithmeticConstantContext ------------------------------------------------------------------

Fortran90Parser::UnsignedArithmeticConstantContext::UnsignedArithmeticConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::UnsignedArithmeticConstantContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}

tree::TerminalNode* Fortran90Parser::UnsignedArithmeticConstantContext::RDCON() {
  return getToken(Fortran90Parser::RDCON, 0);
}

Fortran90Parser::ComplexConstContext* Fortran90Parser::UnsignedArithmeticConstantContext::complexConst() {
  return getRuleContext<Fortran90Parser::ComplexConstContext>(0);
}

tree::TerminalNode* Fortran90Parser::UnsignedArithmeticConstantContext::UNDERSCORE() {
  return getToken(Fortran90Parser::UNDERSCORE, 0);
}

Fortran90Parser::KindParamContext* Fortran90Parser::UnsignedArithmeticConstantContext::kindParam() {
  return getRuleContext<Fortran90Parser::KindParamContext>(0);
}


size_t Fortran90Parser::UnsignedArithmeticConstantContext::getRuleIndex() const {
  return Fortran90Parser::RuleUnsignedArithmeticConstant;
}

void Fortran90Parser::UnsignedArithmeticConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnsignedArithmeticConstant(this);
}

void Fortran90Parser::UnsignedArithmeticConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnsignedArithmeticConstant(this);
}

Fortran90Parser::UnsignedArithmeticConstantContext* Fortran90Parser::unsignedArithmeticConstant() {
  UnsignedArithmeticConstantContext *_localctx = _tracker.createInstance<UnsignedArithmeticConstantContext>(_ctx, getState());
  enterRule(_localctx, 690, Fortran90Parser::RuleUnsignedArithmeticConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3705);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3697);
      _la = _input->LA(1);
      if (!(_la == Fortran90Parser::RDCON

      || _la == Fortran90Parser::ICON)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3698);
      complexConst();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3699);
      match(Fortran90Parser::ICON);
      setState(3700);
      match(Fortran90Parser::UNDERSCORE);
      setState(3701);
      kindParam();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3702);
      match(Fortran90Parser::RDCON);
      setState(3703);
      match(Fortran90Parser::UNDERSCORE);
      setState(3704);
      kindParam();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComplexConstContext ------------------------------------------------------------------

Fortran90Parser::ComplexConstContext::ComplexConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ComplexConstContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ComplexComponentContext* Fortran90Parser::ComplexConstContext::complexComponent() {
  return getRuleContext<Fortran90Parser::ComplexComponentContext>(0);
}

tree::TerminalNode* Fortran90Parser::ComplexConstContext::COMMA() {
  return getToken(Fortran90Parser::COMMA, 0);
}

tree::TerminalNode* Fortran90Parser::ComplexConstContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}


size_t Fortran90Parser::ComplexConstContext::getRuleIndex() const {
  return Fortran90Parser::RuleComplexConst;
}

void Fortran90Parser::ComplexConstContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComplexConst(this);
}

void Fortran90Parser::ComplexConstContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComplexConst(this);
}

Fortran90Parser::ComplexConstContext* Fortran90Parser::complexConst() {
  ComplexConstContext *_localctx = _tracker.createInstance<ComplexConstContext>(_ctx, getState());
  enterRule(_localctx, 692, Fortran90Parser::RuleComplexConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3707);
    match(Fortran90Parser::LPAREN);
    setState(3708);
    complexComponent();
    setState(3709);
    match(Fortran90Parser::COMMA);
    setState(3710);
    match(Fortran90Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComplexComponentContext ------------------------------------------------------------------

Fortran90Parser::ComplexComponentContext::ComplexComponentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::ComplexComponentContext::ICON() {
  return getToken(Fortran90Parser::ICON, 0);
}

tree::TerminalNode* Fortran90Parser::ComplexComponentContext::PLUS() {
  return getToken(Fortran90Parser::PLUS, 0);
}

tree::TerminalNode* Fortran90Parser::ComplexComponentContext::MINUS() {
  return getToken(Fortran90Parser::MINUS, 0);
}

tree::TerminalNode* Fortran90Parser::ComplexComponentContext::RDCON() {
  return getToken(Fortran90Parser::RDCON, 0);
}

tree::TerminalNode* Fortran90Parser::ComplexComponentContext::NAME() {
  return getToken(Fortran90Parser::NAME, 0);
}


size_t Fortran90Parser::ComplexComponentContext::getRuleIndex() const {
  return Fortran90Parser::RuleComplexComponent;
}

void Fortran90Parser::ComplexComponentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComplexComponent(this);
}

void Fortran90Parser::ComplexComponentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComplexComponent(this);
}

Fortran90Parser::ComplexComponentContext* Fortran90Parser::complexComponent() {
  ComplexComponentContext *_localctx = _tracker.createInstance<ComplexComponentContext>(_ctx, getState());
  enterRule(_localctx, 694, Fortran90Parser::RuleComplexComponent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3718);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Fortran90Parser::MINUS:
      case Fortran90Parser::PLUS:
      case Fortran90Parser::ICON: {
        enterOuterAlt(_localctx, 1);
        setState(3713);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Fortran90Parser::MINUS

        || _la == Fortran90Parser::PLUS) {
          setState(3712);
          _la = _input->LA(1);
          if (!(_la == Fortran90Parser::MINUS

          || _la == Fortran90Parser::PLUS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(3715);
        match(Fortran90Parser::ICON);
        break;
      }

      case Fortran90Parser::RDCON: {
        enterOuterAlt(_localctx, 2);
        setState(3716);
        match(Fortran90Parser::RDCON);
        break;
      }

      case Fortran90Parser::NAME: {
        enterOuterAlt(_localctx, 3);
        setState(3717);
        match(Fortran90Parser::NAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantExprContext ------------------------------------------------------------------

Fortran90Parser::ConstantExprContext::ConstantExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Fortran90Parser::ExpressionContext* Fortran90Parser::ConstantExprContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}


size_t Fortran90Parser::ConstantExprContext::getRuleIndex() const {
  return Fortran90Parser::RuleConstantExpr;
}

void Fortran90Parser::ConstantExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantExpr(this);
}

void Fortran90Parser::ConstantExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantExpr(this);
}

Fortran90Parser::ConstantExprContext* Fortran90Parser::constantExpr() {
  ConstantExprContext *_localctx = _tracker.createInstance<ConstantExprContext>(_ctx, getState());
  enterRule(_localctx, 696, Fortran90Parser::RuleConstantExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3720);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

Fortran90Parser::IfStmtContext::IfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Fortran90Parser::IfStmtContext::IF() {
  return getToken(Fortran90Parser::IF, 0);
}

tree::TerminalNode* Fortran90Parser::IfStmtContext::LPAREN() {
  return getToken(Fortran90Parser::LPAREN, 0);
}

Fortran90Parser::ExpressionContext* Fortran90Parser::IfStmtContext::expression() {
  return getRuleContext<Fortran90Parser::ExpressionContext>(0);
}

tree::TerminalNode* Fortran90Parser::IfStmtContext::RPAREN() {
  return getToken(Fortran90Parser::RPAREN, 0);
}

Fortran90Parser::ActionStmtContext* Fortran90Parser::IfStmtContext::actionStmt() {
  return getRuleContext<Fortran90Parser::ActionStmtContext>(0);
}


size_t Fortran90Parser::IfStmtContext::getRuleIndex() const {
  return Fortran90Parser::RuleIfStmt;
}

void Fortran90Parser::IfStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStmt(this);
}

void Fortran90Parser::IfStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Fortran90ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStmt(this);
}

Fortran90Parser::IfStmtContext* Fortran90Parser::ifStmt() {
  IfStmtContext *_localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
  enterRule(_localctx, 698, Fortran90Parser::RuleIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3722);
    match(Fortran90Parser::IF);
    setState(3723);
    match(Fortran90Parser::LPAREN);
    setState(3724);
    expression(0);
    setState(3725);
    match(Fortran90Parser::RPAREN);
    setState(3726);
    actionStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool Fortran90Parser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 6: return bodyPlusInternalsSempred(antlrcpp::downCast<BodyPlusInternalsContext *>(context), predicateIndex);
    case 21: return blockDataBodySempred(antlrcpp::downCast<BlockDataBodyContext *>(context), predicateIndex);
    case 25: return fmtSpecSempred(antlrcpp::downCast<FmtSpecContext *>(context), predicateIndex);
    case 47: return namelistGroupsSempred(antlrcpp::downCast<NamelistGroupsContext *>(context), predicateIndex);
    case 81: return comlistSempred(antlrcpp::downCast<ComlistContext *>(context), predicateIndex);
    case 87: return attrSpecSeqSempred(antlrcpp::downCast<AttrSpecSeqContext *>(context), predicateIndex);
    case 94: return assumedShapeSpecListSempred(antlrcpp::downCast<AssumedShapeSpecListContext *>(context), predicateIndex);
    case 102: return interfaceBlockBodySempred(antlrcpp::downCast<InterfaceBlockBodyContext *>(context), predicateIndex);
    case 116: return subprogramInterfaceBodySempred(antlrcpp::downCast<SubprogramInterfaceBodyContext *>(context), predicateIndex);
    case 121: return derivedTypeBodySempred(antlrcpp::downCast<DerivedTypeBodyContext *>(context), predicateIndex);
    case 152: return moduleBodySempred(antlrcpp::downCast<ModuleBodyContext *>(context), predicateIndex);
    case 163: return elseWhereSempred(antlrcpp::downCast<ElseWhereContext *>(context), predicateIndex);
    case 166: return whereSempred(antlrcpp::downCast<WhereContext *>(context), predicateIndex);
    case 172: return selectCaseBodySempred(antlrcpp::downCast<SelectCaseBodyContext *>(context), predicateIndex);
    case 211: return structureComponentSempred(antlrcpp::downCast<StructureComponentContext *>(context), predicateIndex);
    case 227: return pointerFieldSempred(antlrcpp::downCast<PointerFieldContext *>(context), predicateIndex);
    case 235: return allocateObjectSempred(antlrcpp::downCast<AllocateObjectContext *>(context), predicateIndex);
    case 239: return ioControlSpecListSempred(antlrcpp::downCast<IoControlSpecListContext *>(context), predicateIndex);
    case 255: return rdIoCtlSpecListSempred(antlrcpp::downCast<RdIoCtlSpecListContext *>(context), predicateIndex);
    case 259: return outputItemList1Sempred(antlrcpp::downCast<OutputItemList1Context *>(context), predicateIndex);
    case 301: return uFExprSempred(antlrcpp::downCast<UFExprContext *>(context), predicateIndex);
    case 302: return uFTermSempred(antlrcpp::downCast<UFTermContext *>(context), predicateIndex);
    case 314: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);
    case 332: return acValueList1Sempred(antlrcpp::downCast<AcValueList1Context *>(context), predicateIndex);
    case 335: return functionArgListSempred(antlrcpp::downCast<FunctionArgListContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::bodyPlusInternalsSempred(BodyPlusInternalsContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::blockDataBodySempred(BlockDataBodyContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::fmtSpecSempred(FmtSpecContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 5);
    case 3: return precpred(_ctx, 4);
    case 4: return precpred(_ctx, 3);
    case 5: return precpred(_ctx, 2);
    case 6: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::namelistGroupsSempred(NamelistGroupsContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 3);
    case 8: return precpred(_ctx, 2);
    case 9: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::comlistSempred(ComlistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 2);
    case 11: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::attrSpecSeqSempred(AttrSpecSeqContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 12: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::assumedShapeSpecListSempred(AssumedShapeSpecListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 13: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::interfaceBlockBodySempred(InterfaceBlockBodyContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 14: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::subprogramInterfaceBodySempred(SubprogramInterfaceBodyContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::derivedTypeBodySempred(DerivedTypeBodyContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 16: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::moduleBodySempred(ModuleBodyContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 17: return precpred(_ctx, 2);
    case 18: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::elseWhereSempred(ElseWhereContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 19: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::whereSempred(WhereContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 20: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::selectCaseBodySempred(SelectCaseBodyContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 21: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::structureComponentSempred(StructureComponentContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 22: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::pointerFieldSempred(PointerFieldContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 23: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::allocateObjectSempred(AllocateObjectContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 24: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::ioControlSpecListSempred(IoControlSpecListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 25: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::rdIoCtlSpecListSempred(RdIoCtlSpecListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 26: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::outputItemList1Sempred(OutputItemList1Context *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 27: return precpred(_ctx, 2);
    case 28: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::uFExprSempred(UFExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 29: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::uFTermSempred(UFTermContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 30: return precpred(_ctx, 2);
    case 31: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 32: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::acValueList1Sempred(AcValueList1Context *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 33: return precpred(_ctx, 2);
    case 34: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Fortran90Parser::functionArgListSempred(FunctionArgListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 35: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void Fortran90Parser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  fortran90parserParserInitialize();
#else
  ::antlr4::internal::call_once(fortran90parserParserOnceFlag, fortran90parserParserInitialize);
#endif
}
